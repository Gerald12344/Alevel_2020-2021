{"ast":null,"code":"import * as THREE from \"three\";\nimport { Perlin } from \"./Perlin.js\";\n/**\n * This class is an implimentaiton of a Fractal Brownian Motion\n * function using Perlin Nosie.\n */\n\nexport class FBM {\n  /**\n   * Create an instance of the FBM class.\n   * Use this instance to generate fBm noise.\n   *\n   * @param {Object} options Options for fBm generaiton.\n   * @param {number} options.seed Seed for Perlin Noise\n   * @param {number} options.scale What distance to view the noisemap\n   * @param {number} options.persistance How much each octave contributes to the overall shape\n   * @param {number} options.lacunarity How much detail is added or removed at each octave\n   * @param {number} options.octaves Levels of detail you want you perlin noise to have\n   * @param {number} options.redistribution Level of flatness within the valleys\n   */\n  constructor(options) {\n    const {\n      seed,\n      scale,\n      persistance,\n      lacunarity,\n      octaves,\n      redistribution\n    } = options;\n    this._noise = new Perlin(seed);\n    this._scale = scale || 1;\n    this._persistance = persistance || 0.5;\n    this._lacunarity = lacunarity || 2;\n    this._octaves = octaves || 6;\n    this._redistribution = redistribution || 1;\n  }\n  /**\n   * Sample 2D Perlin Noise with fBm at given\n   * coordinates. The function will use <code>Perlin_get2</code> or <code>Perlin_get3</code>\n   * depending on the input vector's type.\n   *\n   * @param {(THREE.Vector2 | THREE.Vector3)} input Coordinates to sample noise at.\n   * @returns {number} Normalized noise in the range [0, 1]\n   */\n\n\n  get2(input) {\n    let result = 0;\n    let amplitude = 1;\n    let frequency = 1;\n    let max = amplitude;\n\n    let noiseFunction = this._noise.get2.bind(this._noise);\n\n    for (let i = 0; i < this._octaves; i++) {\n      const position = new THREE.Vector2(input.x * this._scale * frequency, input.y * this._scale * frequency);\n      const noiseVal = noiseFunction(position);\n      result += noiseVal * amplitude;\n      frequency *= this._lacunarity;\n      amplitude *= this._persistance;\n      max += amplitude;\n    }\n\n    const redistributed = Math.pow(result, this._redistribution);\n    return redistributed / max;\n  }\n  /**\n   * Sample 3D Perlin Noise with fBm at given\n   * coordinates. The function will use <code>Perlin_get2</code> or <code>Perlin_get3</code>\n   * depending on the input vector's type.\n   *\n   * @param {THREE.Vector3} input Coordinates to sample noise at.\n   * @returns {number} Normalized noise in the range [0, 1]\n   */\n\n\n  get3(input) {\n    let result = 0;\n    let amplitude = 1;\n    let frequency = 1;\n    let max = amplitude;\n\n    let noiseFunction = this._noise.get3.bind(this._noise);\n\n    for (let i = 0; i < this._octaves; i++) {\n      const position = new THREE.Vector2(input.x * this._scale * frequency, input.y * this._scale * frequency, input.z * this._scale * frequency);\n      const noiseVal = noiseFunction(position);\n      result += noiseVal * amplitude;\n      frequency *= this._lacunarity;\n      amplitude *= this._persistance;\n      max += amplitude;\n    }\n\n    const redistributed = Math.pow(result, this._redistribution);\n    return redistributed / max;\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/PerlinNoise/PerlingNoise.js"],"names":["THREE","Perlin","FBM","constructor","options","seed","scale","persistance","lacunarity","octaves","redistribution","_noise","_scale","_persistance","_lacunarity","_octaves","_redistribution","get2","input","result","amplitude","frequency","max","noiseFunction","bind","i","position","Vector2","x","y","noiseVal","redistributed","Math","pow","get3","z"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport { Perlin } from \"./Perlin.js\";\n\n/**\n * This class is an implimentaiton of a Fractal Brownian Motion\n * function using Perlin Nosie.\n */\nexport class FBM {\n  /**\n   * Create an instance of the FBM class.\n   * Use this instance to generate fBm noise.\n   *\n   * @param {Object} options Options for fBm generaiton.\n   * @param {number} options.seed Seed for Perlin Noise\n   * @param {number} options.scale What distance to view the noisemap\n   * @param {number} options.persistance How much each octave contributes to the overall shape\n   * @param {number} options.lacunarity How much detail is added or removed at each octave\n   * @param {number} options.octaves Levels of detail you want you perlin noise to have\n   * @param {number} options.redistribution Level of flatness within the valleys\n   */\n  constructor(options) {\n    const { seed, scale, persistance, lacunarity, octaves, redistribution } =\n      options;\n    this._noise = new Perlin(seed);\n    this._scale = scale || 1;\n    this._persistance = persistance || 0.5;\n    this._lacunarity = lacunarity || 2;\n    this._octaves = octaves || 6;\n    this._redistribution = redistribution || 1;\n  }\n\n  /**\n   * Sample 2D Perlin Noise with fBm at given\n   * coordinates. The function will use <code>Perlin_get2</code> or <code>Perlin_get3</code>\n   * depending on the input vector's type.\n   *\n   * @param {(THREE.Vector2 | THREE.Vector3)} input Coordinates to sample noise at.\n   * @returns {number} Normalized noise in the range [0, 1]\n   */\n  get2(input) {\n    let result = 0;\n    let amplitude = 1;\n    let frequency = 1;\n    let max = amplitude;\n\n    let noiseFunction = this._noise.get2.bind(this._noise);\n\n    for (let i = 0; i < this._octaves; i++) {\n      const position = new THREE.Vector2(\n        input.x * this._scale * frequency,\n        input.y * this._scale * frequency\n      );\n\n      const noiseVal = noiseFunction(position);\n      result += noiseVal * amplitude;\n\n      frequency *= this._lacunarity;\n      amplitude *= this._persistance;\n      max += amplitude;\n    }\n\n    const redistributed = Math.pow(result, this._redistribution);\n    return redistributed / max;\n  }\n\n  /**\n   * Sample 3D Perlin Noise with fBm at given\n   * coordinates. The function will use <code>Perlin_get2</code> or <code>Perlin_get3</code>\n   * depending on the input vector's type.\n   *\n   * @param {THREE.Vector3} input Coordinates to sample noise at.\n   * @returns {number} Normalized noise in the range [0, 1]\n   */\n  get3(input) {\n    let result = 0;\n    let amplitude = 1;\n    let frequency = 1;\n    let max = amplitude;\n\n    let noiseFunction = this._noise.get3.bind(this._noise);\n\n    for (let i = 0; i < this._octaves; i++) {\n      const position = new THREE.Vector2(\n        input.x * this._scale * frequency,\n        input.y * this._scale * frequency,\n        input.z * this._scale * frequency\n      );\n\n      const noiseVal = noiseFunction(position);\n      result += noiseVal * amplitude;\n\n      frequency *= this._lacunarity;\n      amplitude *= this._persistance;\n      max += amplitude;\n    }\n\n    const redistributed = Math.pow(result, this._redistribution);\n    return redistributed / max;\n  }\n}"]},"metadata":{},"sourceType":"module"}