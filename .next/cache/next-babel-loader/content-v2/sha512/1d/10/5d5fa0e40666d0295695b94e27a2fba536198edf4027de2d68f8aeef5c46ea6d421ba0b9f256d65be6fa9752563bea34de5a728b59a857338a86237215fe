{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three'; // Randomly delplace cloud verticies\n\nconst map = (val, smin, smax, emin, emax) => (emax - emin) * (val - smin) / (smax - smin) + emin;\n\nconst jitter = (geo, per) => geo.vertices.forEach(v => {\n  v.x += map(Math.random(), 0, 1, -per, per);\n  v.y += map(Math.random(), 0, 1, -per, per);\n  v.z += map(Math.random(), 0, 1, -per, per);\n});\n\nexport class GenerateClouds {\n  constructor(pos, scene, speed, scale) {\n    const group = new Group();\n    const tuft1 = new SphereBufferGeometry(1.5 * scale, 7, 11);\n    tuft1.translate(-2 * scale, 0, 0);\n    const tuft3 = new SphereBufferGeometry(1.5 * scale, 7, 11);\n    tuft3.translate(2 * scale, 0, 0);\n    const tuft2 = new SphereBufferGeometry(2.0 * scale, 7, 11);\n    tuft2.translate(0, 0, 0);\n    jitter(tuft1, 0.01);\n    const mat = new MeshPhongMaterial({\n      color: 'white',\n      flatShading: true\n    });\n    let cloud = new Mesh(tuft1, mat);\n    let cloud1 = new Mesh(tuft2, mat);\n    let cloud2 = new Mesh(tuft3, mat);\n    group.add(cloud);\n    group.add(cloud1);\n    group.add(cloud2);\n    scene.add(group);\n    group.castShadow = true;\n    group.receiveShadow = true;\n    group.position.x = pos.x;\n    group.position.y = pos.y;\n    group.position.z = pos.z;\n    this.grass = group;\n    this.speed = speed;\n    this.pos = pos;\n  }\n\n  update() {\n    let geos = this.grass;\n    geos.position.x += this.speed;\n\n    if (geos.position.x > 400) {\n      geos.position.x = this.pos.x;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/clouds.js"],"names":["Group","Mesh","MeshPhongMaterial","SphereBufferGeometry","map","val","smin","smax","emin","emax","jitter","geo","per","vertices","forEach","v","x","Math","random","y","z","GenerateClouds","constructor","pos","scene","speed","scale","group","tuft1","translate","tuft3","tuft2","mat","color","flatShading","cloud","cloud1","cloud2","add","castShadow","receiveShadow","position","grass","update","geos"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three';\n\n\n// Randomly delplace cloud verticies\nconst map = (val, smin, smax, emin, emax) => (emax-emin)*(val-smin)/(smax-smin) + emin\nconst jitter = (geo,per) => geo.vertices.forEach(v => {\n    v.x += map(Math.random(),0,1,-per,per)\n    v.y += map(Math.random(),0,1,-per,per)\n    v.z += map(Math.random(),0,1,-per,per)\n})\n\nexport class GenerateClouds {\n    constructor(pos, scene, speed, scale) {\n\n\n        const group = new Group();\n\n        const tuft1 = new SphereBufferGeometry(1.5*scale,7,11)\n        tuft1.translate(-2*scale, 0, 0)\n\n\n        const tuft3 = new SphereBufferGeometry(1.5*scale,7,11)\n        tuft3.translate(2*scale, 0, 0)\n\n        const tuft2 = new SphereBufferGeometry(2.0*scale,7,11)\n        tuft2.translate(0, 0, 0)\n\n        jitter(tuft1, 0.01)\n\n\n        const mat = new MeshPhongMaterial({\n            color: 'white',\n            flatShading: true,\n        })\n\n        let cloud = new Mesh(\n            tuft1,\n            mat\n        )\n        let cloud1 = new Mesh(\n            tuft2,\n            mat\n        )\n        let cloud2 = new Mesh(\n            tuft3,\n            mat\n        )\n\n        group.add(cloud)\n        group.add(cloud1)\n        group.add(cloud2)\n\n        scene.add(group)\n        group.castShadow = true\n        group.receiveShadow = true\n        group.position.x = pos.x\n        group.position.y = pos.y\n        group.position.z = pos.z\n\n        this.grass = group\n        this.speed = speed   \n        this.pos = pos\n    }\n\n    update() {\n        let geos = this.grass\n        geos.position.x +=  this.speed\n        if(geos.position.x > 400){\n           geos.position.x = this.pos.x\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}