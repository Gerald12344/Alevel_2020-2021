{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\n\nvar SimplexNoise = require(\"simplex-noise\");\n\nexport function GenerateTrees(_x, _x2, _x3, _x4, _x5) {\n  return _GenerateTrees.apply(this, arguments);\n}\n_c2 = GenerateTrees;\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene, start, bounds, seed) {\n    var tree, snowyTree, group, simplex, i, randomVector, height, newTree, _newTree;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            _context.next = 5;\n            return addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n\n          case 5:\n            snowyTree = _context.sent;\n            tree.scene.children[0].material = new MeshStandardMaterial({\n              color: 0x694b37\n            });\n            tree.scene.children[1].material = new MeshStandardMaterial({\n              color: 0x216734\n            });\n            snowyTree.scene.children[0].material = new MeshStandardMaterial({\n              color: 0x694b37\n            });\n            snowyTree.scene.children[1].material = new MeshStandardMaterial({\n              color: 0x216734\n            });\n            snowyTree.scene.children[2].material = new MeshStandardMaterial({\n              color: 0xffffff\n            });\n            group = new Group();\n            simplex = new SimplexNoise(seed); //let raycaster = new Raycaster()\n\n            for (i = 0; i < num; i++) {\n              randomVector = randomVectorBetweenPoints2D(start, bounds);\n              randomVector.y = 50; //raycaster.set(randomVector, new Vector3(0,-1,0))\n              //const intersects = raycaster.intersectObjects( [terrain] );\n\n              height = simplex.noise2D(randomVector.x / 128, randomVector.y / 128) * 30;\n              /*;\n              if(intersects[0] !== undefined && intersects[0]?.point.y > -20 && intersects[0]?.point.y < 20){\n                  let newTree = tree.scene.clone()\n                  newTree.rotateY(radiants(Math.random()*360))\n                  //let point = intersects[0].point\n                  newTree.position.set(randomVector.x, height, randomVector.z)\n                  group.add(newTree)\n              }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n                  let newTree = snowyTree.scene.clone()\n                  newTree.rotateY(radiants(Math.random()*360))\n                  //let point = intersects[0].point\n                  newTree.position.set(randomVector.x, height, randomVector.z)\n                  group.add(newTree)\n              }*/\n\n              if (height > -20 && height < 20) {\n                newTree = tree.scene.clone();\n                newTree.rotateY(radiants(Math.random() * 360)); //let point = intersects[0].point\n\n                newTree.position.set(randomVector.x, height, randomVector.z);\n                group.add(newTree);\n              } else if (height > 20) {\n                _newTree = snowyTree.scene.clone();\n\n                _newTree.rotateY(radiants(Math.random() * 360)); //let point = intersects[0].point\n\n\n                _newTree.position.set(randomVector.x, height, randomVector.z);\n\n                group.add(_newTree);\n              }\n            }\n\n            scene.add(group);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}\n\n_c = GenerateTrees;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateTrees\");\n$RefreshReg$(_c2, \"GenerateTrees\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","SimplexNoise","require","GenerateTrees","num","scene","start","bounds","seed","tree","snowyTree","children","material","color","group","simplex","i","randomVector","y","height","noise2D","x","newTree","clone","rotateY","Math","random","position","set","z","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nvar SimplexNoise = require(\"simplex-noise\");\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    tree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    snowyTree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[2].material = new MeshStandardMaterial({color: 0xffffff })\n\n    \n    let group = new Group()\n    const simplex = new SimplexNoise(seed);\n    //let raycaster = new Raycaster()\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        //raycaster.set(randomVector, new Vector3(0,-1,0))\n        //const intersects = raycaster.intersectObjects( [terrain] );\n\n        let height = simplex.noise2D((randomVector.x)/128, (randomVector.y)/128) * 30\n        /*;\n        if(intersects[0] !== undefined && intersects[0]?.point.y > -20 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            //let point = intersects[0].point\n            newTree.position.set(randomVector.x, height, randomVector.z)\n            group.add(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            //let point = intersects[0].point\n            newTree.position.set(randomVector.x, height, randomVector.z)\n            group.add(newTree)\n        }*/\n        if(height> -20 && height < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            //let point = intersects[0].point\n            newTree.position.set(randomVector.x, height, randomVector.z)\n            group.add(newTree)\n        }else if(height > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            //let point = intersects[0].point\n            newTree.position.set(randomVector.x, height, randomVector.z)\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}