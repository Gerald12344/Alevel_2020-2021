{"ast":null,"code":"import { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from '../../Core-API/3dModelHandlers/utils';\nexport async function GenerateTrees(num, scene, start, bounds, terrain) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  let snowyTree = await addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n  let leaves = new MeshLambertMaterial({\n    color: 0x694b37\n  });\n  let trunk = new MeshLambertMaterial({\n    color: 0x216734\n  });\n  tree.scene.children[0].material = leaves;\n  tree.scene.children[1].material = trunk;\n  snowyTree.scene.children[0].material = leaves;\n  snowyTree.scene.children[1].material = trunk;\n  snowyTree.scene.children[2].material = new MeshLambertMaterial({\n    color: 0xffffff\n  });\n  let group = new Group();\n  let raycaster = new Raycaster();\n  let trees = [];\n\n  for (let i = 0; i < num; i++) {\n    var _intersects$, _intersects$2, _intersects$3;\n\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    randomVector.y = 50;\n    raycaster.set(randomVector, new Vector3(0, -1, 0));\n    const intersects = raycaster.intersectObjects([terrain]);\n\n    if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > 2 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) > 20) {\n      let newTree = snowyTree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    }\n  }\n\n  scene.add(group);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","BufferGeometryUtils","GenerateTrees","num","scene","start","bounds","terrain","tree","snowyTree","leaves","color","trunk","children","material","group","raycaster","trees","i","randomVector","y","set","intersects","intersectObjects","undefined","point","newTree","clone","rotateY","Math","random","position","x","z","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from '../../Core-API/3dModelHandlers/utils'\n\nexport async function GenerateTrees(num, scene, start, bounds, terrain){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    let leaves = new MeshLambertMaterial({color: 0x694b37 })\n    let trunk = new MeshLambertMaterial({color: 0x216734 })\n    tree.scene.children[0].material = leaves\n    tree.scene.children[1].material = trunk\n    snowyTree.scene.children[0].material = leaves\n    snowyTree.scene.children[1].material = trunk\n    snowyTree.scene.children[2].material = new MeshLambertMaterial({color: 0xffffff })\n\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    let trees = []\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        raycaster.set(randomVector, new Vector3(0,-1,0))\n        const intersects = raycaster.intersectObjects( [terrain] );\n\n        \n\n        if(intersects[0] !== undefined && intersects[0]?.point.y > 2 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }\n        \n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}