{"ast":null,"code":"import _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar top = 0;\n\nvar parent = function parent(i) {\n  (i + 1 >>> 1) - 1;\n};\n\nvar left = function left(i) {\n  (i << 1) + 1;\n};\n\nvar right = function right(i) {\n  i + 1 << 1;\n};\n\nexport var PriorityQueue = /*#__PURE__*/function () {\n  function PriorityQueue() {\n    var comparator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (a, b) {\n      a > b;\n    };\n\n    _classCallCheck(this, PriorityQueue);\n\n    this._heap = [];\n    this._comparator = comparator;\n  }\n\n  _createClass(PriorityQueue, [{\n    key: \"size\",\n    value: function size() {\n      return this._heap.length;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.size() === 0;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this._heap[parseInt(top)];\n    }\n  }, {\n    key: \"push\",\n    value: function push() {\n      var _this = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      values.forEach(function (value) {\n        _this._heap.push(value);\n\n        _this._siftUp();\n      });\n      return this.size();\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var poppedValue = this.peek();\n      var bottom = this.size() - 1;\n\n      if (bottom > top) {\n        this._swap(top, bottom);\n      }\n\n      this._heap.pop();\n\n      this._siftDown();\n\n      return poppedValue;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(value) {\n      var replacedValue = this.peek();\n      this._heap[parseInt(top, 10)] = value;\n\n      this._siftDown();\n\n      return replacedValue;\n    }\n  }, {\n    key: \"_greater\",\n    value: function _greater(i, j) {\n      return this._comparator(this._heap[parseInt(i, 10)], this._heap[parseInt(j, 10)]);\n    }\n  }, {\n    key: \"_swap\",\n    value: function _swap(i, j) {\n      var _ref = [this._heap[parseInt(j, 10)], this._heap[parseInt(i, 10)]];\n      this._heap[parseInt(i, 10)] = _ref[0];\n      this._heap[parseInt(j, 10)] = _ref[1];\n    }\n  }, {\n    key: \"_siftUp\",\n    value: function _siftUp() {\n      var node = this.size() - 1;\n\n      while (node > top && this._greater(node, parent(node))) {\n        this._swap(node, parent(node));\n\n        node = parent(node);\n      }\n    }\n    /*eslint complexity: [\"error\", 20]*/\n\n  }, {\n    key: \"_siftDown\",\n    value: function _siftDown() {\n      var node = top;\n\n      while (left(node) < this.size() && this._greater(left(node), node) || right(node) < this.size() && this._greater(right(node), node)) {\n        var maxChild = right(node) < this.size() && this._greater(right(node), left(node)) ? right(node) : left(node);\n\n        this._swap(node, maxChild);\n\n        node = maxChild;\n      }\n    }\n  }]);\n\n  return PriorityQueue;\n}();","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Algorithms/PriorityQueue.js"],"names":["top","parent","i","left","right","PriorityQueue","comparator","a","b","_heap","_comparator","length","size","parseInt","values","forEach","value","push","_siftUp","poppedValue","peek","bottom","_swap","pop","_siftDown","replacedValue","j","node","_greater","maxChild"],"mappings":"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","sourcesContent":["const top = 0;\nconst parent = (i) => {\n    ((i + 1) >>> 1) - 1;\n};\nconst left = (i) => {\n    (i << 1) + 1;\n};\nconst right = (i) => {\n    (i + 1) << 1;\n};\n\nexport class PriorityQueue {\n    constructor(\n        comparator = (a, b) => {\n            a > b;\n        }\n    ) {\n        this._heap = [];\n        this._comparator = comparator;\n    }\n    size() {\n        return this._heap.length;\n    }\n    isEmpty() {\n        return this.size() === 0;\n    }\n    peek() {\n        return this._heap[parseInt(top)];\n    }\n    push(...values) {\n        values.forEach((value) => {\n            this._heap.push(value);\n            this._siftUp();\n        });\n        return this.size();\n    }\n    pop() {\n        const poppedValue = this.peek();\n        const bottom = this.size() - 1;\n        if (bottom > top) {\n            this._swap(top, bottom);\n        }\n        this._heap.pop();\n        this._siftDown();\n        return poppedValue;\n    }\n    replace(value) {\n        const replacedValue = this.peek();\n        this._heap[parseInt(top,10)] = value;\n        this._siftDown();\n        return replacedValue;\n    }\n    _greater(i, j) {\n        return this._comparator(this._heap[parseInt(i,10)], this._heap[parseInt(j,10)]);\n    }\n    _swap(i, j) {\n        [this._heap[parseInt(i,10)], this._heap[parseInt(j,10)]] = [this._heap[parseInt(j,10)], this._heap[parseInt(i,10)]];\n    }\n    _siftUp() {\n        let node = this.size() - 1;\n        while (node > top && this._greater(node, parent(node))) {\n            this._swap(node, parent(node));\n            node = parent(node);\n        }\n    }\n    /*eslint complexity: [\"error\", 20]*/\n    _siftDown() {\n        let node = top;\n        while (\n            (left(node) < this.size() && this._greater(left(node), node)) ||\n            (right(node) < this.size() && this._greater(right(node), node))\n        ) {\n            let maxChild =\n                right(node) < this.size() &&\n                this._greater(right(node), left(node))\n                    ? right(node)\n                    : left(node);\n            this._swap(node, maxChild);\n            node = maxChild;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}