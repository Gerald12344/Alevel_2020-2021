{"ast":null,"code":"import * as THREE from 'three';\nexport class GenerateClouds {\n  constructor(pos, scene, speed) {\n    scale = 1;\n    const group = new THREE.Group();\n    const tuft1 = new THREE.SphereBufferGeometry(1.5 * scale, 7 * scale, 11);\n    tuft1.translate(-2 * scale, 0, 0);\n    const tuft3 = new THREE.SphereBufferGeometry(1.5 * scale, 7 * scale, 11);\n    tuft3.translate(2 * scale, 0, 0);\n    const tuft2 = new THREE.SphereBufferGeometry(2.0 * scale, 7 * scale, 11);\n    tuft2.translate(0, 0, 0);\n    let cloud = new THREE.Mesh(tuft1, new THREE.MeshPhongMaterial({\n      color: 'white',\n      flatShading: true\n    }));\n    let cloud1 = new THREE.Mesh(tuft2, new THREE.MeshPhongMaterial({\n      color: 'white',\n      flatShading: true\n    }));\n    let cloud2 = new THREE.Mesh(tuft3, new THREE.MeshPhongMaterial({\n      color: 'white',\n      flatShading: true\n    }));\n    group.add(cloud);\n    group.add(cloud1);\n    group.add(cloud2);\n    scene.add(group);\n    group.castShadow = true;\n    group.receiveShadow = true;\n    group.position.x = pos.x;\n    group.position.y = pos.y;\n    group.position.z = pos.z;\n    this.grass = group;\n    this.speed = speed;\n    this.pos = pos;\n  }\n\n  update() {\n    let geos = this.grass;\n    geos.position.x += this.speed;\n\n    if (geos.position.x > 400) {\n      geos.position.x = this.pos.x;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/clouds.js"],"names":["THREE","GenerateClouds","constructor","pos","scene","speed","scale","group","Group","tuft1","SphereBufferGeometry","translate","tuft3","tuft2","cloud","Mesh","MeshPhongMaterial","color","flatShading","cloud1","cloud2","add","castShadow","receiveShadow","position","x","y","z","grass","update","geos"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,EAAoB;AAE3BC,IAAAA,KAAK,GAAG,CAAR;AAEA,UAAMC,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAV,EAAd;AAEA,UAAMC,KAAK,GAAG,IAAIT,KAAK,CAACU,oBAAV,CAA+B,MAAIJ,KAAnC,EAAyC,IAAEA,KAA3C,EAAiD,EAAjD,CAAd;AACAG,IAAAA,KAAK,CAACE,SAAN,CAAgB,CAAC,CAAD,GAAGL,KAAnB,EAA0B,CAA1B,EAA6B,CAA7B;AAGA,UAAMM,KAAK,GAAG,IAAIZ,KAAK,CAACU,oBAAV,CAA+B,MAAIJ,KAAnC,EAAyC,IAAEA,KAA3C,EAAiD,EAAjD,CAAd;AACAM,IAAAA,KAAK,CAACD,SAAN,CAAgB,IAAEL,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B;AAEA,UAAMO,KAAK,GAAG,IAAIb,KAAK,CAACU,oBAAV,CAA+B,MAAIJ,KAAnC,EAAyC,IAAEA,KAA3C,EAAiD,EAAjD,CAAd;AACAO,IAAAA,KAAK,CAACF,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;AAIA,QAAIG,KAAK,GAAG,IAAId,KAAK,CAACe,IAAV,CACRN,KADQ,EAER,IAAIT,KAAK,CAACgB,iBAAV,CAA4B;AACxBC,MAAAA,KAAK,EAAE,OADiB;AAExBC,MAAAA,WAAW,EAAE;AAFW,KAA5B,CAFQ,CAAZ;AAOA,QAAIC,MAAM,GAAG,IAAInB,KAAK,CAACe,IAAV,CACTF,KADS,EAET,IAAIb,KAAK,CAACgB,iBAAV,CAA4B;AACxBC,MAAAA,KAAK,EAAE,OADiB;AAExBC,MAAAA,WAAW,EAAE;AAFW,KAA5B,CAFS,CAAb;AAOA,QAAIE,MAAM,GAAG,IAAIpB,KAAK,CAACe,IAAV,CACTH,KADS,EAET,IAAIZ,KAAK,CAACgB,iBAAV,CAA4B;AACxBC,MAAAA,KAAK,EAAE,OADiB;AAExBC,MAAAA,WAAW,EAAE;AAFW,KAA5B,CAFS,CAAb;AAQAX,IAAAA,KAAK,CAACc,GAAN,CAAUP,KAAV;AACAP,IAAAA,KAAK,CAACc,GAAN,CAAUF,MAAV;AACAZ,IAAAA,KAAK,CAACc,GAAN,CAAUD,MAAV;AAEAhB,IAAAA,KAAK,CAACiB,GAAN,CAAUd,KAAV;AACAA,IAAAA,KAAK,CAACe,UAAN,GAAmB,IAAnB;AACAf,IAAAA,KAAK,CAACgB,aAAN,GAAsB,IAAtB;AACAhB,IAAAA,KAAK,CAACiB,QAAN,CAAeC,CAAf,GAAmBtB,GAAG,CAACsB,CAAvB;AACAlB,IAAAA,KAAK,CAACiB,QAAN,CAAeE,CAAf,GAAmBvB,GAAG,CAACuB,CAAvB;AACAnB,IAAAA,KAAK,CAACiB,QAAN,CAAeG,CAAf,GAAmBxB,GAAG,CAACwB,CAAvB;AAEA,SAAKC,KAAL,GAAarB,KAAb;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKF,GAAL,GAAWA,GAAX;AACH;;AAED0B,EAAAA,MAAM,GAAG;AACL,QAAIC,IAAI,GAAG,KAAKF,KAAhB;AACAE,IAAAA,IAAI,CAACN,QAAL,CAAcC,CAAd,IAAoB,KAAKpB,KAAzB;;AACA,QAAGyB,IAAI,CAACN,QAAL,CAAcC,CAAd,GAAkB,GAArB,EAAyB;AACtBK,MAAAA,IAAI,CAACN,QAAL,CAAcC,CAAd,GAAkB,KAAKtB,GAAL,CAASsB,CAA3B;AACF;AACJ;;AA/DuB","sourcesContent":["import * as THREE from 'three';\nexport class GenerateClouds {\n    constructor(pos, scene, speed) {\n\n        scale = 1\n\n        const group = new THREE.Group();\n\n        const tuft1 = new THREE.SphereBufferGeometry(1.5*scale,7*scale,11)\n        tuft1.translate(-2*scale, 0, 0)\n\n\n        const tuft3 = new THREE.SphereBufferGeometry(1.5*scale,7*scale,11)\n        tuft3.translate(2*scale, 0, 0)\n\n        const tuft2 = new THREE.SphereBufferGeometry(2.0*scale,7*scale,11)\n        tuft2.translate(0, 0, 0)\n\n\n\n        let cloud = new THREE.Mesh(\n            tuft1,\n            new THREE.MeshPhongMaterial({\n                color: 'white',\n                flatShading: true,\n            })\n        )\n        let cloud1 = new THREE.Mesh(\n            tuft2,\n            new THREE.MeshPhongMaterial({\n                color: 'white',\n                flatShading: true,\n            })\n        )\n        let cloud2 = new THREE.Mesh(\n            tuft3,\n            new THREE.MeshPhongMaterial({\n                color: 'white',\n                flatShading: true,\n            })\n        )\n\n        group.add(cloud)\n        group.add(cloud1)\n        group.add(cloud2)\n\n        scene.add(group)\n        group.castShadow = true\n        group.receiveShadow = true\n        group.position.x = pos.x\n        group.position.y = pos.y\n        group.position.z = pos.z\n\n        this.grass = group\n        this.speed = speed   \n        this.pos = pos\n    }\n\n    update() {\n        let geos = this.grass\n        geos.position.x +=  this.speed\n        if(geos.position.x > 400){\n           geos.position.x = this.pos.x\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}