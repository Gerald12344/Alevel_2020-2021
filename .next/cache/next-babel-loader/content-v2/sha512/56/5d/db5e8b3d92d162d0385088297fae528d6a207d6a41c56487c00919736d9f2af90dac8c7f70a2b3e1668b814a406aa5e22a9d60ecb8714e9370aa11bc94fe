{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector3 } from \"three\";\nimport { Perlin, FBM } from 'THREE_Noise';\n\nvar SimplexNoise = require(\"simplex-noise\");\n\nvar currentTerrain;\nexport function ReturnTerrainPointer() {\n  return currentTerrain;\n}\n/*eslint complexity: [\"error\", 20]*/\n\n_c = ReturnTerrainPointer;\nexport function generateTerrain(seed, SceneToGet) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  var simplex = new SimplexNoise(seed);\n  var geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  var colours = [];\n  var positionAttribute = geometry.getAttribute(\"position\"); //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    var vertex = new Vector3();\n    vertex.fromBufferAttribute(positionAttribute, i); // Check Height from Perlin Noise Generator\n\n    var height = simplex.noise2D(vertex.x / 128, vertex.y / 128) * 30; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n  } //------------[Create Material]------------\\\\\n\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Create Mesh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true;\n  plane2.position.y = -3;\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3)); //geometry.computeVertexNormals();\n  //------------[Add to Base Scene]------------\\\\\n\n  currentTerrain = plane2;\n  plane2.name = \"MAIN_TERRAIN\";\n  SceneToGet.add(plane2);\n}\nexport function generateTerrainChunk(seed, Position, gain) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  var simplex = new SimplexNoise(seed);\n  var geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  var colours = [];\n  console.log(Position);\n  var positionAttribute = geometry.getAttribute(\"position\"); //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    var vertex = new Vector3();\n    vertex.fromBufferAttribute(positionAttribute, i); // Check Height from Perlin Noise Generator\n\n    var height = simplex.noise2D((vertex.x + Position.x) / 128, (vertex.y + Position.y) / 128) * gain; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n  } //------------[Create Material]------------\\\\\n\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Create Mesh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true;\n  plane2.position.set(Position.x, -3, Position.y);\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3)); //------------[Add to Base Scene]------------\\\\\n\n  currentTerrain = plane2;\n  plane2.name = \"Terrain_Chunk_\".concat(Position.x, \":\").concat(Position.y);\n  return plane2;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ReturnTerrainPointer\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/ProceduleTerrain.js"],"names":["BufferAttribute","Mesh","MeshPhongMaterial","PlaneBufferGeometry","Vector3","Perlin","FBM","SimplexNoise","require","currentTerrain","ReturnTerrainPointer","generateTerrain","seed","SceneToGet","simplex","geometry","colours","positionAttribute","getAttribute","i","l","attributes","position","count","vertex","fromBufferAttribute","height","noise2D","x","y","array","push","material","vertexColors","reflectivity","roughness","flatShading","plane2","receiveShadow","castShadow","rotateX","Math","PI","setAttribute","Float32Array","name","add","generateTerrainChunk","Position","gain","console","log","set"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport {\n    BufferAttribute,\n    Mesh,\n    MeshPhongMaterial,\n    PlaneBufferGeometry,\n    Vector3,\n} from \"three\";\nimport { Perlin, FBM } from 'THREE_Noise';\nvar SimplexNoise = require(\"simplex-noise\");\n\nlet currentTerrain;\n\nexport function ReturnTerrainPointer() {\n    return currentTerrain;\n}\n\n/*eslint complexity: [\"error\", 20]*/\nexport function generateTerrain(seed, SceneToGet) {\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed);\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    const positionAttribute = geometry.getAttribute(\"position\");\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        const vertex = new Vector3();\n        vertex.fromBufferAttribute( positionAttribute, i );\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(vertex.x/128, vertex.y/128) * 30;\n        // Set the height accordingly\n        geometry.attributes.position.array[i * 3 + 2] = height;\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1);\n        } else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48);\n        } else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87);\n        } else {\n            colours.push(0.56, 0.68, 0.166);\n        }\n\n    }\n\n    //------------[Create Material]------------\\\\\n    var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Create Mesh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.y = -3;\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n    //geometry.computeVertexNormals();\n\n    //------------[Add to Base Scene]------------\\\\\n    currentTerrain = plane2;\n    plane2.name = \"MAIN_TERRAIN\";\n    SceneToGet.add(plane2);\n}\n\nexport function generateTerrainChunk(seed, Position, gain) {\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed);\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    console.log(Position);\n\n    const positionAttribute = geometry.getAttribute(\"position\");\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        const vertex = new Vector3();\n        vertex.fromBufferAttribute( positionAttribute, i );\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(((vertex.x+Position.x)/128), ((vertex.y+Position.y))/128) * gain;\n        // Set the height accordingly\n        geometry.attributes.position.array[i * 3 + 2] = height;\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1);\n        } else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48);\n        } else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87);\n        } else {\n            colours.push(0.56, 0.68, 0.166);\n        }\n    }\n\n     //------------[Create Material]------------\\\\\n     var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Create Mesh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.set(Position.x, -3, Position.y);\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n\n\n    //------------[Add to Base Scene]------------\\\\\n    currentTerrain = plane2;\n    plane2.name = `Terrain_Chunk_${Position.x}:${Position.y}`;\n    return plane2;\n}\n"]},"metadata":{},"sourceType":"module"}