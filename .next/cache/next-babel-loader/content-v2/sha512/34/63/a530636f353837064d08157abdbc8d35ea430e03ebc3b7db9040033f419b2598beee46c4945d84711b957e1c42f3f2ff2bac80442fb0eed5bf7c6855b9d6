{"ast":null,"code":"import { ArrowHelper, Group, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { ReturnTerrainPointer } from \"../ProceduleTerrain\";\nexport async function GenerateTrees(num, scene, start, bounds, seed) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  scene.add(tree.scene);\n  console.log(tree.scene.children);\n  tree.scene.children[0].material.color.setHex(0x694b37);\n  tree.scene.children[1].material.color.setHex(0x216734);\n  let group = new Group();\n  let raycaster = new Raycaster();\n\n  for (let i = 0; i < num; i++) {\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    randomVector.y = 50;\n    raycaster.set(randomVector, new Vector3(0, -1, 0));\n    let arrow = new ArrowHelper(new Vector3(0, -1, 0), randomVector, 100, Math.random() * 0xffffff);\n    scene.add(arrow);\n    const intersects = raycaster.intersectObjects([ReturnTerrainPointer()]);\n    console.log(intersects);\n\n    if (intersects[0] !== undefined) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      newTree.position = intersects[0].point;\n      group.add(newTree);\n    }\n  }\n\n  scene.add(group);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","ReturnTerrainPointer","GenerateTrees","num","scene","start","bounds","seed","tree","add","console","log","children","material","color","setHex","group","raycaster","i","randomVector","y","set","arrow","Math","random","intersects","intersectObjects","undefined","newTree","clone","rotateY","position","point"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,OAAxC,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,UAAT,QAA2B,0CAA3B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AAEA,OAAO,eAAeC,aAAf,CAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,MAAhD,EAAwDC,IAAxD,EAA6D;AAChE,MAAIC,IAAI,GAAG,MAAMR,UAAU,CACvB,sBADuB,EAEvBI,KAFuB,CAA3B;AAIAA,EAAAA,KAAK,CAACK,GAAN,CAAUD,IAAI,CAACJ,KAAf;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACJ,KAAL,CAAWQ,QAAvB;AACAJ,EAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,CAAgCC,KAAhC,CAAsCC,MAAtC,CAA8C,QAA9C;AACAP,EAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,CAAgCC,KAAhC,CAAsCC,MAAtC,CAA8C,QAA9C;AAEA,MAAIC,KAAK,GAAG,IAAIrB,KAAJ,EAAZ;AACA,MAAIsB,SAAS,GAAG,IAAIrB,SAAJ,EAAhB;;AACA,OAAI,IAAIsB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACf,GAAd,EAAkBe,CAAC,EAAnB,EAAsB;AAClB,QAAIC,YAAY,GAAGpB,2BAA2B,CAAEM,KAAF,EAASC,MAAT,CAA9C;AACAa,IAAAA,YAAY,CAACC,CAAb,GAAiB,EAAjB;AAEAH,IAAAA,SAAS,CAACI,GAAV,CAAcF,YAAd,EAA4B,IAAItB,OAAJ,CAAY,CAAZ,EAAc,CAAC,CAAf,EAAiB,CAAjB,CAA5B;AAEA,QAAIyB,KAAK,GAAG,IAAI5B,WAAJ,CAAiB,IAAIG,OAAJ,CAAY,CAAZ,EAAc,CAAC,CAAf,EAAiB,CAAjB,CAAjB,EAAuCsB,YAAvC,EAAqD,GAArD,EAA0DI,IAAI,CAACC,MAAL,KAAgB,QAA1E,CAAZ;AACApB,IAAAA,KAAK,CAACK,GAAN,CAAWa,KAAX;AAEA,UAAMG,UAAU,GAAGR,SAAS,CAACS,gBAAV,CAA4B,CAACzB,oBAAoB,EAArB,CAA5B,CAAnB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYc,UAAZ;;AAEA,QAAGA,UAAU,CAAC,CAAD,CAAV,KAAkBE,SAArB,EAA+B;AAC3B,UAAIC,OAAO,GAAGpB,IAAI,CAACJ,KAAL,CAAWyB,KAAX,EAAd;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgBhC,QAAQ,CAACyB,IAAI,CAACC,MAAL,KAAc,GAAf,CAAxB;AACAI,MAAAA,OAAO,CAACG,QAAR,GAAmBN,UAAU,CAAC,CAAD,CAAV,CAAcO,KAAjC;AACAhB,MAAAA,KAAK,CAACP,GAAN,CAAUmB,OAAV;AACH;AACJ;;AACDxB,EAAAA,KAAK,CAACK,GAAN,CAAUO,KAAV;AACH","sourcesContent":["import { ArrowHelper, Group, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { ReturnTerrainPointer } from \"../ProceduleTerrain\";\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    scene.add(tree.scene)\n    console.log(tree.scene.children)\n    tree.scene.children[0].material.color.setHex( 0x694b37 );\n    tree.scene.children[1].material.color.setHex( 0x216734 );\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        raycaster.set(randomVector, new Vector3(0,-1,0))\n\n        let arrow = new ArrowHelper( new Vector3(0,-1,0) , randomVector, 100, Math.random() * 0xffffff );\n        scene.add( arrow );\n\n        const intersects = raycaster.intersectObjects( [ReturnTerrainPointer()] );\n        console.log(intersects)\n\n        if(intersects[0] !== undefined){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            newTree.position = intersects[0].point\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}