{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/cube.js\";\n// Written By Harvey Randall \\\\\nimport { useEffect, useState } from \"react\";\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer } from \"three\";\nexport default function render() {\n  const {\n    0: child,\n    1: setChild\n  } = useState(undefined);\n  useEffect(() => {\n    if (child === undefined) return;\n    let SceneToGet = new Scene();\n    let Renders = new WebGLRenderer();\n    Renders.shadowMap.enabled = true;\n    Renders.shadowMap.type = THREE.PCFSoftShadowMap;\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    var geometry = new BoxGeometry(1, 1, 1);\n    var material = new MeshStandardMaterial({\n      color: 0xfffff\n    });\n    var cube = new Mesh(geometry, material);\n    cube.castShadow = true;\n    cube.receiveShadow = true;\n    SceneToGet.add(cube);\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      Renders.render(SceneToGet, Camera);\n    };\n\n    animate();\n  }, [child]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref => setChild(ref)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/cube.js"],"names":["useEffect","useState","BoxGeometry","Clock","DoubleSide","Material","Mesh","MeshBasicMaterial","MeshStandardMaterial","PerspectiveCamera","PointLight","Scene","Vector3","WebGLRenderer","render","child","setChild","undefined","SceneToGet","Renders","shadowMap","enabled","type","THREE","PCFSoftShadowMap","setSize","window","innerWidth","innerHeight","appendChild","domElement","geometry","material","color","cube","castShadow","receiveShadow","add","Camera","animate","requestAnimationFrame","rotation","x","y","ref"],"mappings":";;;AAAA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCC,QAAzC,EAAmDC,IAAnD,EAAyDC,iBAAzD,EAA4EC,oBAA5E,EAAkGC,iBAAlG,EAAqHC,UAArH,EAAiIC,KAAjI,EAAwIC,OAAxI,EAAiJC,aAAjJ,QAAsK,OAAtK;AAGA,eAAe,SAASC,MAAT,GAAkB;AAC7B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAACgB,SAAD,CAAlC;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,KAAK,KAAKE,SAAd,EAAyB;AAEzB,QAAIC,UAAU,GAAG,IAAIP,KAAJ,EAAjB;AACA,QAAIQ,OAAO,GAAG,IAAIN,aAAJ,EAAd;AAEAM,IAAAA,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4B,IAA5B;AACAF,IAAAA,OAAO,CAACC,SAAR,CAAkBE,IAAlB,GAAyBC,KAAK,CAACC,gBAA/B;AAGAL,IAAAA,OAAO,CAACM,OAAR,CAAgBC,MAAM,CAACC,UAAvB,EAAmCD,MAAM,CAACE,WAA1C;AACAb,IAAAA,KAAK,CAACc,WAAN,CAAkBV,OAAO,CAACW,UAA1B;AAEA,QAAIC,QAAQ,GAAG,IAAI7B,WAAJ,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAf;AACA,QAAI8B,QAAQ,GAAG,IAAIxB,oBAAJ,CAAyB;AAAEyB,MAAAA,KAAK,EAAE;AAAT,KAAzB,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI5B,IAAJ,CAASyB,QAAT,EAAmBC,QAAnB,CAAX;AACAE,IAAAA,IAAI,CAACC,UAAL,GAAkB,IAAlB;AACAD,IAAAA,IAAI,CAACE,aAAL,GAAqB,IAArB;AACAlB,IAAAA,UAAU,CAACmB,GAAX,CAAeH,IAAf;AAEA,QAAII,MAAM,GAAG,IAAI7B,iBAAJ,CAAsB,EAAtB,EAA0BiB,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAArD,EAAkE,GAAlE,EAAuE,IAAvE,CAAb;;AAEA,QAAIW,OAAO,GAAG,YAAY;AACtBC,MAAAA,qBAAqB,CAACD,OAAD,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAxB,MAAAA,OAAO,CAACL,MAAR,CAAeI,UAAf,EAA2BoB,MAA3B;AACH,KALD;;AAMAC,IAAAA,OAAO;AACV,GA7BQ,EA6BN,CAACxB,KAAD,CA7BM,CAAT;AA+BA,sBACI;AAAA,2BACI;AAAK,MAAA,GAAG,EAAE6B,GAAG,IAAK5B,QAAQ,CAAC4B,GAAD;AAA1B;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { useEffect, useState } from \"react\"\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer } from \"three\"\n\n\nexport default function render() {\n    const [child, setChild] = useState(undefined)\n\n    useEffect(() => {\n        if (child === undefined) return;\n\n        let SceneToGet = new Scene()\n        let Renders = new WebGLRenderer()\n\n        Renders.shadowMap.enabled = true;\n        Renders.shadowMap.type = THREE.PCFSoftShadowMap;\n\n\n        Renders.setSize(window.innerWidth, window.innerHeight)\n        child.appendChild(Renders.domElement);\n\n        var geometry = new BoxGeometry(1, 1, 1);\n        var material = new MeshStandardMaterial({ color: 0xfffff });\n        var cube = new Mesh(geometry, material);\n        cube.castShadow = true\n        cube.receiveShadow = true\n        SceneToGet.add(cube);\n\n        var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n\n        var animate = function () {\n            requestAnimationFrame(animate);\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n            Renders.render(SceneToGet, Camera);\n        };\n        animate();\n    }, [child])\n\n    return (\n        <>\n            <div ref={ref => (setChild(ref))} />\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}