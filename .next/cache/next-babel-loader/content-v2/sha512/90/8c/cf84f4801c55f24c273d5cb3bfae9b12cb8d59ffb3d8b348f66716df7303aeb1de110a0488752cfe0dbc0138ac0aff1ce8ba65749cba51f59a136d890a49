{"ast":null,"code":"const top = 0;\n\nconst parent = i => {\n  (i + 1 >>> 1) - 1;\n};\n\nconst left = i => {\n  (i << 1) + 1;\n};\n\nconst right = i => {\n  i + 1 << 1;\n};\n\nexport class PriorityQueue {\n  constructor(comparator = (a, b) => {\n    a > b;\n  }) {\n    this._heap = [];\n    this._comparator = comparator;\n  }\n\n  size() {\n    return this._heap.length;\n  }\n\n  isEmpty() {\n    return this.size() == 0;\n  }\n\n  peek() {\n    return this._heap[top];\n  }\n\n  push(...values) {\n    values.forEach(value => {\n      this._heap.push(value);\n\n      this._siftUp();\n    });\n    return this.size();\n  }\n\n  pop() {\n    const poppedValue = this.peek();\n    const bottom = this.size() - 1;\n\n    if (bottom > top) {\n      this._swap(top, bottom);\n    }\n\n    this._heap.pop();\n\n    this._siftDown();\n\n    return poppedValue;\n  }\n\n  replace(value) {\n    const replacedValue = this.peek();\n    this._heap[parseInt(top, 10)] = value;\n\n    this._siftDown();\n\n    return replacedValue;\n  }\n\n  _greater(i, j) {\n    return this._comparator(this._heap[parseInt(i, 10)], this._heap[parseInt(j, 10)]);\n  }\n\n  _swap(i, j) {\n    [this._heap[parseInt(i, 10)], this._heap[parseInt(j, 10)]] = [this._heap[parseInt(j, 10)], this._heap[parseInt(i, 10)]];\n  }\n\n  _siftUp() {\n    let node = this.size() - 1;\n\n    while (node > top && this._greater(node, parent(node))) {\n      this._swap(node, parent(node));\n\n      node = parent(node);\n    }\n  }\n  /*eslint complexity: [\"error\", 20]*/\n\n\n  _siftDown() {\n    let node = top;\n\n    while (left(node) < this.size() && this._greater(left(node), node) || right(node) < this.size() && this._greater(right(node), node)) {\n      let maxChild = right(node) < this.size() && this._greater(right(node), left(node)) ? right(node) : left(node);\n\n      this._swap(node, maxChild);\n\n      node = maxChild;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Algorithms/PriorityQueue.js"],"names":["top","parent","i","left","right","PriorityQueue","constructor","comparator","a","b","_heap","_comparator","size","length","isEmpty","peek","push","values","forEach","value","_siftUp","pop","poppedValue","bottom","_swap","_siftDown","replace","replacedValue","parseInt","_greater","j","node","maxChild"],"mappings":"AAAA,MAAMA,GAAG,GAAG,CAAZ;;AACA,MAAMC,MAAM,GAAIC,CAAD,IAAO;AAClB,GAAEA,CAAC,GAAG,CAAL,KAAY,CAAb,IAAkB,CAAlB;AACH,CAFD;;AAGA,MAAMC,IAAI,GAAID,CAAD,IAAO;AAChB,GAACA,CAAC,IAAI,CAAN,IAAW,CAAX;AACH,CAFD;;AAGA,MAAME,KAAK,GAAIF,CAAD,IAAO;AAChBA,EAAAA,CAAC,GAAG,CAAL,IAAW,CAAX;AACH,CAFD;;AAIA,OAAO,MAAMG,aAAN,CAAoB;AACvBC,EAAAA,WAAW,CACPC,UAAU,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnBD,IAAAA,CAAC,GAAGC,CAAJ;AACH,GAHM,EAIT;AACE,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,WAAL,GAAmBJ,UAAnB;AACH;;AACDK,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKF,KAAL,CAAWG,MAAlB;AACH;;AACDC,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKF,IAAL,MAAe,CAAtB;AACH;;AACDG,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKL,KAAL,CAAWV,GAAX,CAAP;AACH;;AACDgB,EAAAA,IAAI,CAAC,GAAGC,MAAJ,EAAY;AACZA,IAAAA,MAAM,CAACC,OAAP,CAAgBC,KAAD,IAAW;AACtB,WAAKT,KAAL,CAAWM,IAAX,CAAgBG,KAAhB;;AACA,WAAKC,OAAL;AACH,KAHD;AAIA,WAAO,KAAKR,IAAL,EAAP;AACH;;AACDS,EAAAA,GAAG,GAAG;AACF,UAAMC,WAAW,GAAG,KAAKP,IAAL,EAApB;AACA,UAAMQ,MAAM,GAAG,KAAKX,IAAL,KAAc,CAA7B;;AACA,QAAIW,MAAM,GAAGvB,GAAb,EAAkB;AACd,WAAKwB,KAAL,CAAWxB,GAAX,EAAgBuB,MAAhB;AACH;;AACD,SAAKb,KAAL,CAAWW,GAAX;;AACA,SAAKI,SAAL;;AACA,WAAOH,WAAP;AACH;;AACDI,EAAAA,OAAO,CAACP,KAAD,EAAQ;AACX,UAAMQ,aAAa,GAAG,KAAKZ,IAAL,EAAtB;AACA,SAAKL,KAAL,CAAWkB,QAAQ,CAAC5B,GAAD,EAAK,EAAL,CAAnB,IAA+BmB,KAA/B;;AACA,SAAKM,SAAL;;AACA,WAAOE,aAAP;AACH;;AACDE,EAAAA,QAAQ,CAAC3B,CAAD,EAAI4B,CAAJ,EAAO;AACX,WAAO,KAAKnB,WAAL,CAAiB,KAAKD,KAAL,CAAWkB,QAAQ,CAAC1B,CAAD,EAAG,EAAH,CAAnB,CAAjB,EAA6C,KAAKQ,KAAL,CAAWkB,QAAQ,CAACE,CAAD,EAAG,EAAH,CAAnB,CAA7C,CAAP;AACH;;AACDN,EAAAA,KAAK,CAACtB,CAAD,EAAI4B,CAAJ,EAAO;AACR,KAAC,KAAKpB,KAAL,CAAWkB,QAAQ,CAAC1B,CAAD,EAAG,EAAH,CAAnB,CAAD,EAA6B,KAAKQ,KAAL,CAAWkB,QAAQ,CAACE,CAAD,EAAG,EAAH,CAAnB,CAA7B,IAA2D,CAAC,KAAKpB,KAAL,CAAWkB,QAAQ,CAACE,CAAD,EAAG,EAAH,CAAnB,CAAD,EAA6B,KAAKpB,KAAL,CAAWkB,QAAQ,CAAC1B,CAAD,EAAG,EAAH,CAAnB,CAA7B,CAA3D;AACH;;AACDkB,EAAAA,OAAO,GAAG;AACN,QAAIW,IAAI,GAAG,KAAKnB,IAAL,KAAc,CAAzB;;AACA,WAAOmB,IAAI,GAAG/B,GAAP,IAAc,KAAK6B,QAAL,CAAcE,IAAd,EAAoB9B,MAAM,CAAC8B,IAAD,CAA1B,CAArB,EAAwD;AACpD,WAAKP,KAAL,CAAWO,IAAX,EAAiB9B,MAAM,CAAC8B,IAAD,CAAvB;;AACAA,MAAAA,IAAI,GAAG9B,MAAM,CAAC8B,IAAD,CAAb;AACH;AACJ;AACD;;;AACAN,EAAAA,SAAS,GAAG;AACR,QAAIM,IAAI,GAAG/B,GAAX;;AACA,WACKG,IAAI,CAAC4B,IAAD,CAAJ,GAAa,KAAKnB,IAAL,EAAb,IAA4B,KAAKiB,QAAL,CAAc1B,IAAI,CAAC4B,IAAD,CAAlB,EAA0BA,IAA1B,CAA7B,IACC3B,KAAK,CAAC2B,IAAD,CAAL,GAAc,KAAKnB,IAAL,EAAd,IAA6B,KAAKiB,QAAL,CAAczB,KAAK,CAAC2B,IAAD,CAAnB,EAA2BA,IAA3B,CAFlC,EAGE;AACE,UAAIC,QAAQ,GACR5B,KAAK,CAAC2B,IAAD,CAAL,GAAc,KAAKnB,IAAL,EAAd,IACA,KAAKiB,QAAL,CAAczB,KAAK,CAAC2B,IAAD,CAAnB,EAA2B5B,IAAI,CAAC4B,IAAD,CAA/B,CADA,GAEM3B,KAAK,CAAC2B,IAAD,CAFX,GAGM5B,IAAI,CAAC4B,IAAD,CAJd;;AAKA,WAAKP,KAAL,CAAWO,IAAX,EAAiBC,QAAjB;;AACAD,MAAAA,IAAI,GAAGC,QAAP;AACH;AACJ;;AArEsB","sourcesContent":["const top = 0;\nconst parent = (i) => {\n    ((i + 1) >>> 1) - 1;\n};\nconst left = (i) => {\n    (i << 1) + 1;\n};\nconst right = (i) => {\n    (i + 1) << 1;\n};\n\nexport class PriorityQueue {\n    constructor(\n        comparator = (a, b) => {\n            a > b;\n        }\n    ) {\n        this._heap = [];\n        this._comparator = comparator;\n    }\n    size() {\n        return this._heap.length;\n    }\n    isEmpty() {\n        return this.size() == 0;\n    }\n    peek() {\n        return this._heap[top];\n    }\n    push(...values) {\n        values.forEach((value) => {\n            this._heap.push(value);\n            this._siftUp();\n        });\n        return this.size();\n    }\n    pop() {\n        const poppedValue = this.peek();\n        const bottom = this.size() - 1;\n        if (bottom > top) {\n            this._swap(top, bottom);\n        }\n        this._heap.pop();\n        this._siftDown();\n        return poppedValue;\n    }\n    replace(value) {\n        const replacedValue = this.peek();\n        this._heap[parseInt(top,10)] = value;\n        this._siftDown();\n        return replacedValue;\n    }\n    _greater(i, j) {\n        return this._comparator(this._heap[parseInt(i,10)], this._heap[parseInt(j,10)]);\n    }\n    _swap(i, j) {\n        [this._heap[parseInt(i,10)], this._heap[parseInt(j,10)]] = [this._heap[parseInt(j,10)], this._heap[parseInt(i,10)]];\n    }\n    _siftUp() {\n        let node = this.size() - 1;\n        while (node > top && this._greater(node, parent(node))) {\n            this._swap(node, parent(node));\n            node = parent(node);\n        }\n    }\n    /*eslint complexity: [\"error\", 20]*/\n    _siftDown() {\n        let node = top;\n        while (\n            (left(node) < this.size() && this._greater(left(node), node)) ||\n            (right(node) < this.size() && this._greater(right(node), node))\n        ) {\n            let maxChild =\n                right(node) < this.size() &&\n                this._greater(right(node), left(node))\n                    ? right(node)\n                    : left(node);\n            this._swap(node, maxChild);\n            node = maxChild;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}