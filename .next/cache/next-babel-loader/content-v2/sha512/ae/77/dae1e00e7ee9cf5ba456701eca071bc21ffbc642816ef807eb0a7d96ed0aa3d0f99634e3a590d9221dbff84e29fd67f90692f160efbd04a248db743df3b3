{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GLTFLoader } from \"./glbCore\";\nexport function addGLBFile(_x, _x2) {\n  return _addGLBFile.apply(this, arguments);\n}\n\nfunction _addGLBFile() {\n  _addGLBFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item, scene) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", promise = new Promise(function (resolve, reject) {\n              var loader = new GLTFLoader();\n              loader.load( // resource URL\n              item, // called when the resource is loaded\n              function (gltf) {\n                scene.add(gltf.scene);\n                gltf.animations;\n                gltf.scene;\n                gltf.scenes;\n                gltf.cameras;\n                gltf.asset;\n                resolve(gltf);\n              }, // called while loading is progressing\n              function (xhr) {\n                console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n              }, // called when loading has errors\n              function (error) {\n                console.log(\"An error happened\");\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _addGLBFile.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/3dModelHandlers/GLBLoader.js"],"names":["GLTFLoader","addGLBFile","item","scene","promise","Promise","resolve","reject","loader","load","gltf","add","animations","scenes","cameras","asset","xhr","console","log","loaded","total","error"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,WAA3B;AAEA,gBAAsBC,UAAtB;AAAA;AAAA;;;yEAAO,iBAA0BC,IAA1B,EAAgCC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,6CACKC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/C,kBAAMC,MAAM,GAAG,IAAIR,UAAJ,EAAf;AACAQ,cAAAA,MAAM,CAACC,IAAP,EACI;AACAP,cAAAA,IAFJ,EAGI;AACA,wBAAUQ,IAAV,EAAgB;AACZP,gBAAAA,KAAK,CAACQ,GAAN,CAAUD,IAAI,CAACP,KAAf;AAEAO,gBAAAA,IAAI,CAACE,UAAL;AACAF,gBAAAA,IAAI,CAACP,KAAL;AACAO,gBAAAA,IAAI,CAACG,MAAL;AACAH,gBAAAA,IAAI,CAACI,OAAL;AACAJ,gBAAAA,IAAI,CAACK,KAAL;AACAT,gBAAAA,OAAO,CAACI,IAAD,CAAP;AACH,eAbL,EAcI;AACA,wBAAUM,GAAV,EAAe;AACXC,gBAAAA,OAAO,CAACC,GAAR,CAAaF,GAAG,CAACG,MAAJ,GAAaH,GAAG,CAACI,KAAlB,GAA2B,GAA3B,GAAiC,UAA7C;AACH,eAjBL,EAkBI;AACA,wBAAUC,KAAV,EAAiB;AACbJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,eArBL;AAuBH,aAzBiB,CADf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { GLTFLoader } from \"./glbCore\";\n\nexport async function addGLBFile(item, scene) {\n    return (promise = new Promise((resolve, reject) => {\n        const loader = new GLTFLoader();\n        loader.load(\n            // resource URL\n            item,\n            // called when the resource is loaded\n            function (gltf) {\n                scene.add(gltf.scene);\n\n                gltf.animations;\n                gltf.scene;\n                gltf.scenes;\n                gltf.cameras;\n                gltf.asset;\n                resolve(gltf)\n            },\n            // called while loading is progressing\n            function (xhr) {\n                console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n            },\n            // called when loading has errors\n            function (error) {\n                console.log(\"An error happened\");\n            }\n        );\n    }));\n}\n"]},"metadata":{},"sourceType":"module"}