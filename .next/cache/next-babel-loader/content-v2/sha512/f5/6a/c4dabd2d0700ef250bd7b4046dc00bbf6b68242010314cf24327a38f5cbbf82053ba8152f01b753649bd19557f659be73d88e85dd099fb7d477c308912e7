{"ast":null,"code":"// Written By Harvey Randall \\\\\n// This file aims to make communicatiom between client and server a lot easier, using promise\n//-------------[   Imports   ]-------------\\\\\nimport { PriorityQueue } from \"../Algorithms/PriorityQueue\";\nimport * as Joi from \"joi\"; //-------------[Core Variables]-------------\\\\\n\nlet client;\nlet Queue = new PriorityQueue((a, b) => a.prority > b.prority);\n/**\n *  @param {string} socket - The socket io Client\n */\n\nexport function startSeverClientCommunication(socket) {\n  client = socket; //Data Handshake\n\n  socket.emit(\"ConnectionEstablised\", Date.now());\n}\n/**\n *  @param {string} event - The Event name\n *  @param {array} data   - The data to send to the server\n */\n\nexport function sendDataWithPromise(event, data) {\n  //-------------[   Create a basic promise to return data   ]-------------\\\\\n  const DataPromise = new Promise((resolve, reject) => {\n    let resolved = false;\n\n    try {\n      client.emit(event, ...data);\n      client.on(event + \"_Callback\", () => {\n        resolved = true;\n        resolve(...arguments);\n      });\n    } catch (err) {\n      resolved = true;\n      reject(err);\n    }\n\n    setTimeout(() => {\n      if (resolved === false) {\n        resolved = true;\n        reject(\"No data returned within 2 seconds, is there a data callback?\");\n      }\n    }, 2000);\n  });\n  return DataPromise;\n}\n/**\n *  @param {string} event        - The Event name\n *  @param {function} callback   - The function that will be called with the data back\n */\n\nexport function listenToEvent(event, callback) {\n  // Attach event handle to functions\n  client.on(event, callback);\n}\n/**\n *  @param {function} callback   - The function that will listen to all events sent to the client\n */\n\nexport function attachToMainEventStream(callback) {\n  client.onAny((eventName, ...args) => {\n    callback(eventName, args);\n  });\n}\n/**\n *  @param {string} event        - The name of the event to listen to\n *  @param {scema} scema         - The data scheme to folow\n *  @param {function} callback   - The function that will be called with the data\n */\n\nexport async function listenForEventWithSchemaValidation(event, scema, callback) {\n  listenToEvent(event, args => {\n    const {\n      error,\n      value\n    } = scema.validate(args);\n\n    if (error) {\n      throw new Error(\"Scehma Check Failed\");\n    } else {\n      callback(value);\n      return value;\n    }\n  });\n}\nexport function addDataToQueue(event, data, callback, prority = 1) {\n  Queue.push({\n    prority,\n    input: [event, data, callback]\n  });\n} //-------------[   All Non essesntial communication   ]-------------\\\\\n\nsetInterval(async () => {\n  if (!Queue.isEmpty()) {\n    let func = Queue.pop();\n    let input = func.input;\n    let callBack = input[2];\n\n    try {\n      //Destructure and send data\n      let data = await sendDataWithPromise(input[0], ...input[1]);\n      callBack(false, data);\n    } catch {\n      callBack(true, []);\n    }\n  }\n}, 500);","map":null,"metadata":{},"sourceType":"module"}