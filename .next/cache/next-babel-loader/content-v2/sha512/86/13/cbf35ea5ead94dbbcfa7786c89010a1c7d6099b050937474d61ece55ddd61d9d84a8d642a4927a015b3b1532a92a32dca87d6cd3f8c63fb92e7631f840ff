{"ast":null,"code":"import { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from '../../Core-API/3dModelHandlers/utils';\nexport async function GenerateTrees(num, scene, start, bounds, terrain) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  let snowyTree = await addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n  let palmTree = await addGLBFile(\"/Assets/Palm_Tree.glb\", scene);\n  let leaves = new MeshLambertMaterial({\n    color: 0x694b37\n  });\n  let trunk = new MeshLambertMaterial({\n    color: 0x216734\n  });\n  tree.scene.children[0].material = leaves;\n  tree.scene.children[1].material = trunk;\n  snowyTree.scene.children[0].material = leaves;\n  snowyTree.scene.children[1].material = trunk;\n  snowyTree.scene.children[2].material = new MeshLambertMaterial({\n    color: 0xffffff\n  });\n  palmTree.scene.children[0].material = trunk;\n  let group = new Group();\n  let raycaster = new Raycaster();\n  let trees = [];\n\n  for (let i = 0; i < num; i++) {\n    var _intersects$, _intersects$2, _intersects$3, _intersects$4, _intersects$5;\n\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    randomVector.y = 50;\n    raycaster.set(randomVector, new Vector3(0, -1, 0));\n    const intersects = raycaster.intersectObjects([terrain]);\n\n    if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > 2 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) < 2 && ((_intersects$4 = intersects[0]) === null || _intersects$4 === void 0 ? void 0 : _intersects$4.point.y) > 0) {\n      let newTree = palmTree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y - 1, point.z);\n      group.add(newTree);\n    } else if (intersects[0] !== undefined && ((_intersects$5 = intersects[0]) === null || _intersects$5 === void 0 ? void 0 : _intersects$5.point.y) > 20) {\n      let newTree = snowyTree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    }\n  }\n\n  scene.add(group);\n}","map":null,"metadata":{},"sourceType":"module"}