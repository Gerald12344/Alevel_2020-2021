{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from '../../Core-API/3dModelHandlers/utils';\nexport function GenerateTrees(_x, _x2, _x3, _x4, _x5) {\n  return _GenerateTrees.apply(this, arguments);\n}\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene, start, bounds, terrain) {\n    var tree, snowyTree, leaves, trunk, group, raycaster, trees, i, _intersects$, _intersects$2, _intersects$3, randomVector, intersects, newTree, point, _newTree, _point;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            _context.next = 5;\n            return addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n\n          case 5:\n            snowyTree = _context.sent;\n            leaves = new MeshLambertMaterial({\n              color: 0x694b37\n            });\n            trunk = new MeshLambertMaterial({\n              color: 0x216734\n            });\n            tree.scene.children[0].material = leaves;\n            tree.scene.children[1].material = trunk;\n            snowyTree.scene.children[0].material = leaves;\n            snowyTree.scene.children[1].material = trunk;\n            snowyTree.scene.children[2].material = new MeshLambertMaterial({\n              color: 0xffffff\n            });\n            group = new Group();\n            raycaster = new Raycaster();\n            trees = [];\n\n            for (i = 0; i < num; i++) {\n              randomVector = randomVectorBetweenPoints2D(start, bounds);\n              randomVector.y = 50;\n              raycaster.set(randomVector, new Vector3(0, -1, 0));\n              intersects = raycaster.intersectObjects([terrain]);\n\n              if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > -20 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n                newTree = tree.scene.clone();\n                newTree.rotateY(radiants(Math.random() * 360));\n                point = intersects[0].point;\n                newTree.position.set(point.x, point.y, point.z);\n                group.add(newTree);\n              } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) > 20) {\n                _newTree = snowyTree.scene.clone();\n\n                _newTree.rotateY(radiants(Math.random() * 360));\n\n                _point = intersects[0].point;\n\n                _newTree.position.set(_point.x, _point.y, _point.z);\n\n                group.add(_newTree);\n              }\n            }\n\n            scene.add(group);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}