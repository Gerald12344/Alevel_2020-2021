{"ast":null,"code":"import * as THREE from \"three\";\nexport function createTag(baseWidth, size, name) {\n  const borderSize = 2;\n  const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n  const font = `${size}px Verdana`;\n  ctx.font = font; // measure how long the name will be\n\n  const textWidth = ctx.measureText(name).width;\n  const doubleBorderSize = borderSize * 2;\n  const width = baseWidth + doubleBorderSize;\n  const height = size + doubleBorderSize;\n  ctx.canvas.width = width;\n  ctx.canvas.height = height; // need to set font again after resizing canvas\n\n  ctx.font = font;\n  ctx.textBaseline = \"middle\";\n  ctx.textAlign = \"center\"; //ctx.fillStyle = 'blue';\n  //ctx.fillRect(0, 0, width, height);\n  // scale to fit but don't stretch\n\n  const scaleFactor = Math.min(1, baseWidth / textWidth);\n  ctx.translate(width / 2, height / 2);\n  ctx.scale(scaleFactor, 1);\n  ctx.fillStyle = \"white\";\n  ctx.fillText(name, 0, 0);\n  return ctx.canvas;\n}\nexport function generateLabel(name, group) {\n  const canvas = createTag(300, 32, name);\n  const texture = new THREE.CanvasTexture(canvas); // because our canvas is likely not a power of 2\n  // in both dimensions set the filtering appropriately.\n\n  texture.minFilter = THREE.LinearFilter;\n  texture.wrapS = THREE.ClampToEdgeWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  const labelMaterial = new THREE.SpriteMaterial({\n    map: texture,\n    transparent: true\n  }); // if units are meters then 0.01 here makes size\n  // of the label into centimeters.\n\n  const labelBaseScale = 0.01;\n  const label = new THREE.Sprite(labelMaterial);\n  group.add(label);\n  label.position.y = 1;\n  label.scale.x = canvas.width * labelBaseScale;\n  label.scale.y = canvas.height * labelBaseScale;\n  return group;\n}","map":null,"metadata":{},"sourceType":"module"}