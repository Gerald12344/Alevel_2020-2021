{"ast":null,"code":"import _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Written By Harvey Randall \\\\\nimport { Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three';\nexport var GenerateClouds = /*#__PURE__*/function () {\n  function GenerateClouds(pos, scene, speed) {\n    _classCallCheck(this, GenerateClouds);\n\n    var scale = 1;\n    var group = new Group();\n    var tuft1 = new SphereBufferGeometry(1.5 * scale, 7 * scale, 11);\n    tuft1.translate(-2 * scale, 0, 0);\n    var tuft3 = new SphereBufferGeometry(1.5 * scale, 7 * scale, 11);\n    tuft3.translate(2 * scale, 0, 0);\n    var tuft2 = new SphereBufferGeometry(2.0 * scale, 7 * scale, 11);\n    tuft2.translate(0, 0, 0);\n    var mat = new MeshPhongMaterial({\n      color: 'white',\n      flatShading: true\n    });\n    var cloud = new Mesh(tuft1, mat);\n    var cloud1 = new Mesh(tuft2, mat);\n    var cloud2 = new THREE.Mesh(tuft3, mat);\n    group.add(cloud);\n    group.add(cloud1);\n    group.add(cloud2);\n    scene.add(group);\n    group.castShadow = true;\n    group.receiveShadow = true;\n    group.position.x = pos.x;\n    group.position.y = pos.y;\n    group.position.z = pos.z;\n    this.grass = group;\n    this.speed = speed;\n    this.pos = pos;\n  }\n\n  _createClass(GenerateClouds, [{\n    key: \"update\",\n    value: function update() {\n      var geos = this.grass;\n      geos.position.x += this.speed;\n\n      if (geos.position.x > 400) {\n        geos.position.x = this.pos.x;\n      }\n    }\n  }]);\n\n  return GenerateClouds;\n}();","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/clouds.js"],"names":["Group","Mesh","MeshPhongMaterial","SphereBufferGeometry","GenerateClouds","pos","scene","speed","scale","group","tuft1","translate","tuft3","tuft2","mat","color","flatShading","cloud","cloud1","cloud2","THREE","add","castShadow","receiveShadow","position","x","y","z","grass","geos"],"mappings":";;AAAA;AAEA,SAASA,KAAT,EAAgBC,IAAhB,EAAsBC,iBAAtB,EAAyCC,oBAAzC,QAAqE,OAArE;AAEA,WAAaC,cAAb;AACI,0BAAYC,GAAZ,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAAA;;AAE3B,QAAKC,KAAK,GAAG,CAAb;AAEA,QAAMC,KAAK,GAAG,IAAIT,KAAJ,EAAd;AAEA,QAAMU,KAAK,GAAG,IAAIP,oBAAJ,CAAyB,MAAIK,KAA7B,EAAmC,IAAEA,KAArC,EAA2C,EAA3C,CAAd;AACAE,IAAAA,KAAK,CAACC,SAAN,CAAgB,CAAC,CAAD,GAAGH,KAAnB,EAA0B,CAA1B,EAA6B,CAA7B;AAGA,QAAMI,KAAK,GAAG,IAAIT,oBAAJ,CAAyB,MAAIK,KAA7B,EAAmC,IAAEA,KAArC,EAA2C,EAA3C,CAAd;AACAI,IAAAA,KAAK,CAACD,SAAN,CAAgB,IAAEH,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B;AAEA,QAAMK,KAAK,GAAG,IAAIV,oBAAJ,CAAyB,MAAIK,KAA7B,EAAmC,IAAEA,KAArC,EAA2C,EAA3C,CAAd;AACAK,IAAAA,KAAK,CAACF,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;AAGA,QAAMG,GAAG,GAAG,IAAIZ,iBAAJ,CAAsB;AAC9Ba,MAAAA,KAAK,EAAE,OADuB;AAE9BC,MAAAA,WAAW,EAAE;AAFiB,KAAtB,CAAZ;AAKA,QAAIC,KAAK,GAAG,IAAIhB,IAAJ,CACRS,KADQ,EAERI,GAFQ,CAAZ;AAIA,QAAII,MAAM,GAAG,IAAIjB,IAAJ,CACTY,KADS,EAETC,GAFS,CAAb;AAIA,QAAIK,MAAM,GAAG,IAAIC,KAAK,CAACnB,IAAV,CACTW,KADS,EAETE,GAFS,CAAb;AAKAL,IAAAA,KAAK,CAACY,GAAN,CAAUJ,KAAV;AACAR,IAAAA,KAAK,CAACY,GAAN,CAAUH,MAAV;AACAT,IAAAA,KAAK,CAACY,GAAN,CAAUF,MAAV;AAEAb,IAAAA,KAAK,CAACe,GAAN,CAAUZ,KAAV;AACAA,IAAAA,KAAK,CAACa,UAAN,GAAmB,IAAnB;AACAb,IAAAA,KAAK,CAACc,aAAN,GAAsB,IAAtB;AACAd,IAAAA,KAAK,CAACe,QAAN,CAAeC,CAAf,GAAmBpB,GAAG,CAACoB,CAAvB;AACAhB,IAAAA,KAAK,CAACe,QAAN,CAAeE,CAAf,GAAmBrB,GAAG,CAACqB,CAAvB;AACAjB,IAAAA,KAAK,CAACe,QAAN,CAAeG,CAAf,GAAmBtB,GAAG,CAACsB,CAAvB;AAEA,SAAKC,KAAL,GAAanB,KAAb;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKF,GAAL,GAAWA,GAAX;AACH;;AAlDL;AAAA;AAAA,6BAoDa;AACL,UAAIwB,IAAI,GAAG,KAAKD,KAAhB;AACAC,MAAAA,IAAI,CAACL,QAAL,CAAcC,CAAd,IAAoB,KAAKlB,KAAzB;;AACA,UAAGsB,IAAI,CAACL,QAAL,CAAcC,CAAd,GAAkB,GAArB,EAAyB;AACtBI,QAAAA,IAAI,CAACL,QAAL,CAAcC,CAAd,GAAkB,KAAKpB,GAAL,CAASoB,CAA3B;AACF;AACJ;AA1DL;;AAAA;AAAA","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three';\n\nexport class GenerateClouds {\n    constructor(pos, scene, speed) {\n\n        let  scale = 1\n\n        const group = new Group();\n\n        const tuft1 = new SphereBufferGeometry(1.5*scale,7*scale,11)\n        tuft1.translate(-2*scale, 0, 0)\n\n\n        const tuft3 = new SphereBufferGeometry(1.5*scale,7*scale,11)\n        tuft3.translate(2*scale, 0, 0)\n\n        const tuft2 = new SphereBufferGeometry(2.0*scale,7*scale,11)\n        tuft2.translate(0, 0, 0)\n\n\n        const mat = new MeshPhongMaterial({\n            color: 'white',\n            flatShading: true,\n        })\n\n        let cloud = new Mesh(\n            tuft1,\n            mat\n        )\n        let cloud1 = new Mesh(\n            tuft2,\n            mat\n        )\n        let cloud2 = new THREE.Mesh(\n            tuft3,\n            mat\n        )\n\n        group.add(cloud)\n        group.add(cloud1)\n        group.add(cloud2)\n\n        scene.add(group)\n        group.castShadow = true\n        group.receiveShadow = true\n        group.position.x = pos.x\n        group.position.y = pos.y\n        group.position.z = pos.z\n\n        this.grass = group\n        this.speed = speed   \n        this.pos = pos\n    }\n\n    update() {\n        let geos = this.grass\n        geos.position.x +=  this.speed\n        if(geos.position.x > 400){\n           geos.position.x = this.pos.x\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}