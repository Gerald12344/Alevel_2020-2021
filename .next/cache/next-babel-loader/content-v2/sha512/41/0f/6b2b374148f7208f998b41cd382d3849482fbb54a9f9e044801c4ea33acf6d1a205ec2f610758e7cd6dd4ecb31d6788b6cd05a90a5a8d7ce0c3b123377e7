{"ast":null,"code":"import * as THREE from \"three\";\nexport function createTag(baseWidth, size, name) {\n  const borderSize = 2;\n  const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n  const font = `${size}px Verdana`;\n  ctx.font = font; // measure how long the name will be\n\n  const textWidth = ctx.measureText(name).width;\n  const doubleBorderSize = borderSize * 2;\n  const width = baseWidth + doubleBorderSize;\n  const height = size + doubleBorderSize;\n  ctx.canvas.width = width;\n  ctx.canvas.height = height; // need to set font again after resizing canvas\n\n  ctx.font = font;\n  ctx.textBaseline = \"middle\";\n  ctx.textAlign = \"center\"; //ctx.fillStyle = 'blue';\n  //ctx.fillRect(0, 0, width, height);\n  // scale to fit but don't stretch\n\n  const scaleFactor = Math.min(1, baseWidth / textWidth);\n  ctx.translate(width / 2, height / 2);\n  ctx.scale(scaleFactor, 1);\n  ctx.fillStyle = \"white\";\n  ctx.fillText(name, 0, 0);\n  return ctx.canvas;\n}\nexport function generateLabel(name, group) {\n  const canvas = CreateTag(300, 32, name);\n  const texture = new THREE.CanvasTexture(canvas); // because our canvas is likely not a power of 2\n  // in both dimensions set the filtering appropriately.\n\n  texture.minFilter = THREE.LinearFilter;\n  texture.wrapS = THREE.ClampToEdgeWrapping;\n  texture.wrapT = THREE.ClampToEdgeWrapping;\n  const labelMaterial = new THREE.SpriteMaterial({\n    map: texture,\n    transparent: true\n  }); // if units are meters then 0.01 here makes size\n  // of the label into centimeters.\n\n  const labelBaseScale = 0.01;\n  const label = new THREE.Sprite(labelMaterial);\n  group.add(label);\n  label.position.y = 1;\n  label.scale.x = canvas.width * labelBaseScale;\n  label.scale.y = canvas.height * labelBaseScale;\n  return group;\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/nametag.js"],"names":["THREE","createTag","baseWidth","size","name","borderSize","ctx","document","createElement","getContext","font","textWidth","measureText","width","doubleBorderSize","height","canvas","textBaseline","textAlign","scaleFactor","Math","min","translate","scale","fillStyle","fillText","generateLabel","group","CreateTag","texture","CanvasTexture","minFilter","LinearFilter","wrapS","ClampToEdgeWrapping","wrapT","labelMaterial","SpriteMaterial","map","transparent","labelBaseScale","label","Sprite","add","position","y","x"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAC7C,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,UAAjC,CAA4C,IAA5C,CAAZ;AAEA,QAAMC,IAAI,GAAI,GAAEP,IAAK,YAArB;AACAG,EAAAA,GAAG,CAACI,IAAJ,GAAWA,IAAX,CAL6C,CAM7C;;AACA,QAAMC,SAAS,GAAGL,GAAG,CAACM,WAAJ,CAAgBR,IAAhB,EAAsBS,KAAxC;AAEA,QAAMC,gBAAgB,GAAGT,UAAU,GAAG,CAAtC;AACA,QAAMQ,KAAK,GAAGX,SAAS,GAAGY,gBAA1B;AACA,QAAMC,MAAM,GAAGZ,IAAI,GAAGW,gBAAtB;AACAR,EAAAA,GAAG,CAACU,MAAJ,CAAWH,KAAX,GAAmBA,KAAnB;AACAP,EAAAA,GAAG,CAACU,MAAJ,CAAWD,MAAX,GAAoBA,MAApB,CAb6C,CAe7C;;AACAT,EAAAA,GAAG,CAACI,IAAJ,GAAWA,IAAX;AACAJ,EAAAA,GAAG,CAACW,YAAJ,GAAmB,QAAnB;AACAX,EAAAA,GAAG,CAACY,SAAJ,GAAgB,QAAhB,CAlB6C,CAoB7C;AACA;AAEA;;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYnB,SAAS,GAAGS,SAAxB,CAApB;AACAL,EAAAA,GAAG,CAACgB,SAAJ,CAAcT,KAAK,GAAG,CAAtB,EAAyBE,MAAM,GAAG,CAAlC;AACAT,EAAAA,GAAG,CAACiB,KAAJ,CAAUJ,WAAV,EAAuB,CAAvB;AACAb,EAAAA,GAAG,CAACkB,SAAJ,GAAgB,OAAhB;AACAlB,EAAAA,GAAG,CAACmB,QAAJ,CAAarB,IAAb,EAAmB,CAAnB,EAAsB,CAAtB;AAEA,SAAOE,GAAG,CAACU,MAAX;AACH;AAED,OAAO,SAASU,aAAT,CAAuBtB,IAAvB,EAA6BuB,KAA7B,EAAoC;AACvC,QAAMX,MAAM,GAAGY,SAAS,CAAC,GAAD,EAAM,EAAN,EAAUxB,IAAV,CAAxB;AACA,QAAMyB,OAAO,GAAG,IAAI7B,KAAK,CAAC8B,aAAV,CAAwBd,MAAxB,CAAhB,CAFuC,CAGvC;AACA;;AACAa,EAAAA,OAAO,CAACE,SAAR,GAAoB/B,KAAK,CAACgC,YAA1B;AACAH,EAAAA,OAAO,CAACI,KAAR,GAAgBjC,KAAK,CAACkC,mBAAtB;AACAL,EAAAA,OAAO,CAACM,KAAR,GAAgBnC,KAAK,CAACkC,mBAAtB;AAEA,QAAME,aAAa,GAAG,IAAIpC,KAAK,CAACqC,cAAV,CAAyB;AAC3CC,IAAAA,GAAG,EAAET,OADsC;AAE3CU,IAAAA,WAAW,EAAE;AAF8B,GAAzB,CAAtB,CATuC,CAavC;AACA;;AACA,QAAMC,cAAc,GAAG,IAAvB;AAEA,QAAMC,KAAK,GAAG,IAAIzC,KAAK,CAAC0C,MAAV,CAAiBN,aAAjB,CAAd;AACAT,EAAAA,KAAK,CAACgB,GAAN,CAAUF,KAAV;AACAA,EAAAA,KAAK,CAACG,QAAN,CAAeC,CAAf,GAAmB,CAAnB;AAEAJ,EAAAA,KAAK,CAAClB,KAAN,CAAYuB,CAAZ,GAAgB9B,MAAM,CAACH,KAAP,GAAe2B,cAA/B;AACAC,EAAAA,KAAK,CAAClB,KAAN,CAAYsB,CAAZ,GAAgB7B,MAAM,CAACD,MAAP,GAAgByB,cAAhC;AACA,SAAOb,KAAP;AACH","sourcesContent":["import * as THREE from \"three\";\n\nexport function createTag(baseWidth, size, name) {\n    const borderSize = 2;\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\");\n\n    const font = `${size}px Verdana`;\n    ctx.font = font;\n    // measure how long the name will be\n    const textWidth = ctx.measureText(name).width;\n\n    const doubleBorderSize = borderSize * 2;\n    const width = baseWidth + doubleBorderSize;\n    const height = size + doubleBorderSize;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n\n    // need to set font again after resizing canvas\n    ctx.font = font;\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"center\";\n\n    //ctx.fillStyle = 'blue';\n    //ctx.fillRect(0, 0, width, height);\n\n    // scale to fit but don't stretch\n    const scaleFactor = Math.min(1, baseWidth / textWidth);\n    ctx.translate(width / 2, height / 2);\n    ctx.scale(scaleFactor, 1);\n    ctx.fillStyle = \"white\";\n    ctx.fillText(name, 0, 0);\n\n    return ctx.canvas;\n}\n\nexport function generateLabel(name, group) {\n    const canvas = CreateTag(300, 32, name);\n    const texture = new THREE.CanvasTexture(canvas);\n    // because our canvas is likely not a power of 2\n    // in both dimensions set the filtering appropriately.\n    texture.minFilter = THREE.LinearFilter;\n    texture.wrapS = THREE.ClampToEdgeWrapping;\n    texture.wrapT = THREE.ClampToEdgeWrapping;\n\n    const labelMaterial = new THREE.SpriteMaterial({\n        map: texture,\n        transparent: true,\n    });\n    // if units are meters then 0.01 here makes size\n    // of the label into centimeters.\n    const labelBaseScale = 0.01;\n\n    const label = new THREE.Sprite(labelMaterial);\n    group.add(label);\n    label.position.y = 1;\n\n    label.scale.x = canvas.width * labelBaseScale;\n    label.scale.y = canvas.height * labelBaseScale;\n    return group;\n}\n"]},"metadata":{},"sourceType":"module"}