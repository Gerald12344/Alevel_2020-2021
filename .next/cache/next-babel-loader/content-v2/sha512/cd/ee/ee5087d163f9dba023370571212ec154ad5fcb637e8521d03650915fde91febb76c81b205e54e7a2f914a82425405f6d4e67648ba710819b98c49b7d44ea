{"ast":null,"code":"import { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from 'three/examples/js/utils/BufferGeometryUtils';\nexport async function GenerateTrees(num, scene, start, bounds, terrain) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  let snowyTree = await addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n  tree.scene.children[0].material = new MeshLambertMaterial({\n    color: 0x694b37\n  });\n  tree.scene.children[1].material = new MeshLambertMaterial({\n    color: 0x216734\n  });\n  snowyTree.scene.children[0].material = new MeshLambertMaterial({\n    color: 0x694b37\n  });\n  snowyTree.scene.children[1].material = new MeshLambertMaterial({\n    color: 0x216734\n  });\n  snowyTree.scene.children[2].material = new MeshLambertMaterial({\n    color: 0xffffff\n  });\n  let group = new Group();\n  let raycaster = new Raycaster();\n  let trees = [];\n\n  for (let i = 0; i < num; i++) {\n    var _intersects$, _intersects$2, _intersects$3;\n\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    randomVector.y = 50;\n    raycaster.set(randomVector, new Vector3(0, -1, 0));\n    const intersects = raycaster.intersectObjects([terrain]);\n\n    if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > -20 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      trees.push(newTree);\n    } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) > 20) {\n      let newTree = snowyTree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      trees.push(newTree);\n    }\n  }\n\n  const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(trees, false);\n  const material = new THREE.MeshBasicMaterial({\n    color: 'red'\n  });\n  const mesh = new THREE.Mesh(mergedGeometry, material);\n  scene.add(mesh);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","BufferGeometryUtils","GenerateTrees","num","scene","start","bounds","terrain","tree","snowyTree","children","material","color","group","raycaster","trees","i","randomVector","y","set","intersects","intersectObjects","undefined","point","newTree","clone","rotateY","Math","random","position","x","z","push","mergedGeometry","mergeBufferGeometries","THREE","mesh","Mesh","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from 'three/examples/js/utils/BufferGeometryUtils'\n\nexport async function GenerateTrees(num, scene, start, bounds, terrain){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    tree.scene.children[0].material = new MeshLambertMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshLambertMaterial({color: 0x216734 })\n    snowyTree.scene.children[0].material = new MeshLambertMaterial({color: 0x694b37 })\n    snowyTree.scene.children[1].material = new MeshLambertMaterial({color: 0x216734 })\n    snowyTree.scene.children[2].material = new MeshLambertMaterial({color: 0xffffff })\n\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    let trees = []\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        raycaster.set(randomVector, new Vector3(0,-1,0))\n        const intersects = raycaster.intersectObjects( [terrain] );\n\n        \n\n        if(intersects[0] !== undefined && intersects[0]?.point.y > -20 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            trees.push(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            trees.push(newTree)\n        }\n        \n    }\n    const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(\n        trees, false); \n        const material = new THREE.MeshBasicMaterial({color:'red'});\n        const mesh = new THREE.Mesh(mergedGeometry, material);\n    scene.add(mesh)\n}"]},"metadata":{},"sourceType":"module"}