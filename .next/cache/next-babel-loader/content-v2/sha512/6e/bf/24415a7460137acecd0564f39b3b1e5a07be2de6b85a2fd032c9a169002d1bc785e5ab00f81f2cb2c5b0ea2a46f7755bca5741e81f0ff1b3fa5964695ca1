{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { Vector3 } from \"three\";\nimport { v4 } from \"uuid\";\nlet [w, a, s, d, up, down, e, q, shift] = [false, false, false, false, false, false, false, false, 1];\nexport function controlHandlerInit(document, child2) {\n  /*eslint complexity: [\"error\", 20]*/\n  function onDocumentKeyDown(event, val) {\n    if (child2 === document.activeElement) {\n      return;\n    }\n\n    var keyCode = event.which;\n\n    if (keyCode === 87) {\n      w = val;\n    }\n\n    if (keyCode === 83) {\n      s = val;\n    }\n\n    if (keyCode === 65) {\n      a = val;\n    }\n\n    if (keyCode === 68) {\n      d = val;\n    }\n\n    if (keyCode === 38) {\n      up = val;\n    }\n\n    if (keyCode === 40) {\n      down = val;\n    }\n\n    if (keyCode === 69) {\n      e = val;\n    }\n\n    if (keyCode === 81) {\n      q = val;\n    }\n\n    if (keyCode === 16) {\n      shift = val ? 0.5 : 1;\n    }\n  }\n\n  document.addEventListener(\"keydown\", e => {\n    onDocumentKeyDown(e, true);\n  }, false);\n  document.addEventListener(\"keyup\", e => {\n    onDocumentKeyDown(e, false);\n  }, false);\n}\n/*eslint complexity: [\"error\", 20]*/\n\nexport function controlHandlerUpdate(Camera) {\n  if (w) {\n    let direction = new Vector3();\n    Camera.getWorldDirection(direction);\n    Camera.position.add(direction.multiplyScalar(shift === 1 ? 1 : 0.25));\n  }\n\n  if (s) {\n    let direction = new Vector3();\n    Camera.getWorldDirection(direction);\n    Camera.position.add(direction.multiplyScalar(-(shift === 1 ? 1 : 0.25)));\n  }\n\n  if (a) {\n    Camera.rotateY(0.04 * shift);\n  }\n\n  if (d) {\n    Camera.rotateY(-0.04 * shift);\n  }\n\n  if (up) {\n    Camera.rotateX(0.04 * shift);\n  }\n\n  if (down) {\n    Camera.rotateX(-0.04 * shift);\n  }\n\n  if (q) {\n    Camera.rotateZ(0.02 * shift);\n  }\n\n  if (e) {\n    Camera.rotateZ(-0.02 * shift);\n  }\n}\nlet listeningHooks = {};\nexport function ControlEventListener(ocument, child2) {\n  let [wKey, aKey, sKey, dKey, upKey, downKey, eKey, qKey, shiftKey, zKey, xKey] = [false, false, false, false, false, false, false, false, false, false, false];\n\n  function onDocumentKeyDownEvent(event, val) {\n    if (child2 === document.activeElement) {\n      return;\n    }\n\n    var keyCode = event.which;\n\n    if (keyCode === 87) {\n      wKey = val;\n    }\n\n    if (keyCode === 83) {\n      sKey = val;\n    }\n\n    if (keyCode === 65) {\n      aKey = val;\n    }\n\n    if (keyCode === 68) {\n      dKey = val;\n    }\n\n    if (keyCode === 38) {\n      upKey = val;\n    }\n\n    if (keyCode === 40) {\n      downKey = val;\n    }\n\n    if (keyCode === 69) {\n      eKey = val;\n    }\n\n    if (keyCode === 81) {\n      qKey = val;\n    }\n\n    if (keyCode === 88) {\n      zKey = val;\n    }\n\n    if (keyCode === 90) {\n      xKey = val;\n    }\n\n    if (keyCode === 16) {\n      shiftKey = val ? 0.5 : 1;\n    }\n\n    for (const [key, value] of Object.entries(listeningHooks)) {\n      value({\n        wKey,\n        aKey,\n        sKey,\n        dKey,\n        upKey,\n        downKey,\n        eKey,\n        qKey,\n        shiftKey,\n        zKey,\n        xKey\n      });\n    }\n  }\n\n  document.addEventListener(\"keydown\", e => {\n    onDocumentKeyDownEvent(e, true);\n  }, false);\n  document.addEventListener(\"keyup\", e => {\n    onDocumentKeyDownEvent(e, false);\n  }, false);\n}\nexport function listenToConrols(arg) {\n  let uuid = v4();\n  listeningHooks[uuid] = arg;\n  return uuid;\n}\nexport function CleanUpListener(uuid) {\n  delete listeningHooks[uuid];\n}","map":null,"metadata":{},"sourceType":"module"}