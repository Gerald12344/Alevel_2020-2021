{"ast":null,"code":"import { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector2, Vector3 } from \"three\";\nimport { radiants } from \"../components/Algorithms/degToRad\";\nimport * as SimplexNoise from 'simplex-noise';\nexport function createOcean(scene) {\n  var plane = new PlaneBufferGeometry(500, 500, 100, 100); //const material = new MeshPhongMaterial( {color: 0x0077be, flatShading:true} );\n\n  var noiseMap = new SimplexNoise(\"\".concat(Math.random()));\n  var offset = 10;\n  var Position = new Vector2(0, 0);\n  var gain = 0.75;\n  var colours = [];\n\n  var init = function init() {\n    var positionAttribute = plane.getAttribute(\"position\"); //------------[Edit the Geomtry Accordingly]------------\\\\\n\n    for (var i = 0, l = plane.attributes.position.count; i < l; i++) {\n      // Get Data position\n      var vertex = new Vector3();\n      vertex.fromBufferAttribute(positionAttribute, i); // Check Height from Perlin Noise Generator\n      //let height = noiseMap.noise2D(vertex.x+(Position.x)+offset, vertex.y-(Position.y)+offset) * gain\n\n      var height = noiseMap.noise2D(vertex.x, vertex.y) * gain; // Set the height accordingly\n\n      plane.attributes.position.array[i * 3 + 2] = height;\n      console.log(height); // Update Vertice colours accordinly\n\n      if (height > 0.3) {\n        colours.push(1, 1, 1);\n      } else {\n        colours.push(0, 0.467, 0.745);\n      }\n    } //mesh.updateMatrix()\n\n  };\n\n  init(); //------------[Create Material]------------\\\\\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Edit colour attribute]------------\\\\\n\n  plane.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3));\n  var mesh = new Mesh(plane, material);\n  mesh.rotateX(radiants(-90));\n  scene.add(mesh);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/testing/ocean.js"],"names":["BufferAttribute","Mesh","MeshPhongMaterial","PlaneBufferGeometry","Vector2","Vector3","radiants","SimplexNoise","createOcean","scene","plane","noiseMap","Math","random","offset","Position","gain","colours","init","positionAttribute","getAttribute","i","l","attributes","position","count","vertex","fromBufferAttribute","height","noise2D","x","y","array","console","log","push","material","vertexColors","reflectivity","roughness","flatShading","setAttribute","Float32Array","mesh","rotateX","add"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,IAA1B,EAAgCC,iBAAhC,EAAmDC,mBAAnD,EAAwEC,OAAxE,EAAiFC,OAAjF,QAAgG,OAAhG;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,OAAO,KAAKC,YAAZ,MAA8B,eAA9B;AAGA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAC9B,MAAIC,KAAK,GAAG,IAAIP,mBAAJ,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,GAAvC,CAAZ,CAD8B,CAG9B;;AAEA,MAAIQ,QAAQ,GAAG,IAAIJ,YAAJ,WAAoBK,IAAI,CAACC,MAAL,EAApB,EAAf;AAGA,MAAIC,MAAM,GAAG,EAAb;AAEA,MAAIC,QAAQ,GAAG,IAAIX,OAAJ,CAAY,CAAZ,EAAc,CAAd,CAAf;AAEA,MAAIY,IAAI,GAAG,IAAX;AAEA,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAIC,IAAI,GAAI,SAARA,IAAQ,GAAM;AACd,QAAMC,iBAAiB,GAAGT,KAAK,CAACU,YAAN,CAAmB,UAAnB,CAA1B,CADc,CAEd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGZ,KAAK,CAACa,UAAN,CAAiBC,QAAjB,CAA0BC,KAA9C,EAAqDJ,CAAC,GAAGC,CAAzD,EAA4DD,CAAC,EAA7D,EAAiE;AAC7D;AACA,UAAMK,MAAM,GAAG,IAAIrB,OAAJ,EAAf;AACAqB,MAAAA,MAAM,CAACC,mBAAP,CAA2BR,iBAA3B,EAA8CE,CAA9C,EAH6D,CAK7D;AAEA;;AAEA,UAAIO,MAAM,GAAGjB,QAAQ,CAACkB,OAAT,CAAiBH,MAAM,CAACI,CAAxB,EAA2BJ,MAAM,CAACK,CAAlC,IAAuCf,IAApD,CAT6D,CAW7D;;AACAN,MAAAA,KAAK,CAACa,UAAN,CAAiBC,QAAjB,CAA0BQ,KAA1B,CAAgCX,CAAC,GAAG,CAAJ,GAAQ,CAAxC,IAA6CO,MAA7C;AAEAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ,EAd6D,CAgB7D;;AAGA,UAAIA,MAAM,GAAG,GAAb,EAAkB;AACdX,QAAAA,OAAO,CAACkB,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACH,OAFD,MAEK;AACDlB,QAAAA,OAAO,CAACkB,IAAR,CAAa,CAAb,EAAe,KAAf,EAAqB,KAArB;AACH;AACJ,KA3Ba,CA4Bd;;AACH,GA7BD;;AA+BAjB,EAAAA,IAAI,GA/C0B,CAiD9B;;AACA,MAAIkB,QAAQ,GAAG,IAAIlC,iBAAJ,CAAsB;AACjCmC,IAAAA,YAAY,EAAEpB,OADmB;AAEjCqB,IAAAA,YAAY,EAAE,CAFmB;AAGjCC,IAAAA,SAAS,EAAE,CAHsB;AAIjCC,IAAAA,WAAW,EAAE;AAJoB,GAAtB,CAAf,CAlD8B,CAyD9B;;AACA9B,EAAAA,KAAK,CAAC+B,YAAN,CACI,OADJ,EAEI,IAAIzC,eAAJ,CAAoB,IAAI0C,YAAJ,CAAiBzB,OAAjB,CAApB,EAA+C,CAA/C,CAFJ;AAMA,MAAI0B,IAAI,GAAG,IAAI1C,IAAJ,CAASS,KAAT,EAAgB0B,QAAhB,CAAX;AAEAO,EAAAA,IAAI,CAACC,OAAL,CAAatC,QAAQ,CAAC,CAAC,EAAF,CAArB;AAGAG,EAAAA,KAAK,CAACoC,GAAN,CAAUF,IAAV;AAGH","sourcesContent":["import { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector2, Vector3 } from \"three\";\nimport { radiants } from \"../components/Algorithms/degToRad\"\nimport * as SimplexNoise from 'simplex-noise'\n\n\nexport function createOcean(scene){\n    let plane = new PlaneBufferGeometry(500, 500, 100, 100);\n\n    //const material = new MeshPhongMaterial( {color: 0x0077be, flatShading:true} );\n\n    let noiseMap = new SimplexNoise(`${Math.random()}`)\n\n\n    let offset = 10\n\n    let Position = new Vector2(0,0)\n\n    let gain = 0.75\n\n    let colours = [];\n\n    let init =  () => {\n        const positionAttribute = plane.getAttribute(\"position\");\n        //------------[Edit the Geomtry Accordingly]------------\\\\\n        for (var i = 0, l = plane.attributes.position.count; i < l; i++) {\n            // Get Data position\n            const vertex = new Vector3();\n            vertex.fromBufferAttribute(positionAttribute, i);\n\n            // Check Height from Perlin Noise Generator\n            \n            //let height = noiseMap.noise2D(vertex.x+(Position.x)+offset, vertex.y-(Position.y)+offset) * gain\n\n            let height = noiseMap.noise2D(vertex.x, vertex.y) * gain\n            \n            // Set the height accordingly\n            plane.attributes.position.array[i * 3 + 2] = height;\n\n            console.log(height)\n\n            // Update Vertice colours accordinly\n            \n            \n            if (height > 0.3) {\n                colours.push(1, 1, 1);\n            }else{\n                colours.push(0,0.467,0.745)\n            }\n        }\n        //mesh.updateMatrix()\n    }\n\n    init()\n\n    //------------[Create Material]------------\\\\\n    var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Edit colour attribute]------------\\\\\n    plane.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n\n\n    let mesh = new Mesh(plane, material)\n\n    mesh.rotateX(radiants(-90))\n\n\n    scene.add(mesh)\n\n\n}"]},"metadata":{},"sourceType":"module"}