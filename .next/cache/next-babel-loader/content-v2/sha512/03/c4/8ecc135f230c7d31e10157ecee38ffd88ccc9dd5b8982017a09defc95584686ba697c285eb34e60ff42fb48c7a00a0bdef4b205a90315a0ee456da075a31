{"ast":null,"code":"import _slicedToArray from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Written By Harvey Randall \\\\\nimport { BackSide, BoxGeometry, Color, MathUtils, Mesh, MeshBasicMaterial, MeshLambertMaterial, SphereBufferGeometry, Vector3 } from \"three\";\nimport { createAmbientLight, createDirectionalLight } from \"../Core-API/LightingManager\";\nimport { getRandomStarField } from \"./stars\";\nimport { rotateAboutPoint } from \"./rotateAroundPoint\";\nimport { v4 } from \"uuid\";\nvar recieveDaytimeUpdate = {};\nexport function addtoDayTimeChecker(arg) {\n  var UUID = v4();\n  recieveDaytimeUpdate[UUID] = arg;\n  return UUID;\n}\nexport var CreateDayNightCycle = /*#__PURE__*/function () {\n  function CreateDayNightCycle(SceneToGet, Renders) {\n    _classCallCheck(this, CreateDayNightCycle);\n\n    // ---------- [Two to level global variables] ---------- \\\\\n    this.SceneToGet = SceneToGet;\n    this.Renders = Renders;\n    this.announcedDay = false;\n    this.announcedNight = false; // ---------- [Create Sun Mesh] ---------- \\\\\n\n    var sun = new SphereBufferGeometry(20, 20, 100, 100);\n    var sunMaterial = new MeshLambertMaterial({\n      emissive: \"#f9d71c\"\n    });\n    var sunmesh = new Mesh(sun, sunMaterial);\n    sunmesh.position.set(1, 300, 300);\n    SceneToGet.add(sunmesh); // ---------- [Create Moon Mesh] ---------- \\\\\n\n    var moon = new SphereBufferGeometry(10, 10, 100, 100);\n    var moonMaterial = new MeshLambertMaterial({\n      emissive: \"#ffffff\"\n    });\n    var moonMesh = new Mesh(moon, moonMaterial);\n    moonMesh.position.set(-1, -200, -300);\n    SceneToGet.add(moonMesh); // ---------- [Create Box Gometry for handling rotation] ---------- \\\\\n\n    var geometry = new BoxGeometry(1, 1, 1);\n    var cube = new Mesh(geometry);\n    cube.visible = false;\n    SceneToGet.add(cube); // ^ This is a very bad work around fix later\n    // ---------- [All defintions for the moving part] ---------- \\\\\n\n    this.cube = cube;\n    this.moonMesh = moonMesh;\n    this.sunmesh = sunmesh;\n    this.t = 0;\n    this.dTIme = 0; // ---------- [All defintions for lights to create shadows] ---------- \\\\\n\n    this.directionalLight = createDirectionalLight(SceneToGet, \"#ddffee\", 0.5, [1, 100, 100]);\n    this.directionalLight2 = createDirectionalLight(SceneToGet, \"#ffffff\", 0.2, [1, -100, -100]);\n    this.light = createAmbientLight(SceneToGet, \"#aaaaaa\", 0.5); // ---------- [Create Stary night] ---------- \\\\\n\n    var skyBox = new BoxGeometry(1200, 1200, 1200);\n    var skyBoxMaterial = new MeshBasicMaterial({\n      map: getRandomStarField(600, 2048, 2048),\n      side: BackSide\n    });\n    this.sky = new Mesh(skyBox, skyBoxMaterial);\n  }\n  /*eslint complexity: [\"error\", 20]*/\n\n\n  _createClass(CreateDayNightCycle, [{\n    key: \"update\",\n    value: function update() {\n      // This two lines are  important as it is part of the hacky work around to get time of day on varying FPS\n      var theta = rotateAboutPoint(this.directionalLight, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      var angle = MathUtils.radToDeg(this.cube.rotation.x); // ---------- [Rotate all the lights and Meshes] ---------- \\\\\n\n      rotateAboutPoint(this.sunmesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      rotateAboutPoint(this.moonMesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      rotateAboutPoint(this.directionalLight2, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true); // ---------- [If it is day] ---------- \\\\\n\n      if (angle < 40 && this.dTIme < 1) {\n        if (this.announcedDay === false) {\n          this.announcedDay = true;\n          this.announcedNight = false;\n\n          for (var _i = 0, _Object$entries = Object.entries(recieveDaytimeUpdate); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                key = _Object$entries$_i[0],\n                value = _Object$entries$_i[1];\n\n            value('Day');\n          }\n        }\n\n        this.t = 0;\n        this.directionalLight.color = new Color(\"#ddffee\");\n        this.dTIme += 0.003;\n\n        if (this.dTIme >= 1) {\n          this.dTIme = 1;\n        }\n\n        this.Renders.setClearColor(new Color().lerpColors(new Color(\"#fdb813\"), new Color(\"#87ceeb\"), this.dTIme), 1);\n        this.light.intensity = 0.5;\n        this.directionalLight2.color = new Color(\"#000000\");\n        this.directionalLight.intensity = 0.5;\n        this.directionalLight2.intensity = 0;\n        this.SceneToGet.remove(this.sky);\n      } else if (!(angle < 40) && this.sky.parent !== this.SceneToGet) {\n        // ---------- [If it is night] ---------- \\\\\n        this.dTIme = 0;\n        this.t += 0.01;\n\n        if (this.t >= 1) {\n          this.t = 1;\n          this.SceneToGet.add(this.sky);\n        }\n\n        this.directionalLight2.color = new Color(\"#ffffff\");\n        this.Renders.setClearColor(new Color().lerpColors(new Color(\"#87ceeb\"), new Color(\"#000000\"), this.t), 1);\n        this.light.intensity = 0.2;\n        this.directionalLight.intensity = 0;\n        this.directionalLight2.intensity = 0.2;\n      }\n\n      if (this.sky.parent === this.SceneToGet) {\n        this.sky.rotation.x -= 4 / 10000;\n      }\n\n      this.cube.rotateOnAxis(new Vector3(1, 0, 0), theta);\n    }\n  }]);\n\n  return CreateDayNightCycle;\n}();","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/DayNightCycle.js"],"names":["BackSide","BoxGeometry","Color","MathUtils","Mesh","MeshBasicMaterial","MeshLambertMaterial","SphereBufferGeometry","Vector3","createAmbientLight","createDirectionalLight","getRandomStarField","rotateAboutPoint","v4","recieveDaytimeUpdate","addtoDayTimeChecker","arg","UUID","CreateDayNightCycle","SceneToGet","Renders","announcedDay","announcedNight","sun","sunMaterial","emissive","sunmesh","position","set","add","moon","moonMaterial","moonMesh","geometry","cube","visible","t","dTIme","directionalLight","directionalLight2","light","skyBox","skyBoxMaterial","map","side","sky","theta","angle","radToDeg","rotation","x","Object","entries","key","value","color","setClearColor","lerpColors","intensity","remove","parent","rotateOnAxis"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\nimport {\n    BackSide,\n    BoxGeometry,\n    Color,\n    MathUtils,\n    Mesh,\n    MeshBasicMaterial,\n    MeshLambertMaterial,\n    SphereBufferGeometry,\n    Vector3,\n} from \"three\";\nimport {\n    createAmbientLight,\n    createDirectionalLight,\n} from \"../Core-API/LightingManager\";\nimport { getRandomStarField } from \"./stars\";\nimport { rotateAboutPoint } from \"./rotateAroundPoint\";\nimport { v4 } from \"uuid\";\n\nlet recieveDaytimeUpdate = {}\n\nexport function addtoDayTimeChecker(arg){\n    let UUID = v4()\n    recieveDaytimeUpdate[UUID] = arg\n    return UUID\n}\n\nexport class CreateDayNightCycle {\n    constructor(SceneToGet, Renders) {\n        // ---------- [Two to level global variables] ---------- \\\\\n        this.SceneToGet = SceneToGet;\n        this.Renders = Renders;\n\n        this.announcedDay = false;\n        this.announcedNight = false;\n\n        // ---------- [Create Sun Mesh] ---------- \\\\\n        let sun = new SphereBufferGeometry(20, 20, 100, 100);\n        let sunMaterial = new MeshLambertMaterial({\n            emissive: \"#f9d71c\",\n        });\n        let sunmesh = new Mesh(sun, sunMaterial);\n        sunmesh.position.set(1, 300, 300);\n        SceneToGet.add(sunmesh);\n\n        // ---------- [Create Moon Mesh] ---------- \\\\\n        let moon = new SphereBufferGeometry(10, 10, 100, 100);\n        let moonMaterial = new MeshLambertMaterial({\n            emissive: \"#ffffff\",\n        });\n        let moonMesh = new Mesh(moon, moonMaterial);\n        moonMesh.position.set(-1, -200, -300);\n        SceneToGet.add(moonMesh);\n\n        // ---------- [Create Box Gometry for handling rotation] ---------- \\\\\n        var geometry = new BoxGeometry(1, 1, 1);\n        var cube = new Mesh(geometry);\n        cube.visible = false;\n        SceneToGet.add(cube);\n        // ^ This is a very bad work around fix later\n\n        // ---------- [All defintions for the moving part] ---------- \\\\\n        this.cube = cube;\n        this.moonMesh = moonMesh;\n        this.sunmesh = sunmesh;\n        this.t = 0;\n        this.dTIme = 0;\n\n        // ---------- [All defintions for lights to create shadows] ---------- \\\\\n        this.directionalLight = createDirectionalLight(\n            SceneToGet,\n            \"#ddffee\",\n            0.5,\n            [1, 100, 100]\n        );\n        this.directionalLight2 = createDirectionalLight(\n            SceneToGet,\n            \"#ffffff\",\n            0.2,\n            [1, -100, -100]\n        );\n        this.light = createAmbientLight(SceneToGet, \"#aaaaaa\", 0.5);\n\n        // ---------- [Create Stary night] ---------- \\\\\n        let skyBox = new BoxGeometry(1200, 1200, 1200);\n        let skyBoxMaterial = new MeshBasicMaterial({\n            map: getRandomStarField(600, 2048, 2048),\n            side: BackSide,\n        });\n        this.sky = new Mesh(skyBox, skyBoxMaterial);\n    }\n    /*eslint complexity: [\"error\", 20]*/\n    update() {\n        // This two lines are  important as it is part of the hacky work around to get time of day on varying FPS\n        let theta = rotateAboutPoint(\n            this.directionalLight,\n            new Vector3(0, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n        let angle = MathUtils.radToDeg(this.cube.rotation.x);\n\n        // ---------- [Rotate all the lights and Meshes] ---------- \\\\\n        rotateAboutPoint(\n            this.sunmesh,\n            new Vector3(100, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n        rotateAboutPoint(\n            this.moonMesh,\n            new Vector3(100, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n        rotateAboutPoint(\n            this.directionalLight2,\n            new Vector3(0, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n\n        // ---------- [If it is day] ---------- \\\\\n        if (angle < 40 && this.dTIme < 1) {\n\n            if(this.announcedDay === false){\n                this.announcedDay = true;\n                this.announcedNight = false;\n                for (const [key, value] of Object.entries(recieveDaytimeUpdate)) {\n                    value('Day')\n                  }\n            }\n\n            this.t = 0;\n            this.directionalLight.color = new Color(\"#ddffee\");\n            this.dTIme += 0.003;\n            if (this.dTIme >= 1) {\n                this.dTIme = 1;\n            }\n            this.Renders.setClearColor(\n                new Color().lerpColors(\n                    new Color(\"#fdb813\"),\n                    new Color(\"#87ceeb\"),\n                    this.dTIme\n                ),\n                1\n            );\n            this.light.intensity = 0.5;\n            this.directionalLight2.color = new Color(\"#000000\");\n            this.directionalLight.intensity = 0.5;\n            this.directionalLight2.intensity = 0;\n            this.SceneToGet.remove(this.sky);\n        } else if (!(angle < 40) && this.sky.parent !== this.SceneToGet) {\n            // ---------- [If it is night] ---------- \\\\\n            this.dTIme = 0;\n\n            this.t += 0.01;\n            if (this.t >= 1) {\n                this.t = 1;\n                this.SceneToGet.add(this.sky);\n            }\n            this.directionalLight2.color = new Color(\"#ffffff\");\n            this.Renders.setClearColor(\n                new Color().lerpColors(\n                    new Color(\"#87ceeb\"),\n                    new Color(\"#000000\"),\n                    this.t\n                ),\n                1\n            );\n            this.light.intensity = 0.2;\n            this.directionalLight.intensity = 0;\n            this.directionalLight2.intensity = 0.2;\n        }\n        if (this.sky.parent === this.SceneToGet) {\n            this.sky.rotation.x -= 4/10000;\n        }\n        this.cube.rotateOnAxis(new Vector3(1, 0, 0), theta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}