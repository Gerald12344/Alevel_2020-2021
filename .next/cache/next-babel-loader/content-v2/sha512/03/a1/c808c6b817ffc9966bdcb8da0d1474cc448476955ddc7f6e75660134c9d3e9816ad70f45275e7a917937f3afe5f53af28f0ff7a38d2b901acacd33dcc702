{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GLTFLoader } from \"./glbCore\";\nexport function addGLBFile(_x, _x2) {\n  return _addGLBFile.apply(this, arguments);\n}\n\nfunction _addGLBFile() {\n  _addGLBFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item, scene) {\n    var loader, gltf;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            loader = new GLTFLoader();\n            _context.next = 3;\n            return loader.load( // resource URL\n            item, // called when the resource is loaded\n            function (gltf) {\n              scene.add(gltf.scene);\n              gltf.animations;\n              gltf.scene;\n              gltf.scenes;\n              gltf.cameras;\n              gltf.asset;\n              gtlf = gltf;\n            }, // called while loading is progressing\n            function (xhr) {\n              console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n            }, // called when loading has errors\n            function (error) {\n              console.log(\"An error happened\");\n            });\n\n          case 3:\n            return _context.abrupt(\"return\", gtlf);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _addGLBFile.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/3dModelHandlers/GLBLoader.js"],"names":["GLTFLoader","addGLBFile","item","scene","loader","load","gltf","add","animations","scenes","cameras","asset","gtlf","xhr","console","log","loaded","total","error"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,WAA3B;AAEA,gBAAsBC,UAAtB;AAAA;AAAA;;;yEAAO,iBAA0BC,IAA1B,EAAgCC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GACY,IAAIJ,UAAJ,EADZ;AAAA;AAAA,mBAGGI,MAAM,CAACC,IAAP,EACF;AACAH,YAAAA,IAFE,EAGF;AACA,sBAAUI,IAAV,EAAgB;AACZH,cAAAA,KAAK,CAACI,GAAN,CAAUD,IAAI,CAACH,KAAf;AAEAG,cAAAA,IAAI,CAACE,UAAL;AACAF,cAAAA,IAAI,CAACH,KAAL;AACAG,cAAAA,IAAI,CAACG,MAAL;AACAH,cAAAA,IAAI,CAACI,OAAL;AACAJ,cAAAA,IAAI,CAACK,KAAL;AACAC,cAAAA,IAAI,GAAGN,IAAP;AACH,aAbC,EAcF;AACA,sBAAUO,GAAV,EAAe;AACXC,cAAAA,OAAO,CAACC,GAAR,CAAaF,GAAG,CAACG,MAAJ,GAAaH,GAAG,CAACI,KAAlB,GAA2B,GAA3B,GAAiC,UAA7C;AACH,aAjBC,EAkBF;AACA,sBAAUC,KAAV,EAAiB;AACbJ,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,aArBC,CAHH;;AAAA;AAAA,6CA0BIH,IA1BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { GLTFLoader } from \"./glbCore\";\n\nexport async function addGLBFile(item, scene) {\n    const loader = new GLTFLoader();\n    let gltf \n    await loader.load(\n        // resource URL\n        item,\n        // called when the resource is loaded\n        function (gltf) {\n            scene.add(gltf.scene);\n\n            gltf.animations;\n            gltf.scene;\n            gltf.scenes;\n            gltf.cameras;\n            gltf.asset;\n            gtlf = gltf\n        },\n        // called while loading is progressing\n        function (xhr) {\n            console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        function (error) {\n            console.log(\"An error happened\");\n        }\n    );\n    return gtlf\n}\n"]},"metadata":{},"sourceType":"module"}