{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/test.js\";\n// Written By Harvey Randall \\\\\nimport { useEffect, useState, useContext } from \"react\";\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { DoubleSide, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from \"three\";\nimport { GenerateClouds } from '../components/gameFundalmentals/clouds';\nimport { CreateDayNightCycle } from \"../components/gameFundalmentals/DayNightCycle\";\n\nvar Stats = require('stats.js');\n\nimport { useAppContext } from '../components/Context/socketioContext';\nimport { GenerateLabel } from '../components/gameFundalmentals/nametag';\nimport { GenerateTerrain } from \"../components/gameFundalmentals/ProceduleTerrain\";\nimport { sendDataWithPromise, StartSeverClientCommunication, ListenToEvent } from \"../components/Core-API/ConnectAPI\";\nimport { ControlHandlerInit, ControlHandlerUpdate } from \"../components/gameFundalmentals/controls\";\nimport { addToRenderSequence, UpdateRenderCycle } from \"../components/Core-API/RenderingHandler\";\nimport { GenerateMainScene } from \"../components/gameFundalmentals/MainSceneHandler\";\nCameraControls.install({\n  THREE: THREE\n});\nexport default function render() {\n  var _ref;\n\n  const {\n    0: child,\n    1: setChild\n  } = useState(undefined);\n  const {\n    0: gameEventData,\n    1: setGameEventData\n  } = useState([]);\n  const {\n    0: newTheta,\n    1: setTheat\n  } = useState(0);\n  const {\n    0: day,\n    1: setDay\n  } = useState(\"not day\");\n  const {\n    0: child2,\n    1: setChild2\n  } = useState(undefined);\n  const {\n    0: pos,\n    1: setPos\n  } = useState(undefined);\n  const {\n    0: rot,\n    1: setRot\n  } = useState(undefined);\n  const socket = useAppContext();\n  const {\n    0: recievedSeed,\n    1: setSeed\n  } = useState(undefined);\n  const {\n    0: rendered,\n    1: setRendered\n  } = useState(false);\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: personData,\n    1: setPersonalData\n  } = useState(undefined);\n  const {\n    0: latestPerson,\n    1: setLatestestPerson\n  } = useState([]);\n  StartSeverClientCommunication(socket);\n  socket.once(\"welcome\", (seed, client, data) => {\n    setSeed(seed);\n    console.log(client);\n    setClients(client);\n    setPersonalData(data);\n  });\n  useEffect(() => {\n    if (child === undefined || recievedSeed === undefined || rendered === true) return;\n    setRendered(true);\n    let stats = new Stats();\n    stats.showPanel(1);\n    document.body.appendChild(stats.dom);\n    let SceneToGet = new Scene();\n    let Renders = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    Renders.setClearColor(0x87ceeb, 1);\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    let CurrentScene = \"Main\";\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    GenerateMainScene(SceneToGet, Renders, document, recievedSeed, child2, Camera);\n    Renders.domElement.requestPointerLock();\n    let players = [];\n\n    function MakeCube(color = \"rgb(0,0,0)\", name = \"unkown\") {\n      const group = new THREE.Group();\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(color),\n        emissive: new THREE.Color(color)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      group.add(cube);\n      const cyclinder = new THREE.CylinderGeometry(0.3, 0.3, 0.6, 30);\n      const material2 = new THREE.MeshLambertMaterial({\n        color: 0x000000\n      });\n      const cylinderBuild = new THREE.Mesh(cyclinder, material2);\n      cylinderBuild.rotateX(Math.PI / 2 + Math.PI);\n      cylinderBuild.position.set(0, 0, -0.6);\n      group.add(cylinderBuild);\n      GenerateLabel(name, group);\n      SceneToGet.add(group);\n      group.name = name;\n      return group;\n    }\n\n    let prevData = [];\n\n    let addtoGameFeed = (name = \"Unkown\", event) => {\n      let NewGameEventArray = [...prevData];\n      console.log(NewGameEventArray);\n      NewGameEventArray.unshift({\n        name: name,\n        event: event\n      });\n      delete NewGameEventArray[10];\n      delete NewGameEventArray[11];\n      setGameEventData([...NewGameEventArray]);\n      console.log(\"array below\");\n      console.log(prevData);\n      prevData = NewGameEventArray;\n    };\n\n    clients.forEach(e => {\n      console.log(\"Adding PLayer \" + e);\n      let cube = MakeCube(e.color, e.name);\n      players[e] = cube;\n    });\n    socket.on('NewPlayer', (id, data) => {\n      console.log(data);\n      console.log(\"New PLyer \" + id);\n      let cube = MakeCube(data.color, data.name);\n      addtoGameFeed(data === null || data === void 0 ? void 0 : data.name, \"Joined the game!\");\n      players[id] = cube;\n    });\n    socket.on('LostPLayer', (id, how, data) => {\n      console.log(\"lost PLyer \" + id);\n      let cube = players[id];\n      SceneToGet.remove(cube);\n      delete players[id];\n      console.log(data);\n      addtoGameFeed(data === null || data === void 0 ? void 0 : data.name, how === true ? \"Was removed from the game for being inactive\" : \"Left the game!\");\n    });\n    ListenToEvent('PlayerLocationUpdate', (id, pos, rot, data) => {\n      let cube = players[id];\n\n      if (cube) {\n        cube.rotation.set(rot._x, rot._y, rot._z);\n        cube.position.set(pos.x, pos.y, pos.z);\n      } else {\n        let cube = MakeCube(data === null || data === void 0 ? void 0 : data.color, data === null || data === void 0 ? void 0 : data.name);\n        players[id] = cube;\n      }\n    });\n    socket.on(\"NewChat\", (data, text) => {\n      addtoGameFeed(data.name, text);\n    });\n    setInterval(() => {\n      socket.emit('LocationUpdate', Camera.position, Camera.rotation);\n    }, 10);\n\n    var animate = function () {\n      stats.begin();\n      requestAnimationFrame(animate); // Update all moving parts\n\n      UpdateRenderCycle(\"Main\");\n      Renders.render(SceneToGet, Camera);\n      stats.end();\n    };\n\n    animate();\n  }, [child, clients]);\n\n  let sendChat = e => {\n    e.preventDefault();\n    socket.emit(\"sendChat\", child2.value);\n    child2.value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        position: \"fixed\",\n        marginTop: \"40px\",\n        color: \"white\"\n      },\n      children: personData === undefined ? \"LOADING...\" : personData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        marginTop: \"80px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendChat,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: ref => setChild2(ref)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), [...gameEventData].map(e => {\n        if (e == undefined) return;\n        return /*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: \"white\"\n          },\n          children: [e.name, \" - \", e.event]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), (_ref = recievedSeed === undefined) !== null && _ref !== void 0 ? _ref : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LOADING SEED!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 45\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref => setChild(ref)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/test.js"],"names":["useEffect","useState","useContext","THREE","CameraControls","DoubleSide","PerspectiveCamera","Scene","Vector3","WebGLRenderer","GenerateClouds","CreateDayNightCycle","Stats","require","useAppContext","GenerateLabel","GenerateTerrain","sendDataWithPromise","StartSeverClientCommunication","ListenToEvent","ControlHandlerInit","ControlHandlerUpdate","addToRenderSequence","UpdateRenderCycle","GenerateMainScene","install","render","child","setChild","undefined","gameEventData","setGameEventData","newTheta","setTheat","day","setDay","child2","setChild2","pos","setPos","rot","setRot","socket","recievedSeed","setSeed","rendered","setRendered","clients","setClients","personData","setPersonalData","latestPerson","setLatestestPerson","once","seed","client","data","console","log","stats","showPanel","document","body","appendChild","dom","SceneToGet","Renders","antialias","alpha","setClearColor","setSize","window","innerWidth","innerHeight","domElement","CurrentScene","Camera","requestPointerLock","players","MakeCube","color","name","group","Group","geometry","BoxGeometry","material","MeshLambertMaterial","Color","emissive","cube","Mesh","add","cyclinder","CylinderGeometry","material2","cylinderBuild","rotateX","Math","PI","position","set","prevData","addtoGameFeed","event","NewGameEventArray","unshift","forEach","e","on","id","how","remove","rotation","_x","_y","_z","x","y","z","text","setInterval","emit","animate","begin","requestAnimationFrame","end","sendChat","preventDefault","value","marginTop","width","height","ref","map"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { useEffect, useState, useContext } from \"react\"\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { DoubleSide, PerspectiveCamera, Scene, Vector3, WebGLRenderer } from \"three\"\nimport { GenerateClouds } from '../components/gameFundalmentals/clouds'\nimport { CreateDayNightCycle } from \"../components/gameFundalmentals/DayNightCycle\";\nvar Stats = require('stats.js')\nimport { useAppContext } from '../components/Context/socketioContext'\nimport { GenerateLabel } from '../components/gameFundalmentals/nametag'\nimport { GenerateTerrain } from \"../components/gameFundalmentals/ProceduleTerrain\";\nimport { sendDataWithPromise, StartSeverClientCommunication, ListenToEvent } from \"../components/Core-API/ConnectAPI\";\nimport { ControlHandlerInit, ControlHandlerUpdate } from \"../components/gameFundalmentals/controls\";\nimport { addToRenderSequence, UpdateRenderCycle } from \"../components/Core-API/RenderingHandler\";\nimport { GenerateMainScene } from \"../components/gameFundalmentals/MainSceneHandler\";\nCameraControls.install({ THREE: THREE });\n\n\nexport default function render() {\n    const [child, setChild] = useState(undefined)\n    const [gameEventData, setGameEventData] = useState([])\n\n    const [newTheta, setTheat] = useState(0)\n    const [day, setDay] = useState(\"not day\")\n    const [child2, setChild2] = useState(undefined)\n    const [pos, setPos] = useState(undefined)\n    const [rot, setRot] = useState(undefined)\n    const socket = useAppContext()\n    const [recievedSeed, setSeed] = useState(undefined)\n    const [rendered, setRendered] = useState(false)\n    const [clients, setClients] = useState([])\n    const [personData, setPersonalData] = useState(undefined)\n    const [latestPerson, setLatestestPerson] = useState([])\n\n    StartSeverClientCommunication(socket)\n\n\n    socket.once(\"welcome\", (seed, client, data) => {\n        setSeed(seed)\n        console.log(client)\n        setClients(client)\n        setPersonalData(data)\n    });\n\n    useEffect(() => {\n        if (child === undefined || recievedSeed === undefined || rendered === true) return;\n        setRendered(true)\n\n        let stats = new Stats();\n        stats.showPanel(1);\n        document.body.appendChild(stats.dom);\n\n        let SceneToGet = new Scene()\n        let Renders = new WebGLRenderer({\n            antialias: true,\n            alpha: true\n        })\n\n        Renders.setClearColor(0x87ceeb, 1);\n\n\n        Renders.setSize(window.innerWidth, window.innerHeight)\n        child.appendChild(Renders.domElement);\n\n\n        let CurrentScene = \"Main\"\n\n\n\n\n\n\n        var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n        GenerateMainScene(SceneToGet, Renders, document, recievedSeed, child2, Camera)\n\n\n        Renders.domElement.requestPointerLock()\n\n        let players = []\n\n        function MakeCube(color = \"rgb(0,0,0)\", name = \"unkown\") {\n            const group = new THREE.Group();\n            const geometry = new THREE.BoxGeometry(1, 1, 1);\n            const material = new THREE.MeshLambertMaterial({ color: new THREE.Color(color), emissive: new THREE.Color(color) });\n            const cube = new THREE.Mesh(geometry, material);\n            group.add(cube)\n            const cyclinder = new THREE.CylinderGeometry(0.3, 0.3, 0.6, 30);\n            const material2 = new THREE.MeshLambertMaterial({ color: 0x000000 });\n            const cylinderBuild = new THREE.Mesh(cyclinder, material2);\n            cylinderBuild.rotateX((Math.PI / 2) + Math.PI)\n            cylinderBuild.position.set(0, 0, -0.6)\n            group.add(cylinderBuild)\n\n            GenerateLabel(name, group)\n            SceneToGet.add(group)\n            group.name = name\n            return group\n        }\n\n        let prevData = []\n\n        let addtoGameFeed = (name = \"Unkown\", event) => {\n            let NewGameEventArray = [...prevData]\n            console.log(NewGameEventArray)\n            NewGameEventArray.unshift({ name: name, event: event })\n            delete NewGameEventArray[10]\n            delete NewGameEventArray[11]\n            setGameEventData([...NewGameEventArray])\n            console.log(\"array below\")\n            console.log(prevData)\n            prevData = NewGameEventArray\n        }\n\n        clients.forEach(e => {\n            console.log(\"Adding PLayer \" + e)\n            let cube = MakeCube(e.color, e.name)\n            players[e] = cube\n        })\n\n\n\n        socket.on('NewPlayer', (id, data) => {\n            console.log(data)\n            console.log(\"New PLyer \" + id)\n            let cube = MakeCube(data.color, data.name)\n            addtoGameFeed(data?.name, \"Joined the game!\")\n\n            players[id] = cube\n        })\n\n        socket.on('LostPLayer', (id, how, data) => {\n            console.log(\"lost PLyer \" + id)\n            let cube = players[id]\n            SceneToGet.remove(cube)\n            delete players[id]\n            console.log(data)\n            addtoGameFeed(data?.name, how === true ? \"Was removed from the game for being inactive\" : \"Left the game!\")\n        })\n\n        ListenToEvent('PlayerLocationUpdate', (id, pos, rot, data) => {\n            let cube = players[id]\n            if (cube) {\n                cube.rotation.set(rot._x, rot._y, rot._z)\n                cube.position.set(pos.x, pos.y, pos.z)\n            }\n            else {\n                let cube = MakeCube(data?.color, data?.name)\n\n                players[id] = cube\n\n            }\n\n        })\n        socket.on(\"NewChat\", (data, text) => {\n            addtoGameFeed(data.name, text)\n        })\n        setInterval(() => {\n            socket.emit('LocationUpdate', Camera.position, Camera.rotation)\n        }, 10)\n\n\n    \n\n\n        var animate = function () {\n            stats.begin()\n            requestAnimationFrame(animate)\n\n            // Update all moving parts\n            UpdateRenderCycle(\"Main\")\n\n            Renders.render(SceneToGet, Camera);\n            stats.end()\n        };\n\n        animate();\n    }, [child, clients])\n\n    let sendChat = (e) => {\n        e.preventDefault()\n        socket.emit(\"sendChat\", child2.value)\n        child2.value = \"\"\n    }\n\n    return (\n        <main >\n            <h1 style={{ position: \"fixed\", marginTop: \"40px\", color: \"white\" }}>{personData === undefined ? \"LOADING...\" : personData.name}</h1>\n            <div style={{ width: \"100vw\", height: \"100vh\", position: \"fixed\", marginTop: \"80px\" }}>\n                <form onSubmit={sendChat}>\n                    <input ref={ref => (setChild2(ref))}></input>\n                    <input type=\"Submit\"></input>\n                </form>\n                {[...gameEventData].map((e) => {\n                    if (e == undefined) return;\n                    return (\n                        <h4 style={{ color: \"white\" }}>{e.name} - {e.event}</h4>\n                    )\n                })}\n\n            </div>\n            { recievedSeed === undefined ?? <h1>LOADING SEED!</h1>}\n            <div ref={ref => (setChild(ref))}></div>\n        </main>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}