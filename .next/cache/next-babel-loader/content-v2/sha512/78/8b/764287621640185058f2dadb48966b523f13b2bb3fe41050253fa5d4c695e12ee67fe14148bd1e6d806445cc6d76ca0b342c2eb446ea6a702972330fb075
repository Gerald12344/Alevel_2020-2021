{"ast":null,"code":"import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\n\nvar SimplexNoise = require(\"simplex-noise\");\n\nexport async function GenerateTrees(num, scene, start, bounds, seed) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  let snowyTree = await addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n  tree.scene.children[0].material = new MeshStandardMaterial({\n    color: 0x694b37\n  });\n  tree.scene.children[1].material = new MeshStandardMaterial({\n    color: 0x216734\n  });\n  snowyTree.scene.children[0].material = new MeshStandardMaterial({\n    color: 0x694b37\n  });\n  snowyTree.scene.children[1].material = new MeshStandardMaterial({\n    color: 0x216734\n  });\n  snowyTree.scene.children[2].material = new MeshStandardMaterial({\n    color: 0xffffff\n  });\n  let group = new Group();\n  const simplex = new SimplexNoise(seed); //let raycaster = new Raycaster()\n\n  for (let i = 0; i < num; i++) {\n    var _intersects$, _intersects$2, _intersects$3;\n\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    randomVector.y = 50; //raycaster.set(randomVector, new Vector3(0,-1,0))\n    //const intersects = raycaster.intersectObjects( [terrain] );\n\n    let height = simplex.noise2D(randomVector.x / 128, randomVector.y / 128) * gain;\n\n    if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > -20 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360)); //let point = intersects[0].point\n\n      newTree.position.set(randomVector.x, height, randomVector.z);\n      group.add(newTree);\n    } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) > 20) {\n      let newTree = snowyTree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360)); //let point = intersects[0].point\n\n      newTree.position.set(randomVector.x, height, randomVector.z);\n      group.add(newTree);\n    }\n  }\n\n  scene.add(group);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","SimplexNoise","require","GenerateTrees","num","scene","start","bounds","seed","tree","snowyTree","children","material","color","group","simplex","i","randomVector","y","height","noise2D","x","gain","intersects","undefined","point","newTree","clone","rotateY","Math","random","position","set","z","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nvar SimplexNoise = require(\"simplex-noise\");\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    tree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    snowyTree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[2].material = new MeshStandardMaterial({color: 0xffffff })\n\n    \n    let group = new Group()\n    const simplex = new SimplexNoise(seed);\n    //let raycaster = new Raycaster()\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        //raycaster.set(randomVector, new Vector3(0,-1,0))\n        //const intersects = raycaster.intersectObjects( [terrain] );\n\n        let height = simplex.noise2D((randomVector.x)/128, (randomVector.y)/128) * gain;\n        if(intersects[0] !== undefined && intersects[0]?.point.y > -20 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            //let point = intersects[0].point\n            newTree.position.set(randomVector.x, height, randomVector.z)\n            group.add(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            //let point = intersects[0].point\n            newTree.position.set(randomVector.x, height, randomVector.z)\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}