{"ast":null,"code":"// Written By Harvey Randall \\\\\nvar renderingList = {};\n\nfunction checkType(type) {\n  if (typeof renderingList[\"\".concat(type)] === \"undefined\") {\n    renderingList[\"\".concat(type)] = [];\n  }\n}\n\nexport function addToRenderSequence(type, callback) {\n  var newType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (newType) {\n    renderingList[\"\".concat(type)] = [];\n  }\n\n  checkType(type);\n  renderingList[\"\".concat(type)].push(callback);\n}\nexport function renderingInfo(type) {\n  checkType(type);\n  return renderingList[\"\".concat(type)].length;\n}\nexport function updateRenderCycle(type) {\n  checkType(type);\n  renderingList[\"\".concat(type)].forEach(function (item) {\n    item();\n  });\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/RenderingHandler.js"],"names":["renderingList","checkType","type","addToRenderSequence","callback","newType","push","renderingInfo","length","updateRenderCycle","forEach","item"],"mappings":"AAAA;AACA,IAAIA,aAAa,GAAG,EAApB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAI,OAAOF,aAAa,WAAIE,IAAJ,EAApB,KAAoC,WAAxC,EAAqD;AACjDF,IAAAA,aAAa,WAAIE,IAAJ,EAAb,GAA2B,EAA3B;AACH;AACJ;;AAED,OAAO,SAASC,mBAAT,CAA6BD,IAA7B,EAAmCE,QAAnC,EAA8D;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;;AACjE,MAAIA,OAAJ,EAAa;AACTL,IAAAA,aAAa,WAAIE,IAAJ,EAAb,GAA2B,EAA3B;AACH;;AACDD,EAAAA,SAAS,CAACC,IAAD,CAAT;AACAF,EAAAA,aAAa,WAAIE,IAAJ,EAAb,CAAyBI,IAAzB,CAA8BF,QAA9B;AACH;AAED,OAAO,SAASG,aAAT,CAAuBL,IAAvB,EAA6B;AAChCD,EAAAA,SAAS,CAACC,IAAD,CAAT;AACA,SAAOF,aAAa,WAAIE,IAAJ,EAAb,CAAyBM,MAAhC;AACH;AAED,OAAO,SAASC,iBAAT,CAA2BP,IAA3B,EAAiC;AACpCD,EAAAA,SAAS,CAACC,IAAD,CAAT;AACAF,EAAAA,aAAa,WAAIE,IAAJ,EAAb,CAAyBQ,OAAzB,CAAiC,UAACC,IAAD,EAAU;AACvCA,IAAAA,IAAI;AACP,GAFD;AAGH","sourcesContent":["// Written By Harvey Randall \\\\\nlet renderingList = {};\n\nfunction checkType(type) {\n    if (typeof renderingList[`${type}`] === \"undefined\") {\n        renderingList[`${type}`] = [];\n    }\n}\n\nexport function addToRenderSequence(type, callback, newType = false) {\n    if (newType) {\n        renderingList[`${type}`] = [];\n    }\n    checkType(type);\n    renderingList[`${type}`].push(callback);\n}\n\nexport function renderingInfo(type) {\n    checkType(type);\n    return renderingList[`${type}`].length;\n}\n\nexport function updateRenderCycle(type) {\n    checkType(type);\n    renderingList[`${type}`].forEach((item) => {\n        item();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}