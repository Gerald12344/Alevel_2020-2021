{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Written By Harvey Randall \\\\\nimport { useEffect, useState, useContext } from \"react\";\nimport * as THREE from \"three\";\nimport React from 'react';\nimport { PerspectiveCamera, Scene, Vector3, WebGLRenderer } from \"three\";\n\nvar Stats = require(\"stats.js\");\n\nimport { useAppContext } from \"../components/Context/socketioContext\";\nimport { generateLabel } from \"../components/gameFundalmentals/nametag\";\nimport { startSeverClientCommunication, listenToEvent } from \"../components/Core-API/ConnectAPI\";\nimport { updateRenderCycle } from \"../components/Core-API/RenderingHandler\";\nimport { generateMainScene } from \"../components/Scenes/MainSceneHandler\";\nimport { CreateUI } from \"../components/gameUI/gameFeed\";\nimport { ControlEventListener } from \"../components/gameFundalmentals/controls\";\nexport default function render() {\n  var _ref;\n\n  const {\n    0: child,\n    1: setChild\n  } = useState();\n  const {\n    0: gameEventData,\n    1: setGameEventData\n  } = useState([]);\n  const {\n    0: day,\n    1: setDay\n  } = useState(\"not day\");\n  const {\n    0: child2,\n    1: setChild2\n  } = useState();\n  const socket = useAppContext();\n  ;\n  const {\n    0: recievedSeed,\n    1: setSeed\n  } = useState();\n  const {\n    0: rendered,\n    1: setRendered\n  } = useState(false);\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: personData,\n    1: setPersonalData\n  } = useState();\n  startSeverClientCommunication(socket);\n  socket.once(\"welcome\", (seed, client, data) => {\n    setSeed(seed);\n    setClients(client);\n    setPersonalData(data);\n  });\n  useEffect(() => {\n    if (typeof child === \"undefined\" || typeof recievedSeed === \"undefined\" || rendered === true) {\n      return;\n    }\n\n    setRendered(true);\n    let stats = new Stats();\n    stats.showPanel(1);\n    document.body.appendChild(stats.dom);\n    let SceneToGet = new Scene();\n    let Renders = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    Renders.setClearColor(\"#87ceeb\", 1);\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    let CurrentScene = \"Main\";\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000 / 0.05);\n    generateMainScene(SceneToGet, Renders, document, recievedSeed, child2, Camera);\n    Renders.domElement.requestPointerLock();\n    ControlEventListener(document, child2);\n    let players = [];\n\n    function makeCube(color = \"rgb(0,0,0)\", name = \"unkown\") {\n      const group = new THREE.Group();\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(color),\n        emissive: new THREE.Color(color)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      group.add(cube);\n      const cyclinder = new THREE.CylinderGeometry(0.3, 0.3, 0.6, 30);\n      const material2 = new THREE.MeshLambertMaterial({\n        color: \"#000000\"\n      });\n      const cylinderBuild = new THREE.Mesh(cyclinder, material2);\n      cylinderBuild.rotateX(Math.PI / 2 + Math.PI);\n      cylinderBuild.position.set(0, 0, -0.6);\n      group.add(cylinderBuild);\n      generateLabel(name, group);\n      SceneToGet.add(group);\n      group.name = name;\n      return group;\n    }\n\n    let prevData = [];\n\n    let addtoGameFeed = (name = \"Unkown\", event) => {\n      let NewGameEventArray = [...gameEventData];\n      NewGameEventArray.unshift({\n        name,\n        event\n      });\n      delete NewGameEventArray[10];\n      delete NewGameEventArray[11];\n      setGameEventData([...NewGameEventArray]);\n      prevData = NewGameEventArray;\n    };\n\n    clients.forEach(e => {\n      let cube = makeCube(e.color, e.name);\n      players[`${e}`] = cube;\n    });\n    socket.on(\"NewPlayer\", (id, data) => {\n      let cube = makeCube(data.color, data.name);\n      addtoGameFeed(data === null || data === void 0 ? void 0 : data.name, \"Joined the game!\");\n      players[`${id}`] = cube;\n    });\n    socket.on(\"LostPLayer\", (id, how, data) => {\n      let cube = players[`${id}`];\n      SceneToGet.remove(cube);\n      delete players[`${id}`];\n      addtoGameFeed(data === null || data === void 0 ? void 0 : data.name, how === true ? \"Was removed from the game for being inactive\" : \"Left the game!\");\n    });\n    listenToEvent(\"PlayerLocationUpdate\", (id, pos, rot, data) => {\n      let cube = players[`${id}`];\n\n      if (cube) {\n        cube.rotation.set(rot._x, rot._y, rot._z);\n        cube.position.set(pos.x, pos.y, pos.z);\n      } else {\n        let cube = makeCube(data === null || data === void 0 ? void 0 : data.color, data === null || data === void 0 ? void 0 : data.name);\n        players[`${id}`] = cube;\n      }\n    });\n    socket.on(\"NewChat\", (data, text) => {\n      addtoGameFeed(data.name, text);\n    });\n    setInterval(() => {\n      let vector = new Vector3();\n      Camera.getWorldPosition(vector);\n      socket.emit(\"LocationUpdate\", vector, Camera.rotation);\n    }, 10);\n\n    var animate = function () {\n      stats.begin();\n      requestAnimationFrame(animate); // Update all moving parts\n\n      updateRenderCycle(CurrentScene);\n      Renders.render(SceneToGet, Camera);\n      stats.end();\n    };\n\n    animate();\n  }, [child, clients]);\n\n  let sendChat = e => {\n    e.preventDefault();\n    socket.emit(\"sendChat\", child2.value);\n    child2.value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxs(\"main\", {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      style: {\n        position: \"fixed\",\n        marginTop: \"40px\",\n        color: \"white\"\n      },\n      children: typeof personData === \"undefined\" ? \"LOADING...\" : personData.name\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        marginTop: \"80px\"\n      },\n      children: [/*#__PURE__*/_jsx(CreateUI, {}), /*#__PURE__*/_jsxs(\"form\", {\n        onSubmit: sendChat,\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          ref: ref => setChild2(ref)\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"Submit\"\n        })]\n      }), [...gameEventData].map(e => {\n        if (typeof e === \"undefined\") {\n          return;\n        }\n\n        return /*#__PURE__*/_jsxs(\"h4\", {\n          style: {\n            color: \"white\"\n          },\n          children: [e.name, \" - \", e.event]\n        });\n      })]\n    }), (_ref = typeof recievedSeed === \"undefined\") !== null && _ref !== void 0 ? _ref : /*#__PURE__*/_jsx(\"h1\", {\n      children: \"LOADING SEED!\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: ref => setChild(ref)\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: ref => setChild(ref)\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}