{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from '../../Core-API/3dModelHandlers/utils';\nexport function GenerateTrees(_x, _x2, _x3, _x4, _x5) {\n  return _GenerateTrees.apply(this, arguments);\n}\n_c2 = GenerateTrees;\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene, start, bounds, terrain) {\n    var tree, snowyTree, palmTree, leaves, trunk, group, raycaster, trees, i, _intersects$, _intersects$2, _intersects$3, _intersects$4, _intersects$5, randomVector, intersects, newTree, point, _newTree, _point, _newTree2, _point2;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            _context.next = 5;\n            return addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n\n          case 5:\n            snowyTree = _context.sent;\n            _context.next = 8;\n            return addGLBFile(\"/Assets/Palm_Tree.glb\", scene);\n\n          case 8:\n            palmTree = _context.sent;\n            leaves = new MeshLambertMaterial({\n              color: 0x694b37\n            });\n            trunk = new MeshLambertMaterial({\n              color: 0x216734\n            });\n            tree.scene.children[0].material = leaves;\n            tree.scene.children[1].material = trunk;\n            snowyTree.scene.children[0].material = leaves;\n            snowyTree.scene.children[1].material = trunk;\n            snowyTree.scene.children[2].material = new MeshLambertMaterial({\n              color: 0xffffff\n            });\n            palmTree.scene.children[0].material = trunk;\n            group = new Group();\n            raycaster = new Raycaster();\n            trees = [];\n\n            for (i = 0; i < num; i++) {\n              randomVector = randomVectorBetweenPoints2D(start, bounds);\n              randomVector.y = 50;\n              raycaster.set(randomVector, new Vector3(0, -1, 0));\n              intersects = raycaster.intersectObjects([terrain]);\n\n              if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > 2 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n                newTree = tree.scene.clone();\n                newTree.rotateY(radiants(Math.random() * 360));\n                point = intersects[0].point;\n                newTree.position.set(point.x, point.y, point.z);\n                group.add(newTree);\n              } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) < 2 && ((_intersects$4 = intersects[0]) === null || _intersects$4 === void 0 ? void 0 : _intersects$4.point.y) > 0) {\n                _newTree = palmTree.scene.clone();\n\n                _newTree.rotateY(radiants(Math.random() * 360));\n\n                _point = intersects[0].point;\n\n                _newTree.position.set(_point.x, _point.y - 1, _point.z);\n\n                group.add(_newTree);\n              } else if (intersects[0] !== undefined && ((_intersects$5 = intersects[0]) === null || _intersects$5 === void 0 ? void 0 : _intersects$5.point.y) > 20) {\n                _newTree2 = snowyTree.scene.clone();\n\n                _newTree2.rotateY(radiants(Math.random() * 360));\n\n                _point2 = intersects[0].point;\n\n                _newTree2.position.set(_point2.x, _point2.y, _point2.z);\n\n                group.add(_newTree2);\n              }\n            }\n\n            scene.add(group);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}\n\n_c = GenerateTrees;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateTrees\");\n$RefreshReg$(_c2, \"GenerateTrees\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","BufferGeometryUtils","GenerateTrees","num","scene","start","bounds","terrain","tree","snowyTree","palmTree","leaves","color","trunk","children","material","group","raycaster","trees","i","randomVector","y","set","intersects","intersectObjects","undefined","point","newTree","clone","rotateY","Math","random","position","x","z","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshLambertMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { BufferGeometryUtils } from '../../Core-API/3dModelHandlers/utils'\n\nexport async function GenerateTrees(num, scene, start, bounds, terrain){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    let palmTree = await addGLBFile(\n        \"/Assets/Palm_Tree.glb\",\n        scene\n    )\n\n    let leaves = new MeshLambertMaterial({color: 0x694b37 })\n    let trunk = new MeshLambertMaterial({color: 0x216734 })\n    tree.scene.children[0].material = leaves\n    tree.scene.children[1].material = trunk\n    snowyTree.scene.children[0].material = leaves\n    snowyTree.scene.children[1].material = trunk\n    snowyTree.scene.children[2].material = new MeshLambertMaterial({color: 0xffffff })\n\n    palmTree.scene.children[0].material = trunk\n\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    let trees = []\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        raycaster.set(randomVector, new Vector3(0,-1,0))\n        const intersects = raycaster.intersectObjects( [terrain] );\n\n        \n\n        if(intersects[0] !== undefined && intersects[0]?.point.y > 2 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y < 2 && intersects[0]?.point.y > 0){\n            let newTree = palmTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y-1, point.z)\n            group.add(newTree)\n\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }\n        \n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}