{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { BoxGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport * as three from \"three\";\nlet GameCoreShadows = true; // TODO add to GUI\n\n/*eslint complexity: [\"error\", 20]*/\n\nexport function createGeo(type, data, pos, rot, mat, shadow) {\n  //Create type, using destructuring to pass in values\n  let geo = new three[`${type}`](...data); //Set Geo Position and Rotation\n\n  geo.position.set(pos);\n  geo.rotation.set(rot); //Create the Mesh\n\n  /*eslint new-cap: \"error\"*/\n\n  let mesh = new Mesh(geo, mat); //Handle Reciving shadows and casting\n\n  mesh.castShadow = shadow && GameCoreShadows ? true : false;\n  mesh.receiveShadow = shadow && GameCoreShadows ? true : false; //Return Mesh\n\n  return mesh;\n}\nexport function debugCube() {\n  const geometry = new BoxGeometry(1, 1, 1);\n  const material = new MeshBasicMaterial({\n    color: 0x00ff00\n  });\n  const cube = new Mesh(geometry, material);\n  return cube;\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/gemotryManager.js"],"names":["BoxGeometry","Mesh","MeshBasicMaterial","three","GameCoreShadows","createGeo","type","data","pos","rot","mat","shadow","geo","position","set","rotation","mesh","castShadow","receiveShadow","debugCube","geometry","material","color","cube"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,IAAtB,EAA4BC,iBAA5B,QAAqD,OAArD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,IAAIC,eAAe,GAAG,IAAtB,C,CAA4B;;AAE5B;;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,MAA9C,EAAsD;AACzD;AACA,MAAIC,GAAG,GAAG,IAAIT,KAAK,CAAE,GAAEG,IAAK,EAAT,CAAT,CAAqB,GAAGC,IAAxB,CAAV,CAFyD,CAIzD;;AACAK,EAAAA,GAAG,CAACC,QAAJ,CAAaC,GAAb,CAAiBN,GAAjB;AACAI,EAAAA,GAAG,CAACG,QAAJ,CAAaD,GAAb,CAAiBL,GAAjB,EANyD,CAQzD;;AACA;;AACA,MAAIO,IAAI,GAAG,IAAIf,IAAJ,CAASW,GAAT,EAAcF,GAAd,CAAX,CAVyD,CAYzD;;AACAM,EAAAA,IAAI,CAACC,UAAL,GAAkBN,MAAM,IAAIP,eAAV,GAA4B,IAA5B,GAAmC,KAArD;AACAY,EAAAA,IAAI,CAACE,aAAL,GAAqBP,MAAM,IAAIP,eAAV,GAA4B,IAA5B,GAAmC,KAAxD,CAdyD,CAgBzD;;AACA,SAAOY,IAAP;AACH;AAED,OAAO,SAASG,SAAT,GAAoB;AACvB,QAAMC,QAAQ,GAAG,IAAIpB,WAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAjB;AACA,QAAMqB,QAAQ,GAAG,IAAInB,iBAAJ,CAAuB;AAACoB,IAAAA,KAAK,EAAE;AAAR,GAAvB,CAAjB;AACA,QAAMC,IAAI,GAAG,IAAItB,IAAJ,CAAUmB,QAAV,EAAoBC,QAApB,CAAb;AACA,SAAOE,IAAP;AACH","sourcesContent":["// Written By Harvey Randall \\\\\nimport { BoxGeometry, Mesh, MeshBasicMaterial } from \"three\";\nimport * as three from \"three\";\nlet GameCoreShadows = true; // TODO add to GUI\n\n/*eslint complexity: [\"error\", 20]*/\nexport function createGeo(type, data, pos, rot, mat, shadow) {\n    //Create type, using destructuring to pass in values\n    let geo = new three[`${type}`](...data);\n\n    //Set Geo Position and Rotation\n    geo.position.set(pos);\n    geo.rotation.set(rot);\n\n    //Create the Mesh\n    /*eslint new-cap: \"error\"*/\n    let mesh = new Mesh(geo, mat);\n\n    //Handle Reciving shadows and casting\n    mesh.castShadow = shadow && GameCoreShadows ? true : false;\n    mesh.receiveShadow = shadow && GameCoreShadows ? true : false;\n\n    //Return Mesh\n    return mesh;\n}\n\nexport function debugCube(){\n    const geometry = new BoxGeometry( 1, 1, 1 );\n    const material = new MeshBasicMaterial( {color: 0x00ff00} );\n    const cube = new Mesh( geometry, material );\n    return cube\n}"]},"metadata":{},"sourceType":"module"}