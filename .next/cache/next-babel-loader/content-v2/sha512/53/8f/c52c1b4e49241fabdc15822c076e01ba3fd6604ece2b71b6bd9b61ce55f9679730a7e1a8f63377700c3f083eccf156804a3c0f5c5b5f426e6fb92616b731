{"ast":null,"code":"// Written By Harvey Randall \\\\\n// This file aims to make communicatiom between client and server a lot easier, using promise\n//-------------[   Imports   ]-------------\\\\\nimport { PriorityQueue } from \"../Algorithms/PriorityQueue\";\nimport * as Joi from \"joi\"; //-------------[Core Variables]-------------\\\\\n\nlet client;\nlet Queue = new PriorityQueue((a, b) => a.prority > b.prority);\n/**\n *  @param {string} socket - The socket io Client\n */\n\nexport function startSeverClientCommunication(socket) {\n  client = socket; //Data Handshake\n\n  client.emit(\"ConnectionEstablised\", Date.now());\n}\n/**\n *  @param {string} event - The Event name\n *  @param {array} data   - The data to send to the server\n */\n\nexport function sendDataWithPromise(event, data) {\n  //-------------[   Create a basic promise to return data   ]-------------\\\\\n  const DataPromise = new Promise((resolve, reject) => {\n    let resolved = false;\n\n    try {\n      client.emit(event, ...data);\n      client.on(event + \"_Callback\", () => {\n        resolved = true;\n        resolve(...arguments);\n      });\n    } catch (err) {\n      resolved = true;\n      reject(err);\n    }\n\n    setTimeout(() => {\n      if (resolved === false) {\n        resolved = true;\n        reject(\"No data returned within 2 seconds, is there a data callback?\");\n      }\n    }, 2000);\n  });\n  return DataPromise;\n}\n/**\n *  @param {string} event        - The Event name\n *  @param {function} callback   - The function that will be called with the data back\n */\n\nexport function listenToEvent(event, callback) {\n  // Attach event handle to functions\n  client.on(event, callback);\n}\n/**\n *  @param {function} callback   - The function that will listen to all events sent to the client\n */\n\nexport function attachToMainEventStream(callback) {\n  client.onAny((eventName, ...args) => {\n    callback(eventName, args);\n  });\n}\n/**\n *  @param {string} event        - The name of the event to listen to\n *  @param {scema} scema         - The data scheme to folow\n *  @param {function} callback   - The function that will be called with the data\n */\n\nexport async function listenForEventWithSchemaValidation(event, scema, callback) {\n  listenToEvent(event, args => {\n    const {\n      error,\n      value\n    } = scema.validate(args);\n\n    if (error) {\n      throw new Error(\"Scehma Check Failed\");\n    } else {\n      callback(value);\n      return value;\n    }\n  });\n}\nexport function addDataToQueue(event, data, callback, prority = 1) {\n  Queue.push({\n    prority,\n    input: [event, data, callback]\n  });\n} //-------------[   All Non essesntial communcation   ]-------------\\\\\n\nsetInterval(async () => {\n  if (!Queue.isEmpty()) {\n    let func = Queue.pop();\n    let input = func.input;\n    let callBack = input[2];\n\n    try {\n      //Destructure and send data\n      let data = await sendDataWithPromise(input[0], ...input[1]);\n      callBack(false, data);\n    } catch {\n      callBack(true, []);\n    }\n  }\n}, 500);","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/ConnectAPI.js"],"names":["PriorityQueue","Joi","client","Queue","a","b","prority","startSeverClientCommunication","socket","emit","Date","now","sendDataWithPromise","event","data","DataPromise","Promise","resolve","reject","resolved","on","arguments","err","setTimeout","listenToEvent","callback","attachToMainEventStream","onAny","eventName","args","listenForEventWithSchemaValidation","scema","error","value","validate","Error","addDataToQueue","push","input","setInterval","isEmpty","func","pop","callBack"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\n// This file aims to make communicatiom between client and server a lot easier, using promise\n\n//-------------[   Imports   ]-------------\\\\\nimport { PriorityQueue } from \"../Algorithms/PriorityQueue\";\nimport * as Joi from \"joi\";\n\n//-------------[Core Variables]-------------\\\\\nlet client;\nlet Queue = new PriorityQueue((a, b) => a.prority > b.prority);\n\n/**\n *  @param {string} socket - The socket io Client\n */\nexport function startSeverClientCommunication(socket) {\n  client = socket;\n\n  //Data Handshake\n  client.emit(\"ConnectionEstablised\", Date.now());\n}\n\n/**\n *  @param {string} event - The Event name\n *  @param {array} data   - The data to send to the server\n */\nexport function sendDataWithPromise(event, data) {\n  //-------------[   Create a basic promise to return data   ]-------------\\\\\n  const DataPromise = new Promise((resolve, reject) => {\n    let resolved = false;\n    try {\n      client.emit(event, ...data);\n\n      client.on(event + \"_Callback\", () => {\n        resolved = true;\n        resolve(...arguments);\n      });\n    } catch (err) {\n      resolved = true;\n      reject(err);\n    }\n    setTimeout(() => {\n      if (resolved === false) {\n        resolved = true;\n        reject(\"No data returned within 2 seconds, is there a data callback?\");\n      }\n    }, 2000);\n  });\n  return DataPromise;\n}\n\n/**\n *  @param {string} event        - The Event name\n *  @param {function} callback   - The function that will be called with the data back\n */\nexport function listenToEvent(event, callback) {\n  // Attach event handle to functions\n  client.on(event, callback);\n}\n\n/**\n *  @param {function} callback   - The function that will listen to all events sent to the client\n */\nexport function attachToMainEventStream(callback) {\n  client.onAny((eventName, ...args) => {\n    callback(eventName, args);\n  });\n}\n\n/**\n *  @param {string} event        - The name of the event to listen to\n *  @param {scema} scema         - The data scheme to folow\n *  @param {function} callback   - The function that will be called with the data\n */\nexport async function listenForEventWithSchemaValidation(\n  event,\n  scema,\n  callback\n) {\n  listenToEvent(event, (args) => {\n    const { error, value } = scema.validate(args);\n    if (error) {\n      throw new Error(\"Scehma Check Failed\");\n    } else {\n      callback(value);\n      return value;\n    }\n  });\n}\n\nexport function addDataToQueue(event, data, callback, prority = 1) {\n  Queue.push({ prority, input: [event, data, callback] });\n}\n\n//-------------[   All Non essesntial communcation   ]-------------\\\\\nsetInterval(async () => {\n  if (!Queue.isEmpty()) {\n    let func = Queue.pop();\n    let input = func.input;\n    let callBack = input[2];\n    try {\n      //Destructure and send data\n      let data = await sendDataWithPromise(input[0], ...input[1]);\n      callBack(false, data);\n    } catch {\n      callBack(true, []);\n    }\n  }\n}, 500);\n"]},"metadata":{},"sourceType":"module"}