{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { ReturnTerrainPointer } from \"../ProceduleTerrain\";\nexport function GenerateTrees(_x, _x2, _x3, _x4, _x5) {\n  return _GenerateTrees.apply(this, arguments);\n}\n_c2 = GenerateTrees;\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene, start, bounds, seed) {\n    var tree, snowyTree, group, raycaster, i, _intersects$, _intersects$2, _intersects$3, randomVector, intersects, newTree, point, _newTree, _point;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            _context.next = 5;\n            return addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n\n          case 5:\n            snowyTree = _context.sent;\n            tree.scene.children[0].material = new MeshStandardMaterial({\n              color: 0x694b37\n            });\n            tree.scene.children[1].material = new MeshStandardMaterial({\n              color: 0x216734\n            });\n            snowyTree.scene.children[0].material = new MeshStandardMaterial({\n              color: 0x694b37\n            });\n            snowyTree.scene.children[1].material = new MeshStandardMaterial({\n              color: 0x216734\n            });\n            snowyTree.scene.children[2].material = new MeshStandardMaterial({\n              color: 0xffffff\n            });\n            group = new Group();\n            raycaster = new Raycaster();\n\n            for (i = 0; i < num; i++) {\n              randomVector = randomVectorBetweenPoints2D(start, bounds);\n              randomVector.y = 50;\n              raycaster.set(randomVector, new Vector3(0, -1, 0));\n              intersects = raycaster.intersectObjects([ReturnTerrainPointer()]);\n\n              if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > -20 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n                newTree = tree.scene.clone();\n                newTree.rotateY(radiants(Math.random() * 360));\n                point = intersects[0].point;\n                newTree.position.set(point.x, point.y, point.z);\n                group.add(newTree);\n              } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) > 20) {\n                _newTree = snowyTree.scene.clone();\n\n                _newTree.rotateY(radiants(Math.random() * 360));\n\n                _point = intersects[0].point;\n\n                _newTree.position.set(_point.x, _point.y, _point.z);\n\n                group.add(_newTree);\n              }\n            }\n\n            scene.add(group);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}\n\n_c = GenerateTrees;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateTrees\");\n$RefreshReg$(_c2, \"GenerateTrees\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","ReturnTerrainPointer","GenerateTrees","num","scene","start","bounds","seed","tree","snowyTree","children","material","color","group","raycaster","i","randomVector","y","set","intersects","intersectObjects","undefined","point","newTree","clone","rotateY","Math","random","position","x","z","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { ReturnTerrainPointer } from \"../ProceduleTerrain\";\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    tree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    snowyTree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[2].material = new MeshStandardMaterial({color: 0xffffff })\n\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        raycaster.set(randomVector, new Vector3(0,-1,0))\n        const intersects = raycaster.intersectObjects( [ReturnTerrainPointer()] );\n        if(intersects[0] !== undefined && intersects[0]?.point.y > -20 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}