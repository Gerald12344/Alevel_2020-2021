{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Group, Raycaster } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nexport function GenerateTrees(_x, _x2, _x3, _x4, _x5) {\n  return _GenerateTrees.apply(this, arguments);\n}\n_c2 = GenerateTrees;\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene, start, bounds, seed) {\n    var tree, group, raycaster, i, newTree, randomVector;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            scene.add(tree.scene);\n            console.log(tree.scene.children);\n            tree.scene.children[0].material.color.setHex(0x694b37);\n            tree.scene.children[1].material.color.setHex(0x216734);\n            group = new Group();\n            raycaster = new Raycaster();\n\n            for (i = 0; i < num; i++) {\n              newTree = tree.scene.clone();\n              randomVector = new Vector3(Math.random() * 50, Math.random() * 50, Math.random() * 50);\n              raycaster.set();\n              newTree.rotateY(radiants(Math.random() * 360));\n              newTree.position.set(Math.random() * 50, Math.random() * 50, Math.random() * 50);\n              group.add(newTree);\n              console.log('here');\n            }\n\n            scene.add(group);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}\n\n_c = GenerateTrees;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateTrees\");\n$RefreshReg$(_c2, \"GenerateTrees\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["Group","Raycaster","radiants","addGLBFile","GenerateTrees","num","scene","start","bounds","seed","tree","add","console","log","children","material","color","setHex","group","raycaster","i","newTree","clone","randomVector","Vector3","Math","random","set","rotateY","position"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,UAAT,QAA2B,0CAA3B;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;MAAsBA,a;;;4EAAf,iBAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,MAAhD,EAAwDC,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcN,UAAU,CACvB,sBADuB,EAEvBG,KAFuB,CADxB;;AAAA;AACCI,YAAAA,IADD;AAKHJ,YAAAA,KAAK,CAACK,GAAN,CAAUD,IAAI,CAACJ,KAAf;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACJ,KAAL,CAAWQ,QAAvB;AACAJ,YAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,CAAgCC,KAAhC,CAAsCC,MAAtC,CAA8C,QAA9C;AACAP,YAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,CAAgCC,KAAhC,CAAsCC,MAAtC,CAA8C,QAA9C;AAEIC,YAAAA,KAVD,GAUS,IAAIlB,KAAJ,EAVT;AAWCmB,YAAAA,SAXD,GAWa,IAAIlB,SAAJ,EAXb;;AAYH,iBAAQmB,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACf,GAAd,EAAkBe,CAAC,EAAnB,EAAsB;AACdC,cAAAA,OADc,GACJX,IAAI,CAACJ,KAAL,CAAWgB,KAAX,EADI;AAEdC,cAAAA,YAFc,GAEC,IAAIC,OAAJ,CAAYC,IAAI,CAACC,MAAL,KAAc,EAA1B,EAA6BD,IAAI,CAACC,MAAL,KAAc,EAA3C,EAA+CD,IAAI,CAACC,MAAL,KAAc,EAA7D,CAFD;AAIlBP,cAAAA,SAAS,CAACQ,GAAV;AAEAN,cAAAA,OAAO,CAACO,OAAR,CAAgB1B,QAAQ,CAACuB,IAAI,CAACC,MAAL,KAAc,GAAf,CAAxB;AACAL,cAAAA,OAAO,CAACQ,QAAR,CAAiBF,GAAjB,CAAqBF,IAAI,CAACC,MAAL,KAAc,EAAnC,EAAsCD,IAAI,CAACC,MAAL,KAAc,EAApD,EAAwDD,IAAI,CAACC,MAAL,KAAc,EAAtE;AACAR,cAAAA,KAAK,CAACP,GAAN,CAAUU,OAAV;AACAT,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AACDP,YAAAA,KAAK,CAACK,GAAN,CAAUO,KAAV;;AAvBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAed,a","sourcesContent":["import { Group, Raycaster } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    scene.add(tree.scene)\n    console.log(tree.scene.children)\n    tree.scene.children[0].material.color.setHex( 0x694b37 );\n    tree.scene.children[1].material.color.setHex( 0x216734 );\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    for(let i=0;i<num;i++){\n        let newTree = tree.scene.clone()\n        let randomVector = new Vector3(Math.random()*50,Math.random()*50, Math.random()*50)\n\n        raycaster.set()\n\n        newTree.rotateY(radiants(Math.random()*360))\n        newTree.position.set(Math.random()*50,Math.random()*50, Math.random()*50)\n        group.add(newTree)\n        console.log('here')\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}