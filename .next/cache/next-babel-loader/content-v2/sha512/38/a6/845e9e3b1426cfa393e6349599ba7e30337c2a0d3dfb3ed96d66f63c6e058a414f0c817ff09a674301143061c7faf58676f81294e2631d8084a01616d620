{"ast":null,"code":"import _construct from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// Written By Harvey Randall \\\\\nimport { Mesh } from \"three\";\nimport * as three from \"three\";\nvar GameCoreShadows = true; // TODO add to GUI\n\n/*eslint complexity: [\"error\", 20]*/\n\nexport function createGeo(type, data, pos, rot, mat, shadow) {\n  //Create type, using destructuring to pass in values\n  var geo = _construct(three[\"\".concat(type)], _toConsumableArray(data)); //Set Geo Position and Rotation\n\n\n  geo.position.set(pos);\n  geo.rotation.set(rot); //Create the Mesh\n\n  /*eslint new-cap: \"error\"*/\n\n  var mesh = new Mesh(geo, mat); //Handle Reciving shadows and casting\n\n  mesh.castShadow = shadow && GameCoreShadows ? true : false;\n  mesh.receiveShadow = shadow && GameCoreShadows ? true : false; //Return Mesh\n\n  return mesh;\n}\nexport function debugCube() {\n  var geometry = new THREE.BoxGeometry(1, 1, 1);\n  var material = new THREE.MeshBasicMaterial({\n    color: 0x00ff00\n  });\n  var cube = new THREE.Mesh(geometry, material);\n  return cube;\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/gemotryManager.js"],"names":["Mesh","three","GameCoreShadows","createGeo","type","data","pos","rot","mat","shadow","geo","position","set","rotation","mesh","castShadow","receiveShadow","debugCube","geometry","THREE","BoxGeometry","material","MeshBasicMaterial","color","cube"],"mappings":";;AAAA;AACA,SAASA,IAAT,QAAqB,OAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,IAAIC,eAAe,GAAG,IAAtB,C,CAA4B;;AAE5B;;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,GAA/B,EAAoCC,GAApC,EAAyCC,GAAzC,EAA8CC,MAA9C,EAAsD;AACzD;AACA,MAAIC,GAAG,cAAOT,KAAK,WAAIG,IAAJ,EAAZ,qBAA2BC,IAA3B,EAAP,CAFyD,CAIzD;;;AACAK,EAAAA,GAAG,CAACC,QAAJ,CAAaC,GAAb,CAAiBN,GAAjB;AACAI,EAAAA,GAAG,CAACG,QAAJ,CAAaD,GAAb,CAAiBL,GAAjB,EANyD,CAQzD;;AACA;;AACA,MAAIO,IAAI,GAAG,IAAId,IAAJ,CAASU,GAAT,EAAcF,GAAd,CAAX,CAVyD,CAYzD;;AACAM,EAAAA,IAAI,CAACC,UAAL,GAAkBN,MAAM,IAAIP,eAAV,GAA4B,IAA5B,GAAmC,KAArD;AACAY,EAAAA,IAAI,CAACE,aAAL,GAAqBP,MAAM,IAAIP,eAAV,GAA4B,IAA5B,GAAmC,KAAxD,CAdyD,CAgBzD;;AACA,SAAOY,IAAP;AACH;AAED,OAAO,SAASG,SAAT,GAAoB;AACvB,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAACC,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAjB;AACA,MAAMC,QAAQ,GAAG,IAAIF,KAAK,CAACG,iBAAV,CAA6B;AAACC,IAAAA,KAAK,EAAE;AAAR,GAA7B,CAAjB;AACA,MAAMC,IAAI,GAAG,IAAIL,KAAK,CAACnB,IAAV,CAAgBkB,QAAhB,EAA0BG,QAA1B,CAAb;AACA,SAAOG,IAAP;AACH","sourcesContent":["// Written By Harvey Randall \\\\\nimport { Mesh } from \"three\";\nimport * as three from \"three\";\nlet GameCoreShadows = true; // TODO add to GUI\n\n/*eslint complexity: [\"error\", 20]*/\nexport function createGeo(type, data, pos, rot, mat, shadow) {\n    //Create type, using destructuring to pass in values\n    let geo = new three[`${type}`](...data);\n\n    //Set Geo Position and Rotation\n    geo.position.set(pos);\n    geo.rotation.set(rot);\n\n    //Create the Mesh\n    /*eslint new-cap: \"error\"*/\n    let mesh = new Mesh(geo, mat);\n\n    //Handle Reciving shadows and casting\n    mesh.castShadow = shadow && GameCoreShadows ? true : false;\n    mesh.receiveShadow = shadow && GameCoreShadows ? true : false;\n\n    //Return Mesh\n    return mesh;\n}\n\nexport function debugCube(){\n    const geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    const material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\n    const cube = new THREE.Mesh( geometry, material );\n    return cube\n}"]},"metadata":{},"sourceType":"module"}