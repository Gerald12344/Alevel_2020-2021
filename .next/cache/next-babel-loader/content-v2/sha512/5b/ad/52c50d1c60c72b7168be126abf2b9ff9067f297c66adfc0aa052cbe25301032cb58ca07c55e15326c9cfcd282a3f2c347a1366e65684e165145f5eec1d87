{"ast":null,"code":"import { GLTFLoader } from \"./glbCore\";\nexport async function addGLBFile(item, scene) {\n  const loader = new GLTFLoader();\n  let gltfModel;\n  await loader.load( // resource URL\n  item, // called when the resource is loaded\n  function (gltf) {\n    scene.add(gltf.scene);\n    gltf.animations;\n    gltf.scene;\n    gltf.scenes;\n    gltf.cameras;\n    gltf.asset;\n    gltfModel = gltf;\n  }, // called while loading is progressing\n  function (xhr) {\n    console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n  }, // called when loading has errors\n  function (error) {\n    console.log(\"An error happened\");\n  });\n  return gltfModel;\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/3dModelHandlers/GLBLoader.js"],"names":["GLTFLoader","addGLBFile","item","scene","loader","gltfModel","load","gltf","add","animations","scenes","cameras","asset","xhr","console","log","loaded","total","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,WAA3B;AAEA,OAAO,eAAeC,UAAf,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,MAAM,GAAG,IAAIJ,UAAJ,EAAf;AACA,MAAIK,SAAJ;AACA,QAAMD,MAAM,CAACE,IAAP,EACF;AACAJ,EAAAA,IAFE,EAGF;AACA,YAAUK,IAAV,EAAgB;AACZJ,IAAAA,KAAK,CAACK,GAAN,CAAUD,IAAI,CAACJ,KAAf;AAEAI,IAAAA,IAAI,CAACE,UAAL;AACAF,IAAAA,IAAI,CAACJ,KAAL;AACAI,IAAAA,IAAI,CAACG,MAAL;AACAH,IAAAA,IAAI,CAACI,OAAL;AACAJ,IAAAA,IAAI,CAACK,KAAL;AACAP,IAAAA,SAAS,GAAGE,IAAZ;AACH,GAbC,EAcF;AACA,YAAUM,GAAV,EAAe;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAaF,GAAG,CAACG,MAAJ,GAAaH,GAAG,CAACI,KAAlB,GAA2B,GAA3B,GAAiC,UAA7C;AACH,GAjBC,EAkBF;AACA,YAAUC,KAAV,EAAiB;AACbJ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GArBC,CAAN;AAuBA,SAAOV,SAAP;AACH","sourcesContent":["import { GLTFLoader } from \"./glbCore\";\n\nexport async function addGLBFile(item, scene) {\n    const loader = new GLTFLoader();\n    let gltfModel \n    await loader.load(\n        // resource URL\n        item,\n        // called when the resource is loaded\n        function (gltf) {\n            scene.add(gltf.scene);\n\n            gltf.animations;\n            gltf.scene;\n            gltf.scenes;\n            gltf.cameras;\n            gltf.asset;\n            gltfModel = gltf\n        },\n        // called while loading is progressing\n        function (xhr) {\n            console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        function (error) {\n            console.log(\"An error happened\");\n        }\n    );\n    return gltfModel\n}\n"]},"metadata":{},"sourceType":"module"}