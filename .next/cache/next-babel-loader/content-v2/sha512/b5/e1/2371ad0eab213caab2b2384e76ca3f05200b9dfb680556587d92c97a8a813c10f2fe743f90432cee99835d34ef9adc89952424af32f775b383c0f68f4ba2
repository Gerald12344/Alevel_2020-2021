{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Group, MeshPhongMaterial, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { wait } from \"../../Algorithms/MathUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { attachToMainEventStream } from \"../../Core-API/ConnectAPI\";\nimport { debugCube } from \"../../Core-API/gemotryManager\";\nimport { createPointLight } from \"../../Core-API/LightingManager\";\nimport { addToRenderSequence } from \"../../Core-API/RenderingHandler\";\nimport { listenToConrols } from \"../controls\";\nimport { addtoDayTimeChecker, getDayState, removeFromDayTimeHook } from \"../DayNightCycle\";\nexport var MakePlane = /*#__PURE__*/function () {\n  function MakePlane(SceneToGet, settings) {\n    _classCallCheck(this, MakePlane);\n\n    this.SceneToGet = SceneToGet;\n    this.settings = settings;\n    this.group = new Group();\n    this.speed = 0;\n    this.elevatorPitch = 0;\n    this.airelonePitch = 0;\n    this.rudderPitch = 0;\n    this.checker = -1;\n  }\n\n  _createClass(MakePlane, [{\n    key: \"loadFiles\",\n    value: function () {\n      var _loadFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return addGLBFile(\"/Aircraft/BasicPlane/Plane.glb\", this.SceneToGet);\n\n              case 2:\n                this.plane = _context.sent;\n                _context.next = 5;\n                return addGLBFile(\"/Aircraft/BasicPlane/Blades.glb\", this.SceneToGet);\n\n              case 5:\n                this.props = _context.sent;\n                _context.next = 8;\n                return addGLBFile(\"/Aircraft/BasicPlane/LeftAirelone.glb\", this.SceneToGet);\n\n              case 8:\n                this.leftAirelone = _context.sent;\n                _context.next = 11;\n                return addGLBFile(\"/Aircraft/BasicPlane/RightAirelone.glb\", this.SceneToGet);\n\n              case 11:\n                this.rightAirelone = _context.sent;\n                _context.next = 14;\n                return addGLBFile(\"/Aircraft/BasicPlane/LeftWingControlsSurface.glb\", this.SceneToGet);\n\n              case 14:\n                this.leftControlSurface = _context.sent;\n                _context.next = 17;\n                return addGLBFile(\"/Aircraft/BasicPlane/RightWingControlsSurface.glb\", this.SceneToGet);\n\n              case 17:\n                this.rightControlSurface = _context.sent;\n                _context.next = 20;\n                return addGLBFile(\"/Aircraft/BasicPlane/Rudder.glb\", this.SceneToGet);\n\n              case 20:\n                this.rudder = _context.sent;\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadFiles() {\n        return _loadFiles.apply(this, arguments);\n      }\n\n      return loadFiles;\n    }()\n  }, {\n    key: \"CreateGroupAndPos\",\n    value: function CreateGroupAndPos() {\n      var _this = this;\n\n      this.group.add(this.plane.scene);\n      this.group.add(this.props.scene);\n      this.group.add(this.leftAirelone.scene);\n      this.group.add(this.rightAirelone.scene);\n      this.group.add(this.rightControlSurface.scene);\n      this.group.add(this.leftControlSurface.scene);\n      this.group.add(this.rudder.scene);\n      this.leftAirelone.scene.position.set(12.936, 15.994, -59.264);\n      this.rightAirelone.scene.position.set(-12.495, 15.888, -59.294);\n      this.leftControlSurface.scene.position.set(46.243, 22.536, -13.541);\n      this.leftControlSurface.scene.rotateY(radiants(-7));\n      this.rightControlSurface.scene.position.set(-46.2718, 22.5411, -13.5447);\n      this.rightControlSurface.scene.rotateY(radiants(6.8));\n      this.rightControlSurface.scene.rotateZ(radiants(-3.5)); //this.rightControlSurface.scene.rotateX(radiants(183.57))\n\n      this.rudder.scene.position.set(-0.022, 24.67, -68.17);\n      this.rudder.scene.rotateX(radiants(-22));\n      this.props.scene.position.set(0, 15, 22);\n      this.SceneToGet.add(this.group);\n      this.group.scale.set(0.05, 0.05, 0.05);\n      var _ref = [this.props.scene, this.leftAirelone.scene],\n          props = _ref[0],\n          leftAirelone = _ref[1]; // For testing \\\\\n\n      var light = createPointLight(0xff0000, 3, [60, 22.5, -10], 2.5);\n      var light2 = createPointLight(0x00ff00, 3, [-60, 22.5, -10], 2.5);\n      var whiteLight = createPointLight(0xffffff, 3, [0, 30, -60], 2.5);\n      var day = true;\n      this.group.add(light);\n      this.group.add(light2);\n      setInterval(function () {\n        console.log(getDayState());\n\n        if (getDayState() === false && day === true) {\n          day = false;\n\n          _this.group.add(light);\n\n          _this.group.add(light2);\n        } else if (getDayState() === true && day === false) {\n          day = true;\n\n          _this.group.remove(light);\n\n          _this.group.remove(light2);\n        }\n      }, 1000);\n      var currentEvelatorPitch = 0;\n      var airelonePitch = 0;\n      var rudderPitch = 0;\n      addToRenderSequence(\"Main\", function () {\n        var direction = new Vector3();\n\n        _this.group.getWorldDirection(direction);\n\n        _this.group.position.add(direction.multiplyScalar(_this.speed)); //this.group.position.z += this.speed;\n\n\n        props.rotateZ(_this.speed);\n\n        if (currentEvelatorPitch < _this.elevatorPitch) {\n          _this.leftAirelone.scene.rotateX(-0.01);\n\n          _this.rightAirelone.scene.rotateX(-0.01);\n\n          currentEvelatorPitch += 0.01; //if(this.speed < 0.4)return\n\n          _this.group.rotateX(currentEvelatorPitch / 50 * _this.speed);\n        } else if (currentEvelatorPitch > _this.elevatorPitch) {\n          _this.leftAirelone.scene.rotateX(0.01);\n\n          _this.rightAirelone.scene.rotateX(0.01);\n\n          currentEvelatorPitch -= 0.01; //if(this.speed < 0.4)return\n\n          _this.group.rotateX(currentEvelatorPitch / 50 * _this.speed);\n        }\n\n        if (airelonePitch < _this.airelonePitch) {\n          _this.leftControlSurface.scene.rotateX(0.01);\n\n          _this.rightControlSurface.scene.rotateX(-0.01);\n\n          airelonePitch += 0.01; //if(this.speed < 0.4)return\n\n          _this.group.rotateZ(-airelonePitch / 50 * _this.speed);\n        } else if (airelonePitch > _this.airelonePitch) {\n          _this.leftControlSurface.scene.rotateX(-0.01);\n\n          _this.rightControlSurface.scene.rotateX(0.01);\n\n          airelonePitch -= 0.01; //if(this.speed < 0.4)return\n\n          _this.group.rotateZ(-airelonePitch / 50 * _this.speed);\n        }\n\n        if (rudderPitch < _this.rudderPitch) {\n          _this.rudder.scene.rotateY(-0.01);\n\n          rudderPitch += 0.01; //if(this.speed < 0.4)return\n\n          _this.group.rotateY(rudderPitch / 50 * _this.speed);\n        } else if (rudderPitch > _this.rudderPitch) {\n          _this.rudder.scene.rotateY(0.01);\n\n          rudderPitch -= 0.01; //if(this.speed < 0.4)return\n\n          _this.group.rotateY(rudderPitch / 50 * _this.speed);\n        }\n      }, false);\n      return this.group;\n    }\n  }, {\n    key: \"attachCameraAndControl\",\n    value: function attachCameraAndControl(Camera) {\n      var _this2 = this;\n\n      this.UUID = listenToConrols(function (_ref2) {\n        var wKey = _ref2.wKey,\n            aKey = _ref2.aKey,\n            sKey = _ref2.sKey,\n            dKey = _ref2.dKey,\n            upKey = _ref2.upKey,\n            downKey = _ref2.downKey,\n            eKey = _ref2.eKey,\n            qKey = _ref2.qKey,\n            shiftKey = _ref2.shiftKey,\n            zKey = _ref2.zKey,\n            xKey = _ref2.xKey;\n\n        if (zKey) {\n          if (_this2.speed < 3) {\n            _this2.speed += 0.01;\n          }\n        }\n\n        if (xKey) {\n          if (_this2.speed > 0) {\n            _this2.speed -= 0.01;\n          }\n        }\n\n        if (wKey) {\n          _this2.elevatorPitch = 0.5;\n        } else if (sKey) {\n          _this2.elevatorPitch = -0.5;\n        } else {\n          _this2.elevatorPitch = 0;\n        }\n\n        if (qKey) {\n          _this2.rudderPitch = 0.3;\n        } else if (eKey) {\n          _this2.rudderPitch = -0.3;\n        } else {\n          _this2.rudderPitch = 0;\n        }\n\n        if (aKey) {\n          _this2.airelonePitch = 0.5;\n        } else if (dKey) {\n          _this2.airelonePitch = -0.5;\n        } else {\n          _this2.airelonePitch = 0;\n        }\n      });\n      this.group.add(Camera);\n      Camera.position.set(0, 40, -100);\n      Camera.rotateY(radiants(180));\n      Camera.rotateX(radiants(-20));\n    }\n  }, {\n    key: \"cleanUp\",\n    value: function cleanUp() {\n      if (this.UUID !== undefined) {\n        CleanUpListener(this.UUID);\n      }\n\n      this.group.remove();\n\n      if (this.checker !== -1) {\n        removeFromDayTimeHook(this.checker);\n      }\n\n      return {\n        success: true\n      };\n    }\n  }]);\n\n  return MakePlane;\n}();","map":null,"metadata":{},"sourceType":"module"}