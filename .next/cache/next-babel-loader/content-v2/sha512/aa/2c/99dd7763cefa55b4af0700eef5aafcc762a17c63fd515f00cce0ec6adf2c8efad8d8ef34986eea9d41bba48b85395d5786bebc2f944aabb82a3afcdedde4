{"ast":null,"code":"import _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Written By Harvey Randall \\\\\nimport { Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three'; // Randomly delplace cloud verticies\n\nvar map = function map(val, smin, smax, emin, emax) {\n  return (emax - emin) * (val - smin) / (smax - smin) + emin;\n};\n\nvar jitter = function jitter(geometry, per) {\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    geometry.attributes.position.array[i * 3] += map(Math.random(), 0, 1, -per, per);\n    geometry.attributes.position.array[i * 3 + 1] += map(Math.random(), 0, 1, -per, per);\n    geometry.attributes.position.array[i * 3 + 2] += map(Math.random(), 0, 1, -per, per);\n  }\n\n  ;\n};\n\nexport var GenerateClouds = /*#__PURE__*/function () {\n  function GenerateClouds(pos, scene, speed, scale) {\n    _classCallCheck(this, GenerateClouds);\n\n    var group = new Group();\n    var tuft1 = new SphereBufferGeometry(1.5 * scale, 7, 11);\n    tuft1.translate(-2 * scale, 0, 0);\n    var tuft3 = new SphereBufferGeometry(1.5 * scale, 7, 11);\n    tuft3.translate(2 * scale, 0, 0);\n    var tuft2 = new SphereBufferGeometry(2.0 * scale, 7, 11);\n    tuft2.translate(0, 0, 0);\n    jitter(tuft1, 0.01);\n    var mat = new MeshPhongMaterial({\n      color: 'white',\n      flatShading: true\n    });\n    var cloud = new Mesh(tuft1, mat);\n    var cloud1 = new Mesh(tuft2, mat);\n    var cloud2 = new Mesh(tuft3, mat);\n    group.add(cloud);\n    group.add(cloud1);\n    group.add(cloud2);\n    scene.add(group);\n    group.castShadow = true;\n    group.receiveShadow = true;\n    group.position.x = pos.x;\n    group.position.y = pos.y;\n    group.position.z = pos.z;\n    this.grass = group;\n    this.speed = speed;\n    this.pos = pos;\n  }\n\n  _createClass(GenerateClouds, [{\n    key: \"update\",\n    value: function update() {\n      var geos = this.grass;\n      geos.position.x += this.speed;\n\n      if (geos.position.x > 400) {\n        geos.position.x = this.pos.x;\n      }\n    }\n  }]);\n\n  return GenerateClouds;\n}();","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/clouds.js"],"names":["Group","Mesh","MeshPhongMaterial","SphereBufferGeometry","map","val","smin","smax","emin","emax","jitter","geometry","per","i","l","attributes","position","count","array","Math","random","GenerateClouds","pos","scene","speed","scale","group","tuft1","translate","tuft3","tuft2","mat","color","flatShading","cloud","cloud1","cloud2","add","castShadow","receiveShadow","x","y","z","grass","geos"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three';\n\n\n// Randomly delplace cloud verticies\nconst map = (val, smin, smax, emin, emax) => (emax - emin) * (val - smin) / (smax - smin) + emin\nconst jitter = (geometry, per) => {\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        geometry.attributes.position.array[(i * 3)] += map(Math.random(), 0, 1, -per, per)\n        geometry.attributes.position.array[(i * 3) + 1] += map(Math.random(), 0, 1, -per, per)\n        geometry.attributes.position.array[(i * 3) + 2] += map(Math.random(), 0, 1, -per, per)\n    };\n}\n\nexport class GenerateClouds {\n    constructor(pos, scene, speed, scale) {\n\n\n        const group = new Group();\n\n        const tuft1 = new SphereBufferGeometry(1.5 * scale, 7, 11)\n        tuft1.translate(-2 * scale, 0, 0)\n\n\n        const tuft3 = new SphereBufferGeometry(1.5 * scale, 7, 11)\n        tuft3.translate(2 * scale, 0, 0)\n\n        const tuft2 = new SphereBufferGeometry(2.0 * scale, 7, 11)\n        tuft2.translate(0, 0, 0)\n\n        jitter(tuft1, 0.01)\n\n\n        const mat = new MeshPhongMaterial({\n            color: 'white',\n            flatShading: true,\n        })\n\n        let cloud = new Mesh(\n            tuft1,\n            mat\n        )\n        let cloud1 = new Mesh(\n            tuft2,\n            mat\n        )\n        let cloud2 = new Mesh(\n            tuft3,\n            mat\n        )\n\n        group.add(cloud)\n        group.add(cloud1)\n        group.add(cloud2)\n\n        scene.add(group)\n        group.castShadow = true\n        group.receiveShadow = true\n        group.position.x = pos.x\n        group.position.y = pos.y\n        group.position.z = pos.z\n\n        this.grass = group\n        this.speed = speed\n        this.pos = pos\n    }\n\n    update() {\n        let geos = this.grass\n        geos.position.x += this.speed\n        if (geos.position.x > 400) {\n            geos.position.x = this.pos.x\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}