{"ast":null,"code":"import { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector2, Vector3 } from \"three\";\nimport { radiants } from \"../components/Algorithms/degToRad\";\nimport * as SimplexNoise from 'simplex-noise';\nimport { randomIntFromInterval } from \"../components/Algorithms/VectorUtils\";\nexport function createOcean(scene) {\n  let plane = new PlaneBufferGeometry(500, 500, 100, 100); //const material = new MeshPhongMaterial( {color: 0x0077be, flatShading:true} );\n\n  let noiseMap = new SimplexNoise(`${Math.random()}`);\n  let offset = 10;\n  let Position = new Vector2(0, 0);\n  let gain = 0.75;\n  let colours = [];\n  let startTime = 0;\n\n  let init = () => {\n    startTime++;\n    const positionAttribute = plane.getAttribute(\"position\"); //------------[Edit the Geomtry Accordingly]------------\\\\\n\n    for (var i = 0, l = plane.attributes.position.count; i < l; i++) {\n      // Get Data position\n      const vertex = new Vector3();\n      vertex.fromBufferAttribute(positionAttribute, i); // Check Height from Perlin Noise Generator\n      //let height = noiseMap.noise2D(vertex.x+(Position.x)+offset, vertex.y-(Position.y)+offset) * gain\n\n      let height = noiseMap.noise2D(vertex.x / 10 + startTime, vertex.y / 10 + startTime) * gain; // Set the height accordingly\n\n      plane.attributes.position.array[i * 3 + 2] = height;\n      console.log(height); // Update Vertice colours accordinly\n\n      if (height > 0.4) {\n        colours.push(0, 0.567, 0.845);\n      } else {\n        //randomIntFromInterval\n        colours.push(0, randomIntFromInterval(400, 500) / 1000, randomIntFromInterval(700, 800) / 1000);\n      }\n    } //mesh.updateMatrix()\n\n  };\n\n  init();\n  setInterval(init(), 1000); //------------[Create Material]------------\\\\\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Edit colour attribute]------------\\\\\n\n  plane.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3));\n  let mesh = new Mesh(plane, material);\n  mesh.position.y = -2;\n  mesh.rotateX(radiants(-90));\n  scene.add(mesh);\n}","map":null,"metadata":{},"sourceType":"module"}