{"ast":null,"code":"import { Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector2, Vector3 } from \"three\";\nimport { radiants } from \"../components/Algorithms/degToRad\";\nimport * as SimplexNoise from 'simplex-noise';\nexport function createOcean(scene) {\n  var plane = new PlaneBufferGeometry(500, 500, 50);\n  var material = new MeshPhongMaterial({\n    color: 0x006994\n  });\n  var noiseMap = new SimplexNoise(\"\".concat(Math.random()));\n  mesh.rotateX(radiants(-90));\n  var offset = 10;\n  var Position = new Vector2(0, 0);\n  var gain = 5;\n  setInterval(function () {\n    var positionAttribute = plane.getAttribute(\"position\"); //------------[Edit the Geomtry Accordingly]------------\\\\\n\n    for (var i = 0, l = plane.attributes.position.count; i < l; i++) {\n      // Get Data position\n      var vertex = new Vector3();\n      vertex.fromBufferAttribute(positionAttribute, i); // Check Height from Perlin Noise Generator\n      //let height = noiseMap.noise2D(vertex.x+(Position.x)+offset, vertex.y-(Position.y)+offset) * gain\n\n      var height = noiseMap.noise2D(vertex.x, vertex.y) * gain; // Set the height accordingly\n\n      console.log(height);\n      plane.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n      /*\n      if (height > 43) {\n          colours.push(1, 1, 1);\n      } else if (height > 5) {\n          colours.push(0.56, 0.54, 0.48);\n      } else if (height < -20) {\n          colours.push(0.501, 0.772, 0.87);\n      } else {\n          colours.push(0.56, 0.68, 0.166);\n      }*/\n    }\n\n    var mesh = new Mesh(plane, material);\n    mesh.updateMatrix();\n    scene.add(mesh);\n  }, 1000);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/testing/ocean.js"],"names":["Mesh","MeshPhongMaterial","PlaneBufferGeometry","Vector2","Vector3","radiants","SimplexNoise","createOcean","scene","plane","material","color","noiseMap","Math","random","mesh","rotateX","offset","Position","gain","setInterval","positionAttribute","getAttribute","i","l","attributes","position","count","vertex","fromBufferAttribute","height","noise2D","x","y","console","log","array","updateMatrix","add"],"mappings":"AAAA,SAASA,IAAT,EAAeC,iBAAf,EAAkCC,mBAAlC,EAAuDC,OAAvD,EAAgEC,OAAhE,QAA+E,OAA/E;AACA,SAASC,QAAT,QAAyB,mCAAzB;AACA,OAAO,KAAKC,YAAZ,MAA8B,eAA9B;AAGA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAC9B,MAAIC,KAAK,GAAG,IAAIP,mBAAJ,CAAwB,GAAxB,EAA4B,GAA5B,EAAiC,EAAjC,CAAZ;AAEA,MAAMQ,QAAQ,GAAG,IAAIT,iBAAJ,CAAuB;AAACU,IAAAA,KAAK,EAAE;AAAR,GAAvB,CAAjB;AAGA,MAAIC,QAAQ,GAAG,IAAIN,YAAJ,WAAoBO,IAAI,CAACC,MAAL,EAApB,EAAf;AAEAC,EAAAA,IAAI,CAACC,OAAL,CAAaX,QAAQ,CAAC,CAAC,EAAF,CAArB;AAEA,MAAIY,MAAM,GAAG,EAAb;AAEA,MAAIC,QAAQ,GAAG,IAAIf,OAAJ,CAAY,CAAZ,EAAc,CAAd,CAAf;AAEA,MAAIgB,IAAI,GAAG,CAAX;AAEAC,EAAAA,WAAW,CAAC,YAAM;AACd,QAAMC,iBAAiB,GAAGZ,KAAK,CAACa,YAAN,CAAmB,UAAnB,CAA1B,CADc,CAEd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGf,KAAK,CAACgB,UAAN,CAAiBC,QAAjB,CAA0BC,KAA9C,EAAqDJ,CAAC,GAAGC,CAAzD,EAA4DD,CAAC,EAA7D,EAAiE;AAC7D;AACA,UAAMK,MAAM,GAAG,IAAIxB,OAAJ,EAAf;AACAwB,MAAAA,MAAM,CAACC,mBAAP,CAA2BR,iBAA3B,EAA8CE,CAA9C,EAH6D,CAK7D;AAEA;;AACA,UAAIO,MAAM,GAAGlB,QAAQ,CAACmB,OAAT,CAAiBH,MAAM,CAACI,CAAxB,EAA2BJ,MAAM,CAACK,CAAlC,IAAuCd,IAApD,CAR6D,CAU7D;;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACArB,MAAAA,KAAK,CAACgB,UAAN,CAAiBC,QAAjB,CAA0BU,KAA1B,CAAgCb,CAAC,GAAG,CAAJ,GAAQ,CAAxC,IAA6CO,MAA7C,CAZ6D,CAc7D;;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS;;AACD,QAAIf,IAAI,GAAG,IAAIf,IAAJ,CAASS,KAAT,EAAgBC,QAAhB,CAAX;AACAK,IAAAA,IAAI,CAACsB,YAAL;AAEA7B,IAAAA,KAAK,CAAC8B,GAAN,CAAUvB,IAAV;AAEH,GAlCU,EAkCR,IAlCQ,CAAX;AAsCH","sourcesContent":["import { Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector2, Vector3 } from \"three\";\nimport { radiants } from \"../components/Algorithms/degToRad\"\nimport * as SimplexNoise from 'simplex-noise'\n\n\nexport function createOcean(scene){\n    let plane = new PlaneBufferGeometry(500,500, 50)\n\n    const material = new MeshPhongMaterial( {color: 0x006994} );\n\n\n    let noiseMap = new SimplexNoise(`${Math.random()}`)\n\n    mesh.rotateX(radiants(-90))\n\n    let offset = 10\n\n    let Position = new Vector2(0,0)\n\n    let gain = 5\n\n    setInterval(() => {\n        const positionAttribute = plane.getAttribute(\"position\");\n        //------------[Edit the Geomtry Accordingly]------------\\\\\n        for (var i = 0, l = plane.attributes.position.count; i < l; i++) {\n            // Get Data position\n            const vertex = new Vector3();\n            vertex.fromBufferAttribute(positionAttribute, i);\n\n            // Check Height from Perlin Noise Generator\n            \n            //let height = noiseMap.noise2D(vertex.x+(Position.x)+offset, vertex.y-(Position.y)+offset) * gain\n            let height = noiseMap.noise2D(vertex.x, vertex.y) * gain\n            \n            // Set the height accordingly\n            console.log(height)\n            plane.attributes.position.array[i * 3 + 2] = height;\n\n            // Update Vertice colours accordinly\n            /*\n            if (height > 43) {\n                colours.push(1, 1, 1);\n            } else if (height > 5) {\n                colours.push(0.56, 0.54, 0.48);\n            } else if (height < -20) {\n                colours.push(0.501, 0.772, 0.87);\n            } else {\n                colours.push(0.56, 0.68, 0.166);\n            }*/\n        }\n        let mesh = new Mesh(plane, material)\n        mesh.updateMatrix()\n\n        scene.add(mesh)\n\n    }, 1000)\n\n\n\n}"]},"metadata":{},"sourceType":"module"}