{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry } from \"three\";\nexport function GenerateTerrain(seed, SceneToGet) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  var simplex = new SimplexNoise(seed);\n  var geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  var colours = []; //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    var x = geometry.attributes.position.array[i * 3] / 128;\n    var y = geometry.attributes.position.array[i * 3 + 1] / 128; // Check Height from Perlin Noise Generator\n\n    var height = simplex.noise2D(x, y) * 30; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n  } //------------[Create Material]------------\\\\\n\n\n  var material = new MeshPhongMaterial({\n    vertexColors: vertexColors,\n    reflectivity: 0,\n    roughness: 2,\n    flatShading: true\n  }); //------------[Create MEsh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true;\n  plane2.position.y = -3;\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute('color', new BufferAttribute(new Float32Array(colours), 3));\n  geometry.computeVertexNormals(); //------------[Add to Base Scene]------------\\\\\n\n  SceneToGet.add(plane2);\n}\n_c = GenerateTerrain;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateTerrain\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/ProceduleTerrain.js"],"names":["BufferAttribute","Mesh","MeshPhongMaterial","PlaneBufferGeometry","GenerateTerrain","seed","SceneToGet","simplex","SimplexNoise","geometry","colours","i","l","attributes","position","count","x","array","y","height","noise2D","push","material","vertexColors","reflectivity","roughness","flatShading","plane2","receiveShadow","castShadow","rotateX","Math","PI","setAttribute","Float32Array","computeVertexNormals","add"],"mappings":"AAAA;AAEA,SAASA,eAAT,EAA0BC,IAA1B,EAAgCC,iBAAhC,EAAmDC,mBAAnD,QAA8E,OAA9E;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,UAA/B,EAA2C;AAE9C;AACA,MAAMC,OAAO,GAAG,IAAIC,YAAJ,CAAiBH,IAAjB,CAAhB;AACA,MAAII,QAAQ,GAAG,IAAIN,mBAAJ,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,GAAvC,CAAf;AACA,MAAIO,OAAO,GAAG,EAAd,CAL8C,CAO9C;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,QAAQ,CAACI,UAAT,CAAoBC,QAApB,CAA6BC,KAAjD,EAAwDJ,CAAC,GAAGC,CAA5D,EAA+DD,CAAC,EAAhE,EAAoE;AAChE;AACA,QAAIK,CAAC,GAAGP,QAAQ,CAACI,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAoCN,CAAC,GAAG,CAAxC,IAA8C,GAAtD;AACA,QAAIO,CAAC,GAAGT,QAAQ,CAACI,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAoCN,CAAC,GAAG,CAAL,GAAU,CAA7C,IAAkD,GAA1D,CAHgE,CAKhE;;AACA,QAAIQ,MAAM,GAAGZ,OAAO,CAACa,OAAR,CAAgBJ,CAAhB,EAAmBE,CAAnB,IAAwB,EAArC,CANgE,CAOhE;;AACAT,IAAAA,QAAQ,CAACI,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAoCN,CAAC,GAAG,CAAL,GAAU,CAA7C,IAAkDQ,MAAlD,CARgE,CAUhE;;AACA,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACbT,MAAAA,OAAO,CAACW,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACH,KAFD,MAGK,IAAIF,MAAM,GAAG,CAAb,EAAgB;AACjBT,MAAAA,OAAO,CAACW,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AACH,KAFI,MAGA,IAAIF,MAAM,GAAG,CAAC,EAAd,EAAkB;AACnBT,MAAAA,OAAO,CAACW,IAAR,CAAa,KAAb,EAAoB,KAApB,EAA2B,IAA3B;AACH,KAFI,MAGA;AACDX,MAAAA,OAAO,CAACW,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB;AACH;AACJ,GA/B6C,CAiC9C;;;AACA,MAAIC,QAAQ,GAAG,IAAIpB,iBAAJ,CAAsB;AACjCqB,IAAAA,YAAY,EAAEA,YADmB;AAEjCC,IAAAA,YAAY,EAAE,CAFmB;AAGjCC,IAAAA,SAAS,EAAE,CAHsB;AAIjCC,IAAAA,WAAW,EAAE;AAJoB,GAAtB,CAAf,CAlC8C,CAyC9C;;AACA,MAAIC,MAAM,GAAG,IAAI1B,IAAJ,CAASQ,QAAT,EAAmBa,QAAnB,CAAb;AACAK,EAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;AACAD,EAAAA,MAAM,CAACE,UAAP,GAAoB,IAApB;AACAF,EAAAA,MAAM,CAACb,QAAP,CAAgBI,CAAhB,GAAoB,CAAC,CAArB;AACAS,EAAAA,MAAM,CAACG,OAAP,CAAgBC,IAAI,CAACC,EAAL,GAAU,CAAX,GAAgBD,IAAI,CAACC,EAApC,EA9C8C,CAgD9C;;AACAvB,EAAAA,QAAQ,CAACwB,YAAT,CAAsB,OAAtB,EAA+B,IAAIjC,eAAJ,CAAoB,IAAIkC,YAAJ,CAAiBxB,OAAjB,CAApB,EAA+C,CAA/C,CAA/B;AACAD,EAAAA,QAAQ,CAAC0B,oBAAT,GAlD8C,CAqD9C;;AACA7B,EAAAA,UAAU,CAAC8B,GAAX,CAAeT,MAAf;AACH;KAvDevB,e","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry } from \"three\"\n\nexport function GenerateTerrain(seed, SceneToGet) {\n\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed)\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100)\n    let colours = []\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        let x = geometry.attributes.position.array[(i * 3)] / 128\n        let y = geometry.attributes.position.array[(i * 3) + 1] / 128\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(x, y) * 30\n        // Set the height accordingly\n        geometry.attributes.position.array[(i * 3) + 2] = height\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1)\n        }\n        else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48)\n        }\n        else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87)\n        }\n        else {\n            colours.push(0.56, 0.68, 0.166)\n        }\n    }\n\n    //------------[Create Material]------------\\\\\n    var material = new MeshPhongMaterial({\n        vertexColors: vertexColors,\n        reflectivity: 0,\n        roughness: 2,\n        flatShading: true,\n    });\n\n    //------------[Create MEsh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true\n    plane2.castShadow = true\n    plane2.position.y = -3\n    plane2.rotateX((Math.PI / 2) + Math.PI)\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute('color', new BufferAttribute(new Float32Array(colours), 3));\n    geometry.computeVertexNormals();\n    \n    \n    //------------[Add to Base Scene]------------\\\\\n    SceneToGet.add(plane2);\n}"]},"metadata":{},"sourceType":"module"}