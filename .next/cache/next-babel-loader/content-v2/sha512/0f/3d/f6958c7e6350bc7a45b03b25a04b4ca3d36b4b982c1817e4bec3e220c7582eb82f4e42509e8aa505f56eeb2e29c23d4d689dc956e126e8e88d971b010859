{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { DoubleSide, Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three'; // Randomly delplace cloud verticies\n\nconst map = (val, smin, smax, emin, emax) => (emax - emin) * (val - smin) / (smax - smin) + emin;\n\nconst jitter = (geometry, per) => {\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    geometry.attributes.position.array[i * 3] += map(Math.random(), 0, 1, -per, per);\n    geometry.attributes.position.array[i * 3 + 1] += map(Math.random(), 0, 1, -per, per);\n    geometry.attributes.position.array[i * 3 + 2] += map(Math.random(), 0, 1, -per, per);\n  }\n\n  ;\n};\n\nexport class GenerateClouds {\n  constructor(pos, scene, speed, scale) {\n    const group = new Group();\n    const tuft1 = new SphereBufferGeometry(1.5 * scale, 7, 11);\n    tuft1.translate(-2 * scale, 0, 0);\n    const tuft3 = new SphereBufferGeometry(1.5 * scale, 7, 11);\n    tuft3.translate(2 * scale, 0, 0);\n    const tuft2 = new SphereBufferGeometry(2.0 * scale, 7, 11);\n    tuft2.translate(0, 0, 0);\n    jitter(tuft1, 0.5);\n    jitter(tuft2, 0.5);\n    jitter(tuft3, 0.5);\n    const mat = new MeshPhongMaterial({\n      color: 'white',\n      flatShading: true,\n      side: DoubleSide\n    });\n    let cloud = new Mesh(tuft1, mat);\n    let cloud1 = new Mesh(tuft2, mat);\n    let cloud2 = new Mesh(tuft3, mat);\n    group.add(cloud);\n    group.add(cloud1);\n    group.add(cloud2);\n    scene.add(group);\n    group.castShadow = true;\n    group.receiveShadow = true;\n    group.position.x = pos.x;\n    group.position.y = pos.y;\n    group.position.z = pos.z;\n    this.grass = group;\n    this.speed = speed;\n    this.pos = pos;\n  }\n\n  update() {\n    let geos = this.grass;\n    geos.position.x += this.speed;\n\n    if (geos.position.x > 400) {\n      geos.position.x = this.pos.x;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/clouds.js"],"names":["DoubleSide","Group","Mesh","MeshPhongMaterial","SphereBufferGeometry","map","val","smin","smax","emin","emax","jitter","geometry","per","i","l","attributes","position","count","array","Math","random","GenerateClouds","constructor","pos","scene","speed","scale","group","tuft1","translate","tuft3","tuft2","mat","color","flatShading","side","cloud","cloud1","cloud2","add","castShadow","receiveShadow","x","y","z","grass","update","geos"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { DoubleSide, Group, Mesh, MeshPhongMaterial, SphereBufferGeometry } from 'three';\n\n\n// Randomly delplace cloud verticies\nconst map = (val, smin, smax, emin, emax) => (emax - emin) * (val - smin) / (smax - smin) + emin\nconst jitter = (geometry, per) => {\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        geometry.attributes.position.array[(i * 3)] += map(Math.random(), 0, 1, -per, per)\n        geometry.attributes.position.array[(i * 3) + 1] += map(Math.random(), 0, 1, -per, per)\n        geometry.attributes.position.array[(i * 3) + 2] += map(Math.random(), 0, 1, -per, per)\n    };\n}\n\nexport class GenerateClouds {\n    constructor(pos, scene, speed, scale) {\n\n\n        const group = new Group();\n\n        const tuft1 = new SphereBufferGeometry(1.5 * scale, 7, 11)\n        tuft1.translate(-2 * scale, 0, 0)\n\n\n        const tuft3 = new SphereBufferGeometry(1.5 * scale, 7, 11)\n        tuft3.translate(2 * scale, 0, 0)\n\n        const tuft2 = new SphereBufferGeometry(2.0 * scale, 7, 11)\n        tuft2.translate(0, 0, 0)\n\n        jitter(tuft1, 0.5)\n        jitter(tuft2, 0.5)\n        jitter(tuft3, 0.5)\n\n\n        const mat = new MeshPhongMaterial({\n            color: 'white',\n            flatShading: true,\n            side:DoubleSide,\n        })\n\n        let cloud = new Mesh(\n            tuft1,\n            mat\n        )\n        let cloud1 = new Mesh(\n            tuft2,\n            mat\n        )\n        let cloud2 = new Mesh(\n            tuft3,\n            mat\n        )\n\n        group.add(cloud)\n        group.add(cloud1)\n        group.add(cloud2)\n\n        scene.add(group)\n        group.castShadow = true\n        group.receiveShadow = true\n        group.position.x = pos.x\n        group.position.y = pos.y\n        group.position.z = pos.z\n\n        this.grass = group\n        this.speed = speed\n        this.pos = pos\n    }\n\n    update() {\n        let geos = this.grass\n        geos.position.x += this.speed\n        if (geos.position.x > 400) {\n            geos.position.x = this.pos.x\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}