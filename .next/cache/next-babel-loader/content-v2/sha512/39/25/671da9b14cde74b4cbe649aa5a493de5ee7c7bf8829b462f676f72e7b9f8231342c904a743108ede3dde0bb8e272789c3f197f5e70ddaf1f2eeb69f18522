{"ast":null,"code":"import { Group, MeshPhongMaterial, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { debugCube } from \"../../Core-API/gemotryManager\";\nimport { addToRenderSequence } from \"../../Core-API/RenderingHandler\";\nimport { listenToConrols } from \"../controls\";\nexport class MakePlane {\n  constructor(SceneToGet, settings) {\n    this.SceneToGet = SceneToGet;\n    this.settings = settings;\n    this.group = new Group();\n  }\n\n  async loadFiles() {\n    this.plane = await addGLBFile(\"/Aircraft/BasicPlane/Plane.glb\", this.SceneToGet);\n    this.props = await addGLBFile(\"/Aircraft/BasicPlane/Blades.glb\", this.SceneToGet);\n    this.leftAirelone = await addGLBFile(\"/Aircraft/BasicPlane/leftAirelone.glb\", this.SceneToGet);\n    this.rightAirelone = await addGLBFile(\"/Aircraft/BasicPlane/rightAirelone.glb\", this.SceneToGet);\n    this.leftControlSurface = await addGLBFile(\"/Aircraft/BasicPlane/LeftWingControlsSurface.glb\", this.SceneToGet);\n    this.rightControlSurface = await addGLBFile(\"/Aircraft/BasicPlane/RightWingControlsSurface.glb\", this.SceneToGet);\n    this.rudder = await addGLBFile(\"/Aircraft/BasicPlane/Rudder.glb\", this.SceneToGet);\n  }\n\n  CreateGroupAndPos() {\n    this.group.add(this.plane.scene);\n    this.group.add(this.props.scene);\n    this.group.add(this.leftAirelone.scene);\n    this.group.add(this.rightAirelone.scene);\n    this.group.add(this.rightControlSurface.scene);\n    this.group.add(this.leftControlSurface.scene);\n    this.group.add(this.rudder.scene);\n    this.leftAirelone.scene.position.set(12.936, 15.994, -59.264);\n    this.rightAirelone.scene.position.set(-12.495, 15.888, -59.294);\n    this.leftControlSurface.scene.position.set(46.243, 22.536, -13.541);\n    this.leftControlSurface.scene.rotateY(radiants(-7));\n    this.rightControlSurface.scene.position.set(-46.2718, 22.5411, -13.5447);\n    this.rightControlSurface.scene.rotateY(radiants(6.8));\n    this.rightControlSurface.scene.rotateZ(radiants(-3.5)); //this.rightControlSurface.scene.rotateX(radiants(183.57))\n\n    this.rudder.scene.position.set(-0.022, 24.67, -68.17);\n    this.rudder.scene.rotateX(radiants(-22));\n    this.props.scene.position.set(0, 15, 22);\n    this.SceneToGet.add(this.group);\n    this.group.scale.set(0.05, 0.05, 0.05);\n    let [props, leftAirelone] = [this.props.scene, this.leftAirelone.scene]; // For testing \\\\\n\n    addToRenderSequence(\"Main\", () => {\n      props.rotateZ(0.3);\n      leftAirelone.rotateX(0.005);\n      this.group.rotateY(0.01);\n      this.group.position.z += 0.01;\n    }, false);\n    return this.group;\n  }\n\n  attachCameraAndControl(Camera) {\n    this.UUID = listenToConrols(({\n      wKey,\n      aKey,\n      sKey,\n      dKey,\n      upKey,\n      downKey,\n      eKey,\n      qKey,\n      shiftKey\n    }) => {\n      console.log(wKey);\n    });\n    let cube = debugCube();\n    cube.visible = true; //this.group.add(cube)\n    //this.group.add(Camera)\n\n    cube.position.set(0, 60, -90);\n    cube.rotateY(radiants(180));\n    cube.rotateX(radiants(-20));\n    this.group.add(cube);\n    addToRenderSequence(\"Main\", () => {\n      //let pos =  new Vector3(this.group.position.x,this.group.position.y,this.group.position.z).add(new Vector3(0,3,-4.5))\n      //Camera.position.set(pos.x,pos.y,pos.z)\n      let pos = cube.position.clone().setFromMatrixPosition(cube.matrixWorld); //.add.console.log(cube.position.clone().setFromMatrixPosition( cube.matrixWorld) )\n\n      Camera.position.set(pos.x, pos.y, pos.z);\n      Camera.rotation.x = pos.rotation.x;\n      Camera.rotation.y = pos.rotation.y;\n      Camera.rotation.z = pos.rotation.z;\n    });\n  }\n\n  cleanUp() {\n    if (this.UUID !== undefined) {\n      CleanUpListener(this.UUID);\n    }\n\n    this.group.remove();\n    return {\n      success: true\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/planeHandler/MainPlane.js"],"names":["Group","MeshPhongMaterial","Vector3","radiants","addGLBFile","debugCube","addToRenderSequence","listenToConrols","MakePlane","constructor","SceneToGet","settings","group","loadFiles","plane","props","leftAirelone","rightAirelone","leftControlSurface","rightControlSurface","rudder","CreateGroupAndPos","add","scene","position","set","rotateY","rotateZ","rotateX","scale","z","attachCameraAndControl","Camera","UUID","wKey","aKey","sKey","dKey","upKey","downKey","eKey","qKey","shiftKey","console","log","cube","visible","pos","clone","setFromMatrixPosition","matrixWorld","x","y","rotation","cleanUp","undefined","CleanUpListener","remove","success"],"mappings":"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","sourcesContent":["import { Group, MeshPhongMaterial, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { debugCube } from \"../../Core-API/gemotryManager\";\nimport { addToRenderSequence } from \"../../Core-API/RenderingHandler\";\nimport { listenToConrols } from \"../controls\";\n\nexport class MakePlane {\n    constructor(SceneToGet, settings) {\n        this.SceneToGet = SceneToGet;\n        this.settings = settings;\n        this.group = new Group();\n\n    }\n\n    async loadFiles() {\n        this.plane = await addGLBFile(\n            \"/Aircraft/BasicPlane/Plane.glb\",\n            this.SceneToGet\n        );\n        this.props = await addGLBFile(\n            \"/Aircraft/BasicPlane/Blades.glb\",\n            this.SceneToGet\n        );\n        this.leftAirelone = await addGLBFile(\n            \"/Aircraft/BasicPlane/leftAirelone.glb\",\n            this.SceneToGet\n        );\n        this.rightAirelone = await addGLBFile(\n            \"/Aircraft/BasicPlane/rightAirelone.glb\",\n            this.SceneToGet\n        );\n        this.leftControlSurface = await addGLBFile(\n            \"/Aircraft/BasicPlane/LeftWingControlsSurface.glb\",\n            this.SceneToGet\n        );\n        this.rightControlSurface = await addGLBFile(\n            \"/Aircraft/BasicPlane/RightWingControlsSurface.glb\",\n            this.SceneToGet\n        );\n        this.rudder = await addGLBFile(\n            \"/Aircraft/BasicPlane/Rudder.glb\",\n            this.SceneToGet\n        );\n    }\n\n    CreateGroupAndPos() {\n        this.group.add(this.plane.scene);\n        this.group.add(this.props.scene);\n        this.group.add(this.leftAirelone.scene);\n        this.group.add(this.rightAirelone.scene);\n        this.group.add(this.rightControlSurface.scene);\n        this.group.add(this.leftControlSurface.scene);\n        this.group.add(this.rudder.scene);\n\n\n        this.leftAirelone.scene.position.set(12.936, 15.994, -59.264);\n        this.rightAirelone.scene.position.set(-12.495, 15.888, -59.294);\n\n        this.leftControlSurface.scene.position.set(46.243, 22.536, -13.541)\n        this.leftControlSurface.scene.rotateY(radiants(-7))\n\n        this.rightControlSurface.scene.position.set(-46.2718, 22.5411, -13.5447)\n        this.rightControlSurface.scene.rotateY(radiants(6.8))\n        this.rightControlSurface.scene.rotateZ(radiants(-3.5))\n        //this.rightControlSurface.scene.rotateX(radiants(183.57))\n\n        this.rudder.scene.position.set(-0.022, 24.67, -68.17)\n        this.rudder.scene.rotateX(radiants(-22))\n\n        this.props.scene.position.set(0, 15, 22);\n        this.SceneToGet.add(this.group);\n\n        this.group.scale.set(0.05, 0.05, 0.05);\n\n        let [props, leftAirelone] = [this.props.scene, this.leftAirelone.scene]\n\n        // For testing \\\\\n        addToRenderSequence(\"Main\", () => {\n            props.rotateZ(0.3);\n            leftAirelone.rotateX(0.005);\n            this.group.rotateY(0.01)\n            this.group.position.z += 0.01\n        }, false);\n\n        return this.group\n    }\n    attachCameraAndControl(Camera){\n        this.UUID = listenToConrols(({wKey, aKey, sKey, dKey, upKey, downKey, eKey, qKey, shiftKey}) => {\n            console.log(wKey)\n        })\n        let cube = debugCube()\n        cube.visible = true\n        //this.group.add(cube)\n        //this.group.add(Camera)\n        cube.position.set(0,60,-90)\n        cube.rotateY(radiants(180))\n        cube.rotateX(radiants(-20))\n        this.group.add(cube)\n        addToRenderSequence(\"Main\", () => {\n            //let pos =  new Vector3(this.group.position.x,this.group.position.y,this.group.position.z).add(new Vector3(0,3,-4.5))\n            //Camera.position.set(pos.x,pos.y,pos.z)\n            let pos = cube.position.clone().setFromMatrixPosition( cube.matrixWorld)\n            //.add.console.log(cube.position.clone().setFromMatrixPosition( cube.matrixWorld) )\n            Camera.position.set(pos.x,pos.y,pos.z)\n            Camera.rotation.x = pos.rotation.x\n            Camera.rotation.y = pos.rotation.y\n            Camera.rotation.z = pos.rotation.z\n        })\n    }\n\n    cleanUp(){\n        if(this.UUID !== undefined){\n            CleanUpListener(this.UUID)\n        }\n        this.group.remove()\n        return {success:true}\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}