{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _toConsumableArray from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// Written By Harvey Randall \\\\\nimport { useEffect, useState, useContext } from \"react\";\nimport * as THREE from \"three\";\nimport React from 'react';\nimport { PerspectiveCamera, Scene, Vector3, WebGLRenderer } from \"three\";\n\nvar Stats = require(\"stats.js\");\n\nimport { useAppContext } from \"../components/Context/socketioContext\";\nimport { generateLabel } from \"../components/gameFundalmentals/nametag\";\nimport { startSeverClientCommunication, listenToEvent } from \"../components/Core-API/ConnectAPI\";\nimport { updateRenderCycle } from \"../components/Core-API/RenderingHandler\";\nimport { generateMainScene } from \"../components/Scenes/MainSceneHandler\";\nimport { CreateUI } from \"../components/gameUI/gameFeed\";\nimport { ControlEventListener } from \"../components/gameFundalmentals/controls\";\nexport default function render() {\n  var _ref2;\n\n  var _useState = useState(),\n      child = _useState[0],\n      setChild = _useState[1];\n\n  var _useState2 = useState([]),\n      gameEventData = _useState2[0],\n      setGameEventData = _useState2[1];\n\n  var _useState3 = useState(\"not day\"),\n      day = _useState3[0],\n      setDay = _useState3[1];\n\n  var _useState4 = useState(),\n      child2 = _useState4[0],\n      setChild2 = _useState4[1];\n\n  var socket = useAppContext();\n  ;\n\n  var _useState5 = useState(),\n      recievedSeed = _useState5[0],\n      setSeed = _useState5[1];\n\n  var _useState6 = useState(false),\n      rendered = _useState6[0],\n      setRendered = _useState6[1];\n\n  var _useState7 = useState([]),\n      clients = _useState7[0],\n      setClients = _useState7[1];\n\n  var _useState8 = useState(),\n      personData = _useState8[0],\n      setPersonalData = _useState8[1];\n\n  startSeverClientCommunication(socket);\n  socket.once(\"welcome\", function (seed, client, data) {\n    setSeed(seed);\n    setClients(client);\n    setPersonalData(data);\n  });\n  useEffect(function () {\n    if (typeof child === \"undefined\" || typeof recievedSeed === \"undefined\" || rendered === true) {\n      return;\n    }\n\n    setRendered(true);\n    var stats = new Stats();\n    stats.showPanel(1);\n    document.body.appendChild(stats.dom);\n    var SceneToGet = new Scene();\n    var Renders = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    Renders.setClearColor(\"#87ceeb\", 1);\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    var CurrentScene = \"Main\";\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000 / 0.05);\n    generateMainScene(SceneToGet, Renders, document, recievedSeed, child2, Camera);\n    Renders.domElement.requestPointerLock();\n    ControlEventListener(document, child2);\n    var players = [];\n\n    function makeCube() {\n      var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"rgb(0,0,0)\";\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"unkown\";\n      var group = new THREE.Group();\n      var geometry = new THREE.BoxGeometry(1, 1, 1);\n      var material = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(color),\n        emissive: new THREE.Color(color)\n      });\n      var cube = new THREE.Mesh(geometry, material);\n      group.add(cube);\n      var cyclinder = new THREE.CylinderGeometry(0.3, 0.3, 0.6, 30);\n      var material2 = new THREE.MeshLambertMaterial({\n        color: \"#000000\"\n      });\n      var cylinderBuild = new THREE.Mesh(cyclinder, material2);\n      cylinderBuild.rotateX(Math.PI / 2 + Math.PI);\n      cylinderBuild.position.set(0, 0, -0.6);\n      group.add(cylinderBuild);\n      generateLabel(name, group);\n      SceneToGet.add(group);\n      group.name = name;\n      return group;\n    }\n\n    var prevData = [];\n\n    var addtoGameFeed = function addtoGameFeed() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unkown\";\n      var event = arguments.length > 1 ? arguments[1] : undefined;\n\n      var NewGameEventArray = _toConsumableArray(gameEventData);\n\n      NewGameEventArray.unshift({\n        name: name,\n        event: event\n      });\n      delete NewGameEventArray[10];\n      delete NewGameEventArray[11];\n      setGameEventData(_toConsumableArray(NewGameEventArray));\n      prevData = NewGameEventArray;\n    };\n\n    clients.forEach(function (e) {\n      var cube = makeCube(e.color, e.name);\n      players[\"\".concat(e)] = cube;\n    });\n    socket.on(\"NewPlayer\", function (id, data) {\n      var cube = makeCube(data.color, data.name);\n      addtoGameFeed(data === null || data === void 0 ? void 0 : data.name, \"Joined the game!\");\n      players[\"\".concat(id)] = cube;\n    });\n    socket.on(\"LostPLayer\", function (id, how, data) {\n      var cube = players[\"\".concat(id)];\n      SceneToGet.remove(cube);\n      delete players[\"\".concat(id)];\n      addtoGameFeed(data === null || data === void 0 ? void 0 : data.name, how === true ? \"Was removed from the game for being inactive\" : \"Left the game!\");\n    });\n    listenToEvent(\"PlayerLocationUpdate\", function (id, pos, rot, data) {\n      var cube = players[\"\".concat(id)];\n\n      if (cube) {\n        cube.rotation.set(rot._x, rot._y, rot._z);\n        cube.position.set(pos.x, pos.y, pos.z);\n      } else {\n        var _cube = makeCube(data === null || data === void 0 ? void 0 : data.color, data === null || data === void 0 ? void 0 : data.name);\n\n        players[\"\".concat(id)] = _cube;\n      }\n    });\n    socket.on(\"NewChat\", function (data, text) {\n      addtoGameFeed(data.name, text);\n    });\n    setInterval(function () {\n      var vector = new Vector3();\n      Camera.getWorldPosition(vector);\n      socket.emit(\"LocationUpdate\", vector, Camera.rotation);\n    }, 10);\n\n    var animate = function animate() {\n      stats.begin();\n      requestAnimationFrame(animate); // Update all moving parts\n\n      updateRenderCycle(CurrentScene);\n      Renders.render(SceneToGet, Camera);\n      stats.end();\n    };\n\n    animate();\n  }, [child, clients]);\n\n  var sendChat = function sendChat(e) {\n    e.preventDefault();\n    socket.emit(\"sendChat\", child2.value);\n    child2.value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxs(\"main\", {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      style: {\n        position: \"fixed\",\n        marginTop: \"40px\",\n        color: \"white\"\n      },\n      children: typeof personData === \"undefined\" ? \"LOADING...\" : personData.name\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        marginTop: \"80px\"\n      },\n      children: [/*#__PURE__*/_jsx(CreateUI, {}), /*#__PURE__*/_jsxs(\"form\", {\n        onSubmit: sendChat,\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          ref: function ref(_ref) {\n            return setChild2(_ref);\n          }\n        }), /*#__PURE__*/_jsx(\"input\", {\n          type: \"Submit\"\n        })]\n      }), _toConsumableArray(gameEventData).map(function (e) {\n        if (typeof e === \"undefined\") {\n          return;\n        }\n\n        return /*#__PURE__*/_jsxs(\"h4\", {\n          style: {\n            color: \"white\"\n          },\n          children: [e.name, \" - \", e.event]\n        });\n      })]\n    }), (_ref2 = typeof recievedSeed === \"undefined\") !== null && _ref2 !== void 0 ? _ref2 : /*#__PURE__*/_jsx(\"h1\", {\n      children: \"LOADING SEED!\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: function ref(_ref3) {\n        return setChild(_ref3);\n      }\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: function ref(_ref4) {\n        return setChild(_ref4);\n      }\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}