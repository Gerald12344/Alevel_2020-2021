{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { BackSide, BoxGeometry, Color, MathUtils, Mesh, MeshBasicMaterial, MeshLambertMaterial, SphereBufferGeometry, Vector3 } from \"three\";\nimport { createAmbientLight, createDirectionalLight } from \"../Core-API/LightingManager\";\nimport { getRandomStarField } from \"./stars\";\nimport { rotateAboutPoint } from \"./rotateAroundPoint\";\nexport class CreateDayNightCycle {\n  constructor(SceneToGet, Renders) {\n    // ---------- [Two to level global variables] ---------- \\\\\n    this.SceneToGet = SceneToGet;\n    this.Renders = Renders; // ---------- [Create Sun Mesh] ---------- \\\\\n\n    let sun = new SphereBufferGeometry(20, 20, 100, 100);\n    let sunMaterial = new MeshLambertMaterial({\n      emissive: '#f9d71c'\n    });\n    let sunmesh = new Mesh(sun, sunMaterial);\n    sunmesh.position.set(1, 300, 300);\n    SceneToGet.add(sunmesh); // ---------- [Create Moon Mesh] ---------- \\\\\n\n    let moon = new SphereBufferGeometry(10, 10, 100, 100);\n    let moonMaterial = new MeshLambertMaterial({\n      emissive: \"#ffffff\"\n    });\n    let moonMesh = new Mesh(moon, moonMaterial);\n    moonMesh.position.set(-1, -200, -300);\n    SceneToGet.add(moonMesh); // ---------- [Create Box Gometry for handling rotation] ---------- \\\\\n\n    var geometry = new BoxGeometry(1, 1, 1);\n    var cube = new Mesh(geometry);\n    cube.visible = false;\n    SceneToGet.add(cube); // ^ This is a very bad work around fix later\n    // ---------- [All defintions for the moving part] ---------- \\\\\n\n    this.cube = cube;\n    this.moonMesh = moonMesh;\n    this.sunmesh = sunmesh;\n    this.t = 0;\n    this.dTIme = 0; // ---------- [All defintions for lights to create shadows] ---------- \\\\\n\n    this.directionalLight = createDirectionalLight(SceneToGet, 0xddffee, 0.5, [1, 100, 100]);\n    this.directionalLight2 = createDirectionalLight(SceneToGet, 0xffffff, 0.2, [1, -100, -100]);\n    this.light = createAmbientLight(SceneToGet, \"#aaaaaa\", 0.5); // ---------- [Create Stary night] ---------- \\\\\n\n    let skyBox = new BoxGeometry(1200, 1200, 1200);\n    let skyBoxMaterial = new MeshBasicMaterial({\n      map: getRandomStarField(600, 2048, 2048),\n      side: BackSide\n    });\n    this.sky = new Mesh(skyBox, skyBoxMaterial);\n  }\n\n  update() {\n    // This two lines are  important as it is part of the hacky work around to get time of day on varying FPS\n    let theta = rotateAboutPoint(this.directionalLight, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n    let angle = MathUtils.radToDeg(this.cube.rotation.x); // ---------- [Rotate all the lights and Meshes] ---------- \\\\\n\n    rotateAboutPoint(this.sunmesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n    rotateAboutPoint(this.moonMesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n    rotateAboutPoint(this.directionalLight2, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true); // ---------- [If it is day] ---------- \\\\\n\n    if (angle < 40 && this.dTIme < 1) {\n      this.t = 0;\n      this.directionalLight.color.setHex(\"#ddffee\");\n      this.dTIme += 0.003;\n\n      if (this.dTIme >= 1) {\n        this.dTIme = 1;\n      }\n\n      this.Renders.setClearColor(new Color().lerpColors(new Color(\"#fdb813\"), new Color(\"#87ceeb\"), this.dTIme), 1);\n      this.light.intensity = 0.5;\n      this.directionalLight2.color.setHex(\"#000000\");\n      this.directionalLight.intensity = 0.5;\n      this.directionalLight2.intensity = 0;\n      this.SceneToGet.remove(this.sky);\n    } else if (!(angle < 40) && this.sky.parent !== this.SceneToGet) {\n      // ---------- [If it is night] ---------- \\\\\n      this.dTIme = 0;\n      this.t += 0.01;\n\n      if (this.t >= 1) {\n        this.t = 1;\n        this.SceneToGet.add(this.sky);\n      }\n\n      this.directionalLight2.color.setHex(\"#ffffff\");\n      this.Renders.setClearColor(new Color().lerpColors(new Color(\"#87ceeb\"), new Color(\"#000000\"), this.t), 1);\n      this.light.intensity = 0.2;\n      this.directionalLight.intensity = 0;\n      this.directionalLight2.intensity = 0.2;\n    }\n\n    if (this.sky.parent === this.SceneToGet) {\n      this.sky.rotation.x += -0.0004;\n    }\n\n    this.cube.rotateOnAxis(new Vector3(1, 0, 0), theta);\n  }\n\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/DayNightCycle.js"],"names":["BackSide","BoxGeometry","Color","MathUtils","Mesh","MeshBasicMaterial","MeshLambertMaterial","SphereBufferGeometry","Vector3","createAmbientLight","createDirectionalLight","getRandomStarField","rotateAboutPoint","CreateDayNightCycle","constructor","SceneToGet","Renders","sun","sunMaterial","emissive","sunmesh","position","set","add","moon","moonMaterial","moonMesh","geometry","cube","visible","t","dTIme","directionalLight","directionalLight2","light","skyBox","skyBoxMaterial","map","side","sky","update","theta","angle","radToDeg","rotation","x","color","setHex","setClearColor","lerpColors","intensity","remove","parent","rotateOnAxis"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\nimport {\n    BackSide,\n    BoxGeometry,\n    Color,\n    MathUtils,\n    Mesh,\n    MeshBasicMaterial,\n    MeshLambertMaterial,\n    SphereBufferGeometry,\n    Vector3,\n} from \"three\";\nimport {\n    createAmbientLight,\n    createDirectionalLight,\n} from \"../Core-API/LightingManager\";\nimport { getRandomStarField } from \"./stars\";\nimport { rotateAboutPoint } from \"./rotateAroundPoint\";\n\nexport class CreateDayNightCycle {\n    constructor(SceneToGet, Renders) {\n        // ---------- [Two to level global variables] ---------- \\\\\n        this.SceneToGet = SceneToGet;\n        this.Renders = Renders;\n\n        // ---------- [Create Sun Mesh] ---------- \\\\\n        let sun = new SphereBufferGeometry(20, 20, 100, 100);\n        let sunMaterial = new MeshLambertMaterial({\n            emissive: '#f9d71c',\n        });\n        let sunmesh = new Mesh(sun, sunMaterial);\n        sunmesh.position.set(1, 300, 300);\n        SceneToGet.add(sunmesh);\n\n        // ---------- [Create Moon Mesh] ---------- \\\\\n        let moon = new SphereBufferGeometry(10, 10, 100, 100);\n        let moonMaterial = new MeshLambertMaterial({\n            emissive: \"#ffffff\",\n        });\n        let moonMesh = new Mesh(moon, moonMaterial);\n        moonMesh.position.set(-1, -200, -300);\n        SceneToGet.add(moonMesh);\n\n        // ---------- [Create Box Gometry for handling rotation] ---------- \\\\\n        var geometry = new BoxGeometry(1, 1, 1);\n        var cube = new Mesh(geometry);\n        cube.visible = false;\n        SceneToGet.add(cube);\n        // ^ This is a very bad work around fix later\n\n        // ---------- [All defintions for the moving part] ---------- \\\\\n        this.cube = cube;\n        this.moonMesh = moonMesh;\n        this.sunmesh = sunmesh;\n        this.t = 0;\n        this.dTIme = 0;\n\n        // ---------- [All defintions for lights to create shadows] ---------- \\\\\n        this.directionalLight = createDirectionalLight(\n            SceneToGet,\n            0xddffee,\n            0.5,\n            [1, 100, 100]\n        );\n        this.directionalLight2 = createDirectionalLight(\n            SceneToGet,\n            0xffffff,\n            0.2,\n            [1, -100, -100]\n        );\n        this.light = createAmbientLight(SceneToGet, \"#aaaaaa\", 0.5);\n\n        // ---------- [Create Stary night] ---------- \\\\\n        let skyBox = new BoxGeometry(1200, 1200, 1200);\n        let skyBoxMaterial = new MeshBasicMaterial({\n            map: getRandomStarField(600, 2048, 2048),\n            side: BackSide,\n        });\n        this.sky = new Mesh(skyBox, skyBoxMaterial);\n    }\n    update() {\n        // This two lines are  important as it is part of the hacky work around to get time of day on varying FPS\n        let theta = rotateAboutPoint(\n            this.directionalLight,\n            new Vector3(0, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n        let angle = MathUtils.radToDeg(this.cube.rotation.x);\n\n        // ---------- [Rotate all the lights and Meshes] ---------- \\\\\n        rotateAboutPoint(\n            this.sunmesh,\n            new Vector3(100, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n        rotateAboutPoint(\n            this.moonMesh,\n            new Vector3(100, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n        rotateAboutPoint(\n            this.directionalLight2,\n            new Vector3(0, 0, 0),\n            new Vector3(1, 0, 0),\n            0.001,\n            true\n        );\n\n        // ---------- [If it is day] ---------- \\\\\n        if (angle < 40 && this.dTIme < 1) {\n            this.t = 0;\n            this.directionalLight.color.setHex(\"#ddffee\");\n            this.dTIme += 0.003;\n            if (this.dTIme >= 1) {\n                this.dTIme = 1;\n            }\n            this.Renders.setClearColor(\n                new Color().lerpColors(\n                    new Color(\"#fdb813\"),\n                    new Color(\"#87ceeb\"),\n                    this.dTIme\n                ),\n                1\n            );\n            this.light.intensity = 0.5;\n            this.directionalLight2.color.setHex(\"#000000\");\n            this.directionalLight.intensity = 0.5;\n            this.directionalLight2.intensity = 0;\n            this.SceneToGet.remove(this.sky);\n        } else if (!(angle < 40) && this.sky.parent !== this.SceneToGet) {\n            // ---------- [If it is night] ---------- \\\\\n            this.dTIme = 0;\n\n            this.t += 0.01;\n            if (this.t >= 1) {\n                this.t = 1;\n                this.SceneToGet.add(this.sky);\n            }\n            this.directionalLight2.color.setHex(\"#ffffff\");\n            this.Renders.setClearColor(\n                new Color().lerpColors(\n                    new Color(\"#87ceeb\"),\n                    new Color(\"#000000\"),\n                    this.t\n                ),\n                1\n            );\n            this.light.intensity = 0.2;\n            this.directionalLight.intensity = 0;\n            this.directionalLight2.intensity = 0.2;\n        }\n        if (this.sky.parent === this.SceneToGet) {\n            this.sky.rotation.x += -0.0004;\n        }\n        this.cube.rotateOnAxis(new Vector3(1, 0, 0), theta);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}