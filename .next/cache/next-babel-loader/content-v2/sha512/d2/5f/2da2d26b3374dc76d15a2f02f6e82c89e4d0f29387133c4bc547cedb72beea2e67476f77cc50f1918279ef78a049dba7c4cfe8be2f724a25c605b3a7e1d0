{"ast":null,"code":"import _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Written By Harvey Randall \\\\\nimport { DoubleSide, Group, Mesh, MeshPhongMaterial, SphereGeometry } from \"three\"; // Randomly delplace cloud verticies\n\nvar map = function map(val, smin, smax, emin, emax) {\n  return (emax - emin) * (val - smin) / (smax - smin) + emin;\n};\n\nvar jitter = function jitter(geometry, per) {\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    geometry.attributes.position.array[i * 3] += map(Math.random(), 0, 1, -per, per);\n    geometry.attributes.position.array[i * 3 + 1] += map(Math.random(), 0, 1, -per, per);\n    geometry.attributes.position.array[i * 3 + 2] += map(Math.random(), 0, 1, -per, per);\n  }\n};\n\nexport var GenerateClouds = /*#__PURE__*/function () {\n  function GenerateClouds(pos, scene, speed, scale) {\n    _classCallCheck(this, GenerateClouds);\n\n    var group = new Group();\n    var tuft1 = new SphereGeometry(1.5 * scale, 7, 11);\n    tuft1.translate(-2 * scale, 0, 0);\n    var tuft3 = new SphereGeometry(1.5 * scale, 7, 11);\n    tuft3.translate(2 * scale, 0, 0);\n    var tuft2 = new SphereGeometry(2.0 * scale, 7, 11);\n    tuft2.translate(0, 0, 0);\n    jitter(tuft1, 0.2);\n    jitter(tuft2, 0.1);\n    jitter(tuft3, 0.1);\n    tuft1.computeVertexNormals();\n    var mat = new MeshPhongMaterial({\n      color: \"white\",\n      flatShading: true,\n      side: DoubleSide\n    });\n    var cloud = new Mesh(tuft1, mat);\n    var cloud1 = new Mesh(tuft2, mat);\n    var cloud2 = new Mesh(tuft3, mat);\n    group.add(cloud);\n    group.add(cloud1);\n    group.add(cloud2);\n    scene.add(group);\n    group.castShadow = true;\n    group.receiveShadow = true;\n    group.position.x = pos.x;\n    group.position.y = pos.y;\n    group.position.z = pos.z;\n    this.grass = group;\n    this.speed = speed;\n    this.pos = pos;\n  }\n\n  _createClass(GenerateClouds, [{\n    key: \"update\",\n    value: function update() {\n      var geos = this.grass;\n      geos.position.x += this.speed;\n\n      if (geos.position.x > 400) {\n        geos.position.x = this.pos.x;\n      }\n    }\n  }]);\n\n  return GenerateClouds;\n}();","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/clouds.js"],"names":["DoubleSide","Group","Mesh","MeshPhongMaterial","SphereGeometry","map","val","smin","smax","emin","emax","jitter","geometry","per","i","l","attributes","position","count","array","Math","random","GenerateClouds","pos","scene","speed","scale","group","tuft1","translate","tuft3","tuft2","computeVertexNormals","mat","color","flatShading","side","cloud","cloud1","cloud2","add","castShadow","receiveShadow","x","y","z","grass","geos"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport {\n    DoubleSide,\n    Group,\n    Mesh,\n    MeshPhongMaterial,\n    SphereGeometry,\n} from \"three\";\n\n// Randomly delplace cloud verticies\nconst map = (val, smin, smax, emin, emax) =>\n    ((emax - emin) * (val - smin)) / (smax - smin) + emin;\nconst jitter = (geometry, per) => {\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        geometry.attributes.position.array[i * 3] += map(\n            Math.random(),\n            0,\n            1,\n            -per,\n            per\n        );\n        geometry.attributes.position.array[i * 3 + 1] += map(\n            Math.random(),\n            0,\n            1,\n            -per,\n            per\n        );\n        geometry.attributes.position.array[i * 3 + 2] += map(\n            Math.random(),\n            0,\n            1,\n            -per,\n            per\n        );\n    }\n};\n\nexport class GenerateClouds {\n    constructor(pos, scene, speed, scale) {\n        const group = new Group();\n\n        const tuft1 = new SphereGeometry(1.5 * scale, 7, 11);\n        tuft1.translate(-2 * scale, 0, 0);\n\n        const tuft3 = new SphereGeometry(1.5 * scale, 7, 11);\n        tuft3.translate(2 * scale, 0, 0);\n\n        const tuft2 = new SphereGeometry(2.0 * scale, 7, 11);\n        tuft2.translate(0, 0, 0);\n\n        jitter(tuft1, 0.2);\n        jitter(tuft2, 0.1);\n        jitter(tuft3, 0.1);\n\n        tuft1.computeVertexNormals();\n\n        const mat = new MeshPhongMaterial({\n            color: \"white\",\n            flatShading: true,\n            side: DoubleSide,\n        });\n\n        let cloud = new Mesh(tuft1, mat);\n        let cloud1 = new Mesh(tuft2, mat);\n        let cloud2 = new Mesh(tuft3, mat);\n\n        group.add(cloud);\n        group.add(cloud1);\n        group.add(cloud2);\n\n        scene.add(group);\n        group.castShadow = true;\n        group.receiveShadow = true;\n        group.position.x = pos.x;\n        group.position.y = pos.y;\n        group.position.z = pos.z;\n\n        this.grass = group;\n        this.speed = speed;\n        this.pos = pos;\n    }\n\n    update() {\n        let geos = this.grass;\n        geos.position.x += this.speed;\n        if (geos.position.x > 400) {\n            geos.position.x = this.pos.x;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}