{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/test.js\";\n// Written By Harvey Randall \\\\\nimport { useEffect, useState } from \"react\";\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer, MeshLambertMaterial } from \"three\";\n\nvar perlin = require('perlin-noise');\n\nvar SimplexNoise = require('simplex-noise');\n\nimport { GenerateClouds } from '../components/clouds';\nimport { getRandomStarField } from '../components/stars';\n\nvar Stats = require('stats.js');\n\nCameraControls.install({\n  THREE: THREE\n});\nexport default function render() {\n  const {\n    0: child,\n    1: setChild\n  } = useState(undefined);\n  const {\n    0: newTheta,\n    1: setTheat\n  } = useState(0);\n  const {\n    0: day,\n    1: setDay\n  } = useState(\"not day\");\n  const {\n    0: child2,\n    1: setChild2\n  } = useState(undefined);\n  useEffect(() => {\n    if (child === undefined) return;\n    let stats = new Stats();\n    stats.showPanel(1); // 0: fps, 1: ms, 2: mb, 3+: custom\n\n    document.body.appendChild(child2);\n    let SceneToGet = new Scene();\n    let Renders = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    Renders.setClearColor(0x87ceeb, 1);\n    Renders.shadowMap.enabled = true;\n    Renders.shadowMap.type = THREE.PCFShadowMap;\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    const simplex = new SimplexNoise(Math.random());\n    const clock = new Clock();\n    const planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n    planeGeometry.rotateX(Math.PI / 2);\n    const planeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x567d46,\n      side: DoubleSide\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    plane.position.y = -0.5;\n    plane.receiveShadow = true;\n    SceneToGet.add(plane);\n    const helper = new THREE.CameraHelper(directionalLight.shadow.camera); //SceneToGet.add(helper);\n\n    var geometry = new THREE.PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n      //console.log(geometry.attributes.position.array[(i*3)+2])\n      let x = geometry.attributes.position.array[i * 3] / 128;\n      let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n      let height = simplex.noise2D(x, y) * 30;\n      geometry.attributes.position.array[i * 3 + 2] = height;\n\n      if (height > 23) {\n        colours.push(1, 1, 1);\n      } else if (height > 5) {\n        colours.push(0.56, 0.54, 0.48);\n      } else if (height < -20) {\n        colours.push(0.501, 0.772, 0.87);\n      } else {\n        colours.push(0.56, 0.68, 0.166);\n      }\n    }\n\n    var material = new THREE.MeshPhongMaterial({\n      vertexColors: THREE.VertexColors,\n      reflectivity: 0,\n      roughness: 2\n    });\n    material.flatShading = true;\n    var plane2 = new THREE.Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.y = -3;\n    geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(colours), 3));\n    geometry.computeVertexNormals();\n    let clouds = [];\n\n    for (let i = 0; i < 40; i++) {\n      clouds.push(new GenerateClouds(new Vector3(Math.random() * 300 - 300, 80 + Math.random() * 20, Math.random() * 600 - 400), SceneToGet, Math.random() * 0.2, Math.random() * 6 + 1));\n    }\n\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n    SceneToGet.add(plane2);\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    /*const cameraControls = new CameraControls(Camera, Renders.domElement);\n    cameraControls.azimuthRotateSpeed = -0.3; // negative value to invert rotation direction\n    cameraControls.polarRotateSpeed = -0.3; // negative value to invert rotation direction\n    cameraControls.truckSpeed = 1 / 1e-5 * 3;\n    cameraControls.distance = 5\n    //cameraControls.touches.two = CameraControls.ACTION.TOUCH_ZOOM_TRUCK;\n    cameraControls.saveState();*/\n\n    Camera.position.z = 5;\n    Renders.domElement.requestPointerLock();\n    const gridHelper = new THREE.GridHelper(50, 50);\n    gridHelper.position.y = -1;\n    SceneToGet.add(gridHelper);\n\n    var animate = function () {\n      clouds.forEach((e, i) => {\n        e.update();\n      });\n      Renders.render(SceneToGet, Camera);\n    };\n\n    animate();\n  }, [child]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref => setChild2(ref)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref => setChild(ref)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), \"  \"]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/test.js"],"names":["useEffect","useState","THREE","CameraControls","BoxGeometry","Clock","DoubleSide","Material","Mesh","MeshBasicMaterial","MeshStandardMaterial","PerspectiveCamera","PointLight","Scene","Vector3","WebGLRenderer","MeshLambertMaterial","perlin","require","SimplexNoise","GenerateClouds","getRandomStarField","Stats","install","render","child","setChild","undefined","newTheta","setTheat","day","setDay","child2","setChild2","stats","showPanel","document","body","appendChild","SceneToGet","Renders","antialias","alpha","setClearColor","shadowMap","enabled","type","PCFShadowMap","setSize","window","innerWidth","innerHeight","domElement","simplex","Math","random","clock","planeGeometry","PlaneGeometry","rotateX","PI","planeMaterial","color","side","plane","position","y","receiveShadow","add","helper","CameraHelper","directionalLight","shadow","camera","geometry","PlaneBufferGeometry","colours","i","l","attributes","count","x","array","height","noise2D","push","material","MeshPhongMaterial","vertexColors","VertexColors","reflectivity","roughness","flatShading","plane2","castShadow","addAttribute","BufferAttribute","Float32Array","computeVertexNormals","clouds","Camera","z","requestPointerLock","gridHelper","GridHelper","animate","forEach","e","update","ref"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { useEffect, useState } from \"react\"\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer, MeshLambertMaterial } from \"three\"\nvar perlin = require('perlin-noise');\nvar SimplexNoise = require('simplex-noise');\nimport { GenerateClouds } from '../components/clouds'\nimport { getRandomStarField } from '../components/stars'\nvar Stats = require('stats.js')\n\n\nCameraControls.install({ THREE: THREE });\n\n\nexport default function render() {\n    const [child, setChild] = useState(undefined)\n    const [newTheta, setTheat] = useState(0)\n    const [day, setDay] = useState(\"not day\")\n    const [child2, setChild2]= useState(undefined)\n    \n    useEffect(() => {\n        if (child === undefined) return;\n\n        let stats = new Stats();\n        stats.showPanel( 1 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n        document.body.appendChild( child2 );\n\n        let SceneToGet = new Scene()\n        let Renders = new WebGLRenderer({\n            antialias: true,\n            alpha: true\n        })\n\n        Renders.setClearColor(0x87ceeb, 1);\n        Renders.shadowMap.enabled = true;\n        Renders.shadowMap.type = THREE.PCFShadowMap;\n\n\n        Renders.setSize(window.innerWidth, window.innerHeight)\n        child.appendChild(Renders.domElement);\n\n\n        const simplex = new SimplexNoise(Math.random())\n\n\n\n\n        const clock = new Clock();\n  \n\n        const planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n        planeGeometry.rotateX(Math.PI / 2)\n        const planeMaterial = new THREE.MeshStandardMaterial({ color: 0x567d46, side: DoubleSide })\n        const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n        plane.position.y = -0.5\n        plane.receiveShadow = true;\n        SceneToGet.add(plane);\n\n        const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n        //SceneToGet.add(helper);\n\n\n\n        var geometry = new THREE.PlaneBufferGeometry(500, 500, 100, 100)\n\n        let colours = []\n\n\n        for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n            //console.log(geometry.attributes.position.array[(i*3)+2])\n            let x = geometry.attributes.position.array[(i * 3)] / 128\n            let y = geometry.attributes.position.array[(i * 3) + 1] / 128\n            let height = simplex.noise2D(x, y) * 30\n            geometry.attributes.position.array[(i * 3) + 2] = height\n            if (height > 23) {\n                colours.push(1, 1, 1)\n            }\n            else if (height > 5) {\n                colours.push(0.56, 0.54, 0.48)\n            }\n            else if (height < -20) {\n                colours.push(0.501, 0.772, 0.87)\n            }\n            else {\n                colours.push(0.56, 0.68, 0.166)\n            }\n        }\n        var material = new THREE.MeshPhongMaterial({\n            vertexColors: THREE.VertexColors,\n            reflectivity: 0,\n            roughness: 2,\n        });\n        material.flatShading = true\n        var plane2 = new THREE.Mesh(geometry, material);\n        plane2.receiveShadow = true\n        plane2.castShadow = true\n        plane2.position.y = -3\n        geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(colours), 3));\n        geometry.computeVertexNormals();\n\n        let clouds = []\n        for (let i = 0; i < 40; i++) {\n            clouds.push(new GenerateClouds(new Vector3((Math.random() * 300) - 300, 80 + Math.random() * 20, (Math.random() * 600) - 400), SceneToGet, Math.random() * 0.2, Math.random() * 6 + 1))\n        }\n\n        plane2.rotateX((Math.PI / 2) + Math.PI)\n        SceneToGet.add(plane2);\n\n        var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n        /*const cameraControls = new CameraControls(Camera, Renders.domElement);\n        cameraControls.azimuthRotateSpeed = -0.3; // negative value to invert rotation direction\n        cameraControls.polarRotateSpeed = -0.3; // negative value to invert rotation direction\n        cameraControls.truckSpeed = 1 / 1e-5 * 3;\n        cameraControls.distance = 5\n        //cameraControls.touches.two = CameraControls.ACTION.TOUCH_ZOOM_TRUCK;\n        cameraControls.saveState();*/\n        Camera.position.z = 5;\n\n\n        Renders.domElement.requestPointerLock()\n\n        const gridHelper = new THREE.GridHelper(50, 50);\n        gridHelper.position.y = -1;\n        SceneToGet.add(gridHelper);\n\n\n        var animate = function() {\n            \n\n            clouds.forEach((e, i) => {\n                e.update()\n            })\n\n            Renders.render(SceneToGet, Camera);\n        };\n        animate();\n    }, [child])\n\n    return ( \n        <>\n        <div ref={ref => (setChild2(ref))}></div>\n\n        <\n        div ref = { ref => (setChild(ref)) }\n        />  < / >\n    )\n}\n"]},"metadata":{},"sourceType":"module"}