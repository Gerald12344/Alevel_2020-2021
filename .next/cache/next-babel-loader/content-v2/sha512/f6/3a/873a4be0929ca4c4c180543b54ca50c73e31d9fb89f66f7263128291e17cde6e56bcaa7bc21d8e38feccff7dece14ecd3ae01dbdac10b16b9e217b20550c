{"ast":null,"code":"import { MTLLoader } from \"./mtlCore\";\nimport { OBJLoader } from \"./objCore\";\nexport function AddGLTF(item, scene) {\n  var mtlLoader = new MTLLoader();\n  mtlLoader.load('resources/models/windmill/windmill.mtl', function (mtl) {\n    mtl.preload();\n    var loader = new OBJLoader(); // load a resource\n\n    loader.load( // resource URL\n    item, // called when resource is loaded\n    function (object) {\n      scene.add(object);\n    }, // called when loading is in progresses\n    function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + \"% loaded\");\n    }, // called when loading has errors\n    function (error) {\n      console.log(\"An error happened\");\n    });\n  });\n}\n_c = AddGLTF;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddGLTF\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/Core-API/3dModelHandlers/ObjLoader.js"],"names":["MTLLoader","OBJLoader","AddGLTF","item","scene","mtlLoader","load","mtl","preload","loader","object","add","xhr","console","log","loaded","total","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AACjC,MAAMC,SAAS,GAAG,IAAIL,SAAJ,EAAlB;AACFK,EAAAA,SAAS,CAACC,IAAV,CAAe,wCAAf,EAAyD,UAACC,GAAD,EAAS;AAChEA,IAAAA,GAAG,CAACC,OAAJ;AAEA,QAAMC,MAAM,GAAG,IAAIR,SAAJ,EAAf,CAHgE,CAKhE;;AACAQ,IAAAA,MAAM,CAACH,IAAP,EACI;AACAH,IAAAA,IAFJ,EAGI;AACA,cAAUO,MAAV,EAAkB;AACdN,MAAAA,KAAK,CAACO,GAAN,CAAUD,MAAV;AACH,KANL,EAOI;AACA,cAAUE,GAAV,EAAe;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAaF,GAAG,CAACG,MAAJ,GAAaH,GAAG,CAACI,KAAlB,GAA2B,GAA3B,GAAiC,UAA7C;AACH,KAVL,EAWI;AACA,cAAUC,KAAV,EAAiB;AACbJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,KAdL;AAgBD,GAtBD;AAuBD;KAzBeZ,O","sourcesContent":["import { MTLLoader } from \"./mtlCore\";\nimport { OBJLoader } from \"./objCore\";\n\nexport function AddGLTF(item, scene) {\n    const mtlLoader = new MTLLoader();\n  mtlLoader.load('resources/models/windmill/windmill.mtl', (mtl) => {\n    mtl.preload();\n\n    const loader = new OBJLoader();\n\n    // load a resource\n    loader.load(\n        // resource URL\n        item,\n        // called when resource is loaded\n        function (object) {\n            scene.add(object);\n        },\n        // called when loading is in progresses\n        function (xhr) {\n            console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n        },\n        // called when loading has errors\n        function (error) {\n            console.log(\"An error happened\");\n        }\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}