{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Group } from \"three\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nexport function GenerateTrees(_x, _x2) {\n  return _GenerateTrees.apply(this, arguments);\n}\n_c2 = GenerateTrees;\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene) {\n    var tree;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            scene.add(tree.scene);\n            tree.scene.material.color.setHex(0x694b37);\n            /*\n            let group = new Group()\n            for(let i=0;i<num;i++){\n                let newTree = tree.scene.clone()\n                newTree.position.set(Math.random()*50,Math.random()*50, Math.random()*50)\n                group.add(newTree)\n                console.log('here')\n            }\n            scene.add(group)*/\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}\n\n_c = GenerateTrees;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateTrees\");\n$RefreshReg$(_c2, \"GenerateTrees\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["Group","addGLBFile","GenerateTrees","num","scene","tree","add","material","color","setHex"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,OAAtB;AACA,SAASC,UAAT,QAA2B,0CAA3B;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;MAAsBA,a;;;4EAAf,iBAA6BC,GAA7B,EAAkCC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcH,UAAU,CACvB,sBADuB,EAEvBG,KAFuB,CADxB;;AAAA;AACCC,YAAAA,IADD;AAKHD,YAAAA,KAAK,CAACE,GAAN,CAAUD,IAAI,CAACD,KAAf;AACAC,YAAAA,IAAI,CAACD,KAAL,CAAWG,QAAX,CAAoBC,KAApB,CAA0BC,MAA1B,CAAkC,QAAlC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAfO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAeP,a","sourcesContent":["import { Group } from \"three\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\n\nexport async function GenerateTrees(num, scene){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    scene.add(tree.scene)\n    tree.scene.material.color.setHex( 0x694b37 );\n    /*\n    let group = new Group()\n    for(let i=0;i<num;i++){\n        let newTree = tree.scene.clone()\n        newTree.position.set(Math.random()*50,Math.random()*50, Math.random()*50)\n        group.add(newTree)\n        console.log('here')\n    }\n    scene.add(group)*/\n}"]},"metadata":{},"sourceType":"module"}