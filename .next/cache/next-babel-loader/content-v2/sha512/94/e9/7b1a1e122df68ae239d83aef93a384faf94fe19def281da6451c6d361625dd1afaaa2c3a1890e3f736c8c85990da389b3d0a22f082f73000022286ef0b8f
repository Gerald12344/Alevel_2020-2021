{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Written By Harvey Randall \\\\\nimport { useEffect, useState, useContext } from \"react\";\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer, MeshLambertMaterial } from \"three\";\n\nvar perlin = require('perlin-noise');\n\nvar SimplexNoise = require('simplex-noise');\n\nimport { GenerateClouds } from '../components/clouds';\nimport { getRandomStarField } from '../components/stars';\nimport { CreateDayNightCycle } from \"../components/gameFundalmentals/DayNightCycle\";\n\nvar Stats = require('stats.js');\n\nimport { useAppContext } from '../components/contextHandler';\nimport { GenerateLabel } from '../components/nametag';\nCameraControls.install({\n  THREE: THREE\n});\nexport default function render() {\n  var _ref;\n\n  const {\n    0: child,\n    1: setChild\n  } = useState(undefined);\n  const {\n    0: newTheta,\n    1: setTheat\n  } = useState(0);\n  const {\n    0: day,\n    1: setDay\n  } = useState(\"not day\");\n  const {\n    0: child2,\n    1: setChild2\n  } = useState(undefined);\n  const {\n    0: pos,\n    1: setPos\n  } = useState(undefined);\n  const {\n    0: rot,\n    1: setRot\n  } = useState(undefined);\n  const socket = useAppContext();\n  const {\n    0: recievedSeed,\n    1: setSeed\n  } = useState(undefined);\n  const {\n    0: rendered,\n    1: setRendered\n  } = useState(false);\n  const {\n    0: clients,\n    1: setClients\n  } = useState([]);\n  const {\n    0: personData,\n    1: setPersonalData\n  } = useState(undefined);\n  const {\n    0: latestPerson,\n    1: setLatestestPerson\n  } = useState([]);\n  const {\n    0: gameEventData,\n    1: setgameEventData\n  } = useState([]);\n  socket.once(\"welcome\", (seed, client, data) => {\n    setSeed(seed);\n    console.log(client);\n    setClients(client);\n    setPersonalData(data);\n  });\n  useEffect(() => {\n    if (child === undefined || recievedSeed === undefined || rendered === true) return;\n    setRendered(true);\n    let stats = new Stats();\n    stats.showPanel(1); // 0: fps, 1: ms, 2: mb, 3+: custom\n\n    document.body.appendChild(stats.dom);\n    let SceneToGet = new Scene();\n    let Renders = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    Renders.setClearColor(0x87ceeb, 1);\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    const simplex = new SimplexNoise(recievedSeed);\n    const clock = new Clock();\n    const planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n    planeGeometry.rotateX(Math.PI / 2);\n    const planeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x567d46,\n      side: DoubleSide\n    });\n    const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    plane.position.y = -0.5;\n    SceneToGet.add(plane);\n    let daynight = new CreateDayNightCycle(SceneToGet, Renders);\n    var geometry = new THREE.PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n      //console.log(geometry.attributes.position.array[(i*3)+2])\n      let x = geometry.attributes.position.array[i * 3] / 128;\n      let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n      let height = simplex.noise2D(x, y) * 30;\n      geometry.attributes.position.array[i * 3 + 2] = height;\n\n      if (height > 23) {\n        colours.push(1, 1, 1);\n      } else if (height > 5) {\n        colours.push(0.56, 0.54, 0.48);\n      } else if (height < -20) {\n        colours.push(0.501, 0.772, 0.87);\n      } else {\n        colours.push(0.56, 0.68, 0.166);\n      }\n    }\n\n    var material = new THREE.MeshPhongMaterial({\n      vertexColors: THREE.VertexColors,\n      reflectivity: 0,\n      roughness: 2\n    });\n    material.flatShading = true;\n    var plane2 = new THREE.Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.y = -3;\n    geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(colours), 3));\n    geometry.computeVertexNormals();\n    let clouds = [];\n\n    for (let i = 0; i < 40; i++) {\n      clouds.push(new GenerateClouds(new Vector3(Math.random() * 300 - 300, 80 + Math.random() * 20, Math.random() * 600 - 400), SceneToGet, Math.random() * 0.2, Math.random() * 6 + 1));\n    }\n\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n    SceneToGet.add(plane2);\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    /*const cameraControls = new CameraControls(Camera, Renders.domElement);\n    cameraControls.azimuthRotateSpeed = -0.3; // negative value to invert rotation direction\n    cameraControls.polarRotateSpeed = -0.3; // negative value to invert rotation direction\n    cameraControls.truckSpeed = 1 / 1e-5 * 3;\n    cameraControls.distance = 5\n    //cameraControls.touches.two = CameraControls.ACTION.TOUCH_ZOOM_TRUCK;\n    cameraControls.saveState();*/\n    //Camera.position.z = 5;\n\n    let [w, a, s, d, up, down, e, q, shift] = [false, false, false, false, false, false, false, false, 1];\n    document.addEventListener(\"keydown\", e => {\n      onDocumentKeyDown(e, true);\n    }, false);\n    document.addEventListener(\"keyup\", e => {\n      onDocumentKeyDown(e, false);\n    }, false);\n\n    function onDocumentKeyDown(event, val) {\n      var keyCode = event.which;\n\n      if (keyCode == 87) {\n        w = val;\n      }\n\n      if (keyCode == 83) {\n        s = val;\n      }\n\n      if (keyCode == 65) {\n        a = val;\n      }\n\n      if (keyCode == 68) {\n        d = val;\n      }\n\n      if (keyCode == 38) {\n        up = val;\n      }\n\n      if (keyCode == 40) {\n        down = val;\n      }\n\n      if (keyCode == 69) {\n        e = val;\n      }\n\n      if (keyCode == 81) {\n        q = val;\n      }\n\n      if (keyCode == 16) {\n        shift = val ? 0.5 : 1;\n      }\n    }\n\n    ;\n    Renders.domElement.requestPointerLock();\n    const gridHelper = new THREE.GridHelper(50, 50);\n    gridHelper.position.y = -1;\n    SceneToGet.add(gridHelper);\n    let players = [];\n\n    function MakeCube(color, name) {\n      const group = new THREE.Group();\n      const geometry = new THREE.BoxGeometry(1, 1, 1);\n      const material = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(color),\n        emissive: new THREE.Color(color)\n      });\n      const cube = new THREE.Mesh(geometry, material);\n      group.add(cube);\n      const cyclinder = new THREE.CylinderGeometry(0.3, 0.3, 0.6, 30);\n      const material2 = new THREE.MeshLambertMaterial({\n        color: 0x000000\n      });\n      const cylinderBuild = new THREE.Mesh(cyclinder, material2);\n      cylinderBuild.rotateX(Math.PI / 2 + Math.PI);\n      cylinderBuild.position.set(0, 0, -0.6);\n      group.add(cylinderBuild);\n      GenerateLabel(name, group);\n      SceneToGet.add(group);\n      group.name = name;\n      return group;\n    }\n\n    console.log(clients);\n\n    let addtoGameFeed = (name, event) => {\n      let outArrayToSender = [{\n        name: name,\n        event: event\n      }]; //delete outArray[10] \n      //delete outArray[11] \n\n      setgameEventData([{\n        name,\n        event\n      }]);\n      console.log(\"array below\");\n      console.log(outArrayToSender);\n      console.log(gameEventData);\n    };\n\n    clients.forEach(e => {\n      console.log(\"Adding PLayer \" + e);\n      let cube = MakeCube(e.color, e.name);\n      players[e] = cube;\n    });\n    socket.on('NewPlayer', (id, data) => {\n      console.log(data);\n      console.log(\"New PLyer \" + id);\n      let cube = MakeCube(data.color, data.name);\n      addtoGameFeed(data.name, \"Joined the game!\");\n      players[id] = cube;\n    });\n    socket.on('LostPLayer', (id, how, data) => {\n      console.log(\"lost PLyer \" + id);\n      let cube = players[id];\n      SceneToGet.remove(cube);\n      delete players[id];\n      console.log(data);\n      addtoGameFeed(data.name, how === true ? \"Was removed from the game for being ianctive\" : \"Left the game!\");\n    });\n    socket.on('PlayerLocationUpdate', (id, pos, rot, data) => {\n      let cube = players[id];\n\n      if (cube) {\n        cube.rotation.set(rot._x, rot._y, rot._z);\n        cube.position.set(pos.x, pos.y, pos.z);\n      } else {\n        let cube = MakeCube(data.color, data.name);\n        players[id] = cube;\n      }\n    });\n    setInterval(() => {\n      socket.emit('LocationUpdate', Camera.position, Camera.rotation);\n    }, 30);\n\n    var animate = function () {\n      stats.begin();\n      requestAnimationFrame(animate);\n      daynight.update();\n      clouds.forEach((e, i) => {\n        e.update();\n      });\n\n      if (w) {\n        var direction = new THREE.Vector3();\n        Camera.getWorldDirection(direction);\n        Camera.position.add(direction.multiplyScalar(shift == 1 ? 1 : 0.25)); //Camera.position.z -= 0.1\n      }\n\n      if (s) {\n        var direction = new THREE.Vector3();\n        Camera.getWorldDirection(direction);\n        Camera.position.add(direction.multiplyScalar(-(shift == 1 ? 1 : 0.25)));\n      }\n\n      if (a) {\n        Camera.rotateY(0.04 * shift);\n      }\n\n      if (d) {\n        Camera.rotateY(-0.04 * shift);\n      }\n\n      if (up) {\n        Camera.rotateX(0.04 * shift);\n      }\n\n      if (down) {\n        Camera.rotateX(-0.04 * shift);\n      }\n\n      if (q) {\n        Camera.rotateZ(0.02 * shift);\n      }\n\n      if (e) {\n        Camera.rotateZ(-0.02 * shift);\n      }\n\n      Renders.render(SceneToGet, Camera);\n      stats.end();\n    };\n\n    function listChildren(children) {\n      let child;\n\n      for (let i = 0; i < children.length; i++) {\n        child = children[i]; // Calls this function again if the child has children\n\n        if (child.children) {\n          listChildren(child.children);\n        } // Logs if this child last in recursion\n        else {\n            console.log('Reached bottom with: ', child);\n          }\n      }\n    }\n\n    listChildren(SceneToGet.children);\n    animate();\n  }, [child, clients]);\n  return /*#__PURE__*/_jsxs(\"main\", {\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      style: {\n        position: \"fixed\",\n        marginTop: \"40px\",\n        color: \"white\"\n      },\n      children: personData === undefined ? \"LOADING...\" : personData.name\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        width: \"100vw\",\n        height: \"100vh\",\n        position: \"fixed\",\n        marginTop: \"80px\"\n      },\n      children: latestPerson !== undefined && latestPerson.length > 0 ? latestPerson.map(e => {\n        if (e === undefined) return;\n\n        /*#__PURE__*/\n        _jsxs(\"h3\", {\n          style: {\n            color: \"white\"\n          },\n          children: [e.name, \" - \", e.event]\n        });\n      }) : /*#__PURE__*/_jsx(_Fragment, {\n        children: \"/\"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: ref => setChild2(ref)\n    }), (_ref = recievedSeed === undefined) !== null && _ref !== void 0 ? _ref : /*#__PURE__*/_jsx(\"h1\", {\n      children: \"LOADING SEED!\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      ref: ref => setChild(ref)\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}