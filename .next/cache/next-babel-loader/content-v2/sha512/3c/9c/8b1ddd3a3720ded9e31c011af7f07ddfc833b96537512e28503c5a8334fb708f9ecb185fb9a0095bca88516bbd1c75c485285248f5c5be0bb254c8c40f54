{"ast":null,"code":"import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\n\nvar SimplexNoise = require(\"simplex-noise\");\n\nexport async function GenerateTrees(num, scene, start, bounds, seed) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  scene.add(tree.scene);\n  console.log(tree.scene.children);\n  tree.scene.children[0].material = new MeshStandardMaterial({\n    color: 0x694b37\n  });\n  tree.scene.children[1].material = new MeshStandardMaterial({\n    color: 0x216734\n  });\n  let group = new Group();\n  const simplex = new SimplexNoise(seed);\n\n  for (let i = 0; i < num; i++) {\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    let height = simplex.noise2D(randomVector.x, randomVector.z) * 30;\n\n    if (height > -20) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = randomVector;\n      point.y = height;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    }\n  }\n\n  scene.add(group);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","SimplexNoise","require","GenerateTrees","num","scene","start","bounds","seed","tree","add","console","log","children","material","color","group","simplex","i","randomVector","height","noise2D","x","z","newTree","clone","rotateY","Math","random","point","y","position","set"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,KAAtB,EAA6BC,iBAA7B,EAAgDC,kBAAhD,EAAoEC,iBAApE,EAAuFC,oBAAvF,EAA6GC,SAA7G,EAAwHC,OAAxH,QAAuI,OAAvI;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,UAAT,QAA2B,0CAA3B;;AACA,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,OAAO,eAAeC,aAAf,CAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,MAAhD,EAAwDC,IAAxD,EAA6D;AAChE,MAAIC,IAAI,GAAG,MAAMT,UAAU,CACvB,sBADuB,EAEvBK,KAFuB,CAA3B;AAIAA,EAAAA,KAAK,CAACK,GAAN,CAAUD,IAAI,CAACJ,KAAf;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACJ,KAAL,CAAWQ,QAAvB;AACAJ,EAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,GAAkC,IAAInB,oBAAJ,CAAyB;AAACoB,IAAAA,KAAK,EAAE;AAAR,GAAzB,CAAlC;AACAN,EAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,GAAkC,IAAInB,oBAAJ,CAAyB;AAACoB,IAAAA,KAAK,EAAE;AAAR,GAAzB,CAAlC;AAEA,MAAIC,KAAK,GAAG,IAAIzB,KAAJ,EAAZ;AACA,QAAM0B,OAAO,GAAG,IAAIhB,YAAJ,CAAiBO,IAAjB,CAAhB;;AACA,OAAI,IAAIU,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACd,GAAd,EAAkBc,CAAC,EAAnB,EAAsB;AAClB,QAAIC,YAAY,GAAGpB,2BAA2B,CAAEO,KAAF,EAASC,MAAT,CAA9C;AAEA,QAAIa,MAAM,GAAGH,OAAO,CAACI,OAAR,CAAgBF,YAAY,CAACG,CAA7B,EAAgCH,YAAY,CAACI,CAA7C,IAAkD,EAA/D;;AAEA,QAAGH,MAAM,GAAG,CAAC,EAAb,EAAgB;AACZ,UAAII,OAAO,GAAGf,IAAI,CAACJ,KAAL,CAAWoB,KAAX,EAAd;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB5B,QAAQ,CAAC6B,IAAI,CAACC,MAAL,KAAc,GAAf,CAAxB;AACA,UAAIC,KAAK,GAAGV,YAAZ;AACAU,MAAAA,KAAK,CAACC,CAAN,GAAUV,MAAV;AACAI,MAAAA,OAAO,CAACO,QAAR,CAAiBC,GAAjB,CAAqBH,KAAK,CAACP,CAA3B,EAA8BO,KAAK,CAACC,CAApC,EAAuCD,KAAK,CAACN,CAA7C;AACAP,MAAAA,KAAK,CAACN,GAAN,CAAUc,OAAV;AACH;AACJ;;AACDnB,EAAAA,KAAK,CAACK,GAAN,CAAUM,KAAV;AACH","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nvar SimplexNoise = require(\"simplex-noise\");\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    scene.add(tree.scene)\n    console.log(tree.scene.children)\n    tree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    \n    let group = new Group()\n    const simplex = new SimplexNoise(seed);\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n\n        let height = simplex.noise2D(randomVector.x, randomVector.z) * 30;\n\n        if(height > -20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = randomVector\n            point.y = height\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}