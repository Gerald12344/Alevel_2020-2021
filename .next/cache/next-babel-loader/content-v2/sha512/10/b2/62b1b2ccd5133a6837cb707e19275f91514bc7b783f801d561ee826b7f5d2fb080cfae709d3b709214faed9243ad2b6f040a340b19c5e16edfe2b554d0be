{"ast":null,"code":"import _classCallCheck from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar top = 0;\n\nvar parent = function parent(i) {\n  (i + 1 >>> 1) - 1;\n};\n\nvar left = function left(i) {\n  (i << 1) + 1;\n};\n\nvar right = function right(i) {\n  i + 1 << 1;\n};\n\nexport var PriorityQueue = /*#__PURE__*/function () {\n  function PriorityQueue() {\n    var comparator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (a, b) {\n      a > b;\n    };\n\n    _classCallCheck(this, PriorityQueue);\n\n    this._heap = [];\n    this._comparator = comparator;\n  }\n\n  _createClass(PriorityQueue, [{\n    key: \"size\",\n    value: function size() {\n      return this._heap.length;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.size() === 0;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this._heap[parseInt(top, 10)];\n    }\n  }, {\n    key: \"push\",\n    value: function push() {\n      var _this = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      values.forEach(function (value) {\n        _this._heap.push(value);\n\n        _this._siftUp();\n      });\n      return this.size();\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      var poppedValue = this.peek();\n      var bottom = this.size() - 1;\n\n      if (bottom > top) {\n        this._swap(top, bottom);\n      }\n\n      this._heap.pop();\n\n      this._siftDown();\n\n      return poppedValue;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(value) {\n      var replacedValue = this.peek();\n      this._heap[parseInt(top, 10)] = value;\n\n      this._siftDown();\n\n      return replacedValue;\n    }\n  }, {\n    key: \"_greater\",\n    value: function _greater(i, j) {\n      return this._comparator(this._heap[parseInt(i, 10)], this._heap[parseInt(j, 10)]);\n    }\n  }, {\n    key: \"_swap\",\n    value: function _swap(i, j) {\n      var _ref = [this._heap[parseInt(j, 10)], this._heap[parseInt(i, 10)]];\n      this._heap[parseInt(i, 10)] = _ref[0];\n      this._heap[parseInt(j, 10)] = _ref[1];\n    }\n  }, {\n    key: \"_siftUp\",\n    value: function _siftUp() {\n      var node = this.size() - 1;\n\n      while (node > top && this._greater(node, parent(node))) {\n        this._swap(node, parent(node));\n\n        node = parent(node);\n      }\n    }\n    /*eslint complexity: [\"error\", 20]*/\n\n  }, {\n    key: \"_siftDown\",\n    value: function _siftDown() {\n      var node = top;\n\n      while (left(node) < this.size() && this._greater(left(node), node) || right(node) < this.size() && this._greater(right(node), node)) {\n        var maxChild = right(node) < this.size() && this._greater(right(node), left(node)) ? right(node) : left(node);\n\n        this._swap(node, maxChild);\n\n        node = maxChild;\n      }\n    }\n  }]);\n\n  return PriorityQueue;\n}();","map":null,"metadata":{},"sourceType":"module"}