{"ast":null,"code":"import { Vector2, Vector3 } from \"three\";\nimport { roundnum } from \"../../Algorithms/MathUtils\";\nimport { generateTerrainChunk } from \"../ProceduleTerrain\";\nimport { GenerateTrees } from \"../staticAssets/treeBuilder\";\nimport { checkBiomeLocation } from \"./utils/GenerateBiomesMap.ts\";\nexport function generateTerrainAroundPlayer(seed, camera, scene) {\n  let loadedChunks = {};\n  let chunksInMem = {};\n  setInterval(() => {\n    let vector = new Vector3();\n    camera.getWorldPosition(vector);\n    let ChunkYourIn = new Vector2(roundnum(vector.x, 500), roundnum(vector.z, 500));\n\n    if (ChunkYourIn.x === -0) {\n      ChunkYourIn.x = 0;\n    }\n\n    if (ChunkYourIn.y === -0) {\n      ChunkYourIn.y = 0;\n    }\n\n    if (loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`] !== undefined && loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`] === true) {// Existing terrain, left hear for a future API\n    } else {\n      // Check Chunk\n      console.log(checkBiomeLocation(ChunkYourIn, seed, 0.1, 0));\n      console.log('Generating, ', ChunkYourIn.x, ChunkYourIn.y, loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`]);\n      loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`] = true;\n      let chunk = generateTerrainChunk(seed, ChunkYourIn, 30);\n      GenerateTrees(300, scene, new Vector3(ChunkYourIn.x - 250, 250, ChunkYourIn.y - 250), new Vector3(ChunkYourIn.x + 250, 250, ChunkYourIn.y + 250), chunk);\n      chunksInMem[`${ChunkYourIn.x}:${ChunkYourIn.y}`] = chunk;\n      scene.add(chunk);\n    }\n  }, 1000);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/TerrainManagement/terrainChunkriser.js"],"names":["Vector2","Vector3","roundnum","generateTerrainChunk","GenerateTrees","checkBiomeLocation","generateTerrainAroundPlayer","seed","camera","scene","loadedChunks","chunksInMem","setInterval","vector","getWorldPosition","ChunkYourIn","x","z","y","undefined","console","log","chunk","add"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AAGA,OAAO,SAASC,2BAAT,CAAqCC,IAArC,EAA2CC,MAA3C,EAAmDC,KAAnD,EAA0D;AAC7D,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACAC,EAAAA,WAAW,CAAC,MAAM;AACd,QAAIC,MAAM,GAAG,IAAIZ,OAAJ,EAAb;AACAO,IAAAA,MAAM,CAACM,gBAAP,CAAwBD,MAAxB;AACA,QAAIE,WAAW,GAAI,IAAIf,OAAJ,CAAYE,QAAQ,CAACW,MAAM,CAACG,CAAR,EAAW,GAAX,CAApB,EAAqCd,QAAQ,CAACW,MAAM,CAACI,CAAR,EAAW,GAAX,CAA7C,CAAnB;;AACA,QAAGF,WAAW,CAACC,CAAZ,KAAkB,CAAC,CAAtB,EAAwB;AACpBD,MAAAA,WAAW,CAACC,CAAZ,GAAgB,CAAhB;AACH;;AACD,QAAGD,WAAW,CAACG,CAAZ,KAAkB,CAAC,CAAtB,EAAwB;AACpBH,MAAAA,WAAW,CAACG,CAAZ,GAAgB,CAAhB;AACH;;AACD,QAAGR,YAAY,CAAE,GAAEK,WAAW,CAACC,CAAE,IAAGD,WAAW,CAACG,CAAE,EAAnC,CAAZ,KAAsDC,SAAtD,IAAmET,YAAY,CAAE,GAAEK,WAAW,CAACC,CAAE,IAAGD,WAAW,CAACG,CAAE,EAAnC,CAAZ,KAAsD,IAA5H,EAAiI,CAC7H;AACH,KAFD,MAEK;AAED;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYhB,kBAAkB,CAACU,WAAD,EAAaR,IAAb,EAAmB,GAAnB,EAAwB,CAAxB,CAA9B;AAEAa,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,WAAW,CAACC,CAAxC,EAA2CD,WAAW,CAACG,CAAvD,EAA0DR,YAAY,CAAE,GAAEK,WAAW,CAACC,CAAE,IAAGD,WAAW,CAACG,CAAE,EAAnC,CAAtE;AACAR,MAAAA,YAAY,CAAE,GAAEK,WAAW,CAACC,CAAE,IAAGD,WAAW,CAACG,CAAE,EAAnC,CAAZ,GAAmD,IAAnD;AACA,UAAII,KAAK,GAAGnB,oBAAoB,CAACI,IAAD,EAAOQ,WAAP,EAAoB,EAApB,CAAhC;AACAX,MAAAA,aAAa,CAAC,GAAD,EAAMK,KAAN,EAAa,IAAIR,OAAJ,CAAYc,WAAW,CAACC,CAAZ,GAAc,GAA1B,EAA+B,GAA/B,EAAmCD,WAAW,CAACG,CAAZ,GAAc,GAAjD,CAAb,EAAoE,IAAIjB,OAAJ,CAAYc,WAAW,CAACC,CAAZ,GAAc,GAA1B,EAA8B,GAA9B,EAAkCD,WAAW,CAACG,CAAZ,GAAc,GAAhD,CAApE,EAA0HI,KAA1H,CAAb;AACAX,MAAAA,WAAW,CAAE,GAAEI,WAAW,CAACC,CAAE,IAAGD,WAAW,CAACG,CAAE,EAAnC,CAAX,GAAmDI,KAAnD;AACAb,MAAAA,KAAK,CAACc,GAAN,CAAUD,KAAV;AACH;AACJ,GAxBU,EAwBT,IAxBS,CAAX;AA0BH","sourcesContent":["import { Vector2, Vector3 } from \"three\";\nimport { roundnum } from \"../../Algorithms/MathUtils\";\nimport { generateTerrainChunk } from \"../ProceduleTerrain\";\nimport { GenerateTrees } from \"../staticAssets/treeBuilder\";\nimport { checkBiomeLocation } from \"./utils/GenerateBiomesMap.ts\";\n\n\nexport function generateTerrainAroundPlayer(seed, camera, scene) {\n    let loadedChunks = {}\n    let chunksInMem = {}\n    setInterval(() => {\n        let vector = new Vector3();\n        camera.getWorldPosition(vector);\n        let ChunkYourIn  = new Vector2(roundnum(vector.x, 500), roundnum(vector.z, 500))\n        if(ChunkYourIn.x === -0){\n            ChunkYourIn.x = 0\n        }\n        if(ChunkYourIn.y === -0){\n            ChunkYourIn.y = 0\n        }\n        if(loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`] !== undefined && loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`] === true){\n            // Existing terrain, left hear for a future API\n        }else{\n\n            // Check Chunk\n            console.log(checkBiomeLocation(ChunkYourIn,seed, 0.1, 0))\n\n            console.log('Generating, ', ChunkYourIn.x, ChunkYourIn.y, loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`])\n            loadedChunks[`${ChunkYourIn.x}:${ChunkYourIn.y}`]= true\n            let chunk = generateTerrainChunk(seed, ChunkYourIn, 30);\n            GenerateTrees(300, scene, new Vector3(ChunkYourIn.x-250, 250,ChunkYourIn.y-250), new Vector3(ChunkYourIn.x+250,250,ChunkYourIn.y+250), chunk)\n            chunksInMem[`${ChunkYourIn.x}:${ChunkYourIn.y}`] = chunk\n            scene.add(chunk)\n        }\n    },1000)\n\n}\n"]},"metadata":{},"sourceType":"module"}