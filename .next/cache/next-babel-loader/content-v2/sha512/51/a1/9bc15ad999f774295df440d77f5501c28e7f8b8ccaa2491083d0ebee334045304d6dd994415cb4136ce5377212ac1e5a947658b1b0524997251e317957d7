{"ast":null,"code":"import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nexport async function GenerateTrees(num, scene, start, bounds, terrain) {\n  let tree = await addGLBFile(\"/Assets/PineTree.glb\", scene);\n  let snowyTree = await addGLBFile(\"/Assets/SnowyPineTree.glb\", scene);\n  tree.scene.children[0].material = new MeshStandardMaterial({\n    color: 0x694b37\n  });\n  tree.scene.children[1].material = new MeshStandardMaterial({\n    color: 0x216734\n  });\n  snowyTree.scene.children[0].material = new MeshStandardMaterial({\n    color: 0x694b37\n  });\n  snowyTree.scene.children[1].material = new MeshStandardMaterial({\n    color: 0x216734\n  });\n  snowyTree.scene.children[2].material = new MeshStandardMaterial({\n    color: 0xffffff\n  });\n  let group = new Group();\n  let raycaster = new Raycaster();\n\n  for (let i = 0; i < num; i++) {\n    var _intersects$, _intersects$2, _intersects$3;\n\n    let randomVector = randomVectorBetweenPoints2D(start, bounds);\n    randomVector.y = 50;\n    raycaster.set(randomVector, new Vector3(0, -1, 0));\n    const intersects = raycaster.intersectObjects([terrain]);\n\n    if (intersects[0] !== undefined && ((_intersects$ = intersects[0]) === null || _intersects$ === void 0 ? void 0 : _intersects$.point.y) > -20 && ((_intersects$2 = intersects[0]) === null || _intersects$2 === void 0 ? void 0 : _intersects$2.point.y) < 20) {\n      let newTree = tree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    } else if (intersects[0] !== undefined && ((_intersects$3 = intersects[0]) === null || _intersects$3 === void 0 ? void 0 : _intersects$3.point.y) > 20) {\n      let newTree = snowyTree.scene.clone();\n      newTree.rotateY(radiants(Math.random() * 360));\n      let point = intersects[0].point;\n      newTree.position.set(point.x, point.y, point.z);\n      group.add(newTree);\n    }\n  }\n\n  scene.add(group);\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","GenerateTrees","num","scene","start","bounds","terrain","tree","snowyTree","children","material","color","group","raycaster","i","randomVector","y","set","intersects","intersectObjects","undefined","point","newTree","clone","rotateY","Math","random","position","x","z","add"],"mappings":"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","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\n\nexport async function GenerateTrees(num, scene, start, bounds, terrain){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    let snowyTree = await addGLBFile(\n        \"/Assets/SnowyPineTree.glb\",\n        scene\n    );\n    tree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    snowyTree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    snowyTree.scene.children[2].material = new MeshStandardMaterial({color: 0xffffff })\n\n    \n    let group = new Group()\n    let raycaster = new Raycaster()\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n        randomVector.y = 50\n\n        raycaster.set(randomVector, new Vector3(0,-1,0))\n        const intersects = raycaster.intersectObjects( [terrain] );\n        if(intersects[0] !== undefined && intersects[0]?.point.y > -20 && intersects[0]?.point.y < 20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }else if(intersects[0] !== undefined && intersects[0]?.point.y > 20){\n            let newTree = snowyTree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = intersects[0].point\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}