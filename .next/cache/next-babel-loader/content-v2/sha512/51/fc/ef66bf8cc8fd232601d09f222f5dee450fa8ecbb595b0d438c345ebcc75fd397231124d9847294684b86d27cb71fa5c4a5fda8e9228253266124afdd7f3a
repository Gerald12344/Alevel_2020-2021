{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry } from \"three\";\n\nvar SimplexNoise = require(\"simplex-noise\");\n\nvar currentTerrain;\nexport function ReturnTerrainPointer() {\n  return currentTerrain;\n}\n/*eslint complexity: [\"error\", 20]*/\n\n_c = ReturnTerrainPointer;\nexport function generateTerrain(seed, SceneToGet) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  var simplex = new SimplexNoise(seed);\n  var geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  var colours = []; //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    var x = geometry.attributes.position.array[i * 3] / 128;\n    var y = geometry.attributes.position.array[i * 3 + 1] / 128; // Check Height from Perlin Noise Generator\n\n    var height = simplex.noise2D(x, y) * 30; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n  } //------------[Create Material]------------\\\\\n\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Create Mesh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true;\n  plane2.position.y = -3;\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3)); //geometry.computeVertexNormals();\n  //------------[Add to Base Scene]------------\\\\\n\n  currentTerrain = plane2;\n  plane2.name = \"MAIN_TERRAIN\";\n  SceneToGet.add(plane2);\n}\nexport function generateTerrainChunk(seed, Position, gain) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  var simplex = new SimplexNoise(seed);\n  var geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  var colours = [];\n  var xx = 0;\n  var yy = 0; //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    var x = geometry.attributes.position.array[i * 3] / 128;\n    var y = geometry.attributes.position.array[i * 3 + 1] / 128; // Check Height from Perlin Noise Generator\n\n    var height = simplex.noise2D(x + Position.x * 128, y + Position.y * 128) * gain; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n\n    xx = x + Position.x * 128;\n    yy = y;\n  }\n\n  console.log(xx); //------------[Create Material]------------\\\\\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Create Mesh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true; //plane2.position.y = -3;\n\n  plane2.position.set(Position.x, -3, Position.y);\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3)); //geometry.computeVertexNormals();\n  //------------[Add to Base Scene]------------\\\\\n\n  currentTerrain = plane2;\n  plane2.name = \"Terrain_Chunk\";\n  return plane2;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ReturnTerrainPointer\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/ProceduleTerrain.js"],"names":["BufferAttribute","Mesh","MeshPhongMaterial","PlaneBufferGeometry","SimplexNoise","require","currentTerrain","ReturnTerrainPointer","generateTerrain","seed","SceneToGet","simplex","geometry","colours","i","l","attributes","position","count","x","array","y","height","noise2D","push","material","vertexColors","reflectivity","roughness","flatShading","plane2","receiveShadow","castShadow","rotateX","Math","PI","setAttribute","Float32Array","name","add","generateTerrainChunk","Position","gain","xx","yy","console","log","set"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport {\n    BufferAttribute,\n    Mesh,\n    MeshPhongMaterial,\n    PlaneBufferGeometry,\n} from \"three\";\nvar SimplexNoise = require(\"simplex-noise\");\n\nlet currentTerrain;\n\nexport function ReturnTerrainPointer(){\n    return currentTerrain;\n}\n\n/*eslint complexity: [\"error\", 20]*/\nexport function generateTerrain(seed, SceneToGet) {\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed);\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        let x = geometry.attributes.position.array[i * 3] / 128;\n        let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(x, y) * 30;\n        // Set the height accordingly\n        geometry.attributes.position.array[i * 3 + 2] = height;\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1);\n        } else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48);\n        } else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87);\n        } else {\n            colours.push(0.56, 0.68, 0.166);\n        }\n    }\n\n\n    //------------[Create Material]------------\\\\\n    var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Create Mesh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.y = -3;\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n    //geometry.computeVertexNormals();\n\n    //------------[Add to Base Scene]------------\\\\\n    currentTerrain = plane2\n    plane2.name = \"MAIN_TERRAIN\"\n    SceneToGet.add(plane2);\n}\n\n\nexport function generateTerrainChunk(seed, Position, gain) {\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed);\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n    let xx = 0\n    let yy = 0\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        let x = geometry.attributes.position.array[i * 3] / 128;\n        let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(x+Position.x*128, y+Position.y*128) * gain;\n        // Set the height accordingly\n        geometry.attributes.position.array[i * 3 + 2] = height;\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1);\n        } else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48);\n        } else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87);\n        } else {\n            colours.push(0.56, 0.68, 0.166);\n        }\n        xx= x+Position.x*128\n        yy=y\n    }\n    console.log(xx)\n\n    //------------[Create Material]------------\\\\\n    var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Create Mesh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    //plane2.position.y = -3;\n    plane2.position.set(Position.x, -3, Position.y)\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n    //geometry.computeVertexNormals();\n\n    //------------[Add to Base Scene]------------\\\\\n    currentTerrain = plane2\n    plane2.name = \"Terrain_Chunk\"\n    return plane2\n}\n\n"]},"metadata":{},"sourceType":"module"}