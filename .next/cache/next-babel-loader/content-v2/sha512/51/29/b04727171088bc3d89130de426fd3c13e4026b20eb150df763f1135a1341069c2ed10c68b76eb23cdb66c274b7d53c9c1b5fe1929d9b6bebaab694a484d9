{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/test.js\",\n    _s = $RefreshSig$();\n\n// Written By Harvey Randall \\\\\nimport { useEffect, useState } from \"react\";\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer, MeshLambertMaterial } from \"three\";\n\nvar perlin = require('perlin-noise');\n\nvar SimplexNoise = require('simplex-noise');\n\nimport { GenerateClouds } from '../components/clouds';\nimport { getRandomStarField } from '../components/stars';\n\nvar Stats = require('stats.js');\n\nCameraControls.install({\n  THREE: THREE\n});\nexport default function render() {\n  _s();\n\n  var _useState = useState(undefined),\n      child = _useState[0],\n      setChild = _useState[1];\n\n  var _useState2 = useState(0),\n      newTheta = _useState2[0],\n      setTheat = _useState2[1];\n\n  var _useState3 = useState(\"not day\"),\n      day = _useState3[0],\n      setDay = _useState3[1];\n\n  var _useState4 = useState(undefined),\n      child2 = _useState4[0],\n      setChild2 = _useState4[1];\n\n  useEffect(function () {\n    if (child === undefined) return;\n    var stats = new Stats();\n    stats.showPanel(1); // 0: fps, 1: ms, 2: mb, 3+: custom\n\n    document.body.appendChild(ref);\n    var SceneToGet = new Scene();\n    var Renders = new WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    Renders.setClearColor(0x87ceeb, 1);\n    Renders.shadowMap.enabled = true;\n    Renders.shadowMap.type = THREE.PCFShadowMap;\n    Renders.setSize(window.innerWidth, window.innerHeight);\n    child.appendChild(Renders.domElement);\n    var geometry = new BoxGeometry(1, 1, 1);\n    var material = new MeshStandardMaterial({\n      color: 0xfffff\n    });\n    var cube = new Mesh(geometry, material);\n    cube.castShadow = true;\n    cube.receiveShadow = true;\n    SceneToGet.add(cube);\n    var simplex = new SimplexNoise(Math.random());\n    var clock = new Clock();\n    var noise = perlin.generatePerlinNoise(300, 300, {\n      amplitude: 600\n    });\n    var directionalLight = new THREE.DirectionalLight(0xddffee, 0.5, 100);\n    directionalLight.shadow.mapSize.width = 4096;\n    directionalLight.shadow.mapSize.height = 4096;\n    directionalLight.shadow.camera.far = 3000;\n    /*\n    \n    directionalLight.shadowCameraLeft = -200;\n    directionalLight.shadowCameraRight = 200;\n    directionalLight.shadowCameraTop = 250;\n    directionalLight.shadowCameraBottom = -200;*/\n\n    directionalLight.position.set(1, 100, 100);\n    directionalLight.castShadow = true;\n    SceneToGet.add(directionalLight);\n    var directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.2, 100);\n    directionalLight2.position.set(-1, -100, -100);\n    directionalLight2.castShadow = true;\n    SceneToGet.add(directionalLight2);\n    var light = new THREE.AmbientLight(0xaaaaaa, 0.5); // soft white light\n\n    SceneToGet.add(light);\n    var planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n    planeGeometry.rotateX(Math.PI / 2);\n    var planeMaterial = new THREE.MeshStandardMaterial({\n      color: 0x567d46,\n      side: DoubleSide\n    });\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\n    plane.position.y = -0.5;\n    plane.receiveShadow = true;\n    SceneToGet.add(plane);\n    var helper = new THREE.CameraHelper(directionalLight.shadow.camera); //SceneToGet.add(helper);\n\n    var skyBox = new THREE.BoxGeometry(1200, 1200, 1200);\n    var skyBoxMaterial = new THREE.MeshBasicMaterial({\n      map: getRandomStarField(600, 2048, 2048),\n      side: THREE.BackSide\n    });\n    var sky = new THREE.Mesh(skyBox, skyBoxMaterial);\n    var geometry = new THREE.PlaneBufferGeometry(500, 500, 100, 100);\n    var colours = [];\n\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n      //console.log(geometry.attributes.position.array[(i*3)+2])\n      var x = geometry.attributes.position.array[i * 3] / 128;\n      var y = geometry.attributes.position.array[i * 3 + 1] / 128;\n      var height = simplex.noise2D(x, y) * 30;\n      geometry.attributes.position.array[i * 3 + 2] = height;\n\n      if (height > 23) {\n        colours.push(1, 1, 1);\n      } else if (height > 5) {\n        colours.push(0.56, 0.54, 0.48);\n      } else if (height < -20) {\n        colours.push(0.501, 0.772, 0.87);\n      } else {\n        colours.push(0.56, 0.68, 0.166);\n      }\n    }\n\n    var material = new THREE.MeshPhongMaterial({\n      vertexColors: THREE.VertexColors,\n      reflectivity: 0,\n      roughness: 2\n    });\n    material.flatShading = true;\n    var plane2 = new THREE.Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.y = -3;\n    geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(colours), 3));\n    geometry.computeVertexNormals();\n    var clouds = [];\n\n    for (var _i = 0; _i < 40; _i++) {\n      clouds.push(new GenerateClouds(new Vector3(Math.random() * 300 - 300, 80 + Math.random() * 20, Math.random() * 600 - 400), SceneToGet, Math.random() * 0.2, Math.random() * 6 + 1));\n    }\n\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n    SceneToGet.add(plane2);\n    var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var cameraControls = new CameraControls(Camera, Renders.domElement);\n    cameraControls.azimuthRotateSpeed = -0.3; // negative value to invert rotation direction\n\n    cameraControls.polarRotateSpeed = -0.3; // negative value to invert rotation direction\n\n    cameraControls.truckSpeed = 1 / 1e-5 * 3;\n    cameraControls.distance = 5; //cameraControls.touches.two = CameraControls.ACTION.TOUCH_ZOOM_TRUCK;\n\n    cameraControls.saveState();\n    Camera.position.z = 5;\n    Renders.domElement.requestPointerLock();\n    var gridHelper = new THREE.GridHelper(50, 50);\n    gridHelper.position.y = -1;\n    SceneToGet.add(gridHelper);\n\n    function rotateAboutPoint(obj, point, axis, theta, pointIsWorld) {\n      pointIsWorld = pointIsWorld === undefined ? false : pointIsWorld;\n\n      if (pointIsWorld) {\n        obj.parent.localToWorld(obj.position); // compensate for world coordinate\n      }\n\n      obj.position.sub(point); // remove the offset\n\n      obj.position.applyAxisAngle(axis, theta); // rotate the POSITION\n\n      obj.position.add(point); // re-add the offset\n\n      if (pointIsWorld) {\n        obj.parent.worldToLocal(obj.position); // undo world coordinates compensation\n      }\n\n      obj.rotateOnAxis(axis, theta); // rotate the OBJECT\n\n      return theta;\n    }\n\n    var time = 0;\n    var sun = new THREE.SphereBufferGeometry(20, 20, 100, 100);\n    var sunMaterial = new MeshLambertMaterial({\n      emissive: 0xf9d71c\n    });\n    var sunmesh = new THREE.Mesh(sun, sunMaterial);\n    sunmesh.position.set(1, 300, 300);\n    SceneToGet.add(sunmesh);\n    var moon = new THREE.SphereBufferGeometry(10, 10, 100, 100);\n    var moonMaterial = new MeshLambertMaterial({\n      emissive: 0xffffff\n    });\n    var moonMesh = new THREE.Mesh(moon, moonMaterial);\n    moonMesh.position.set(-1, -200, -300);\n    SceneToGet.add(moonMesh);\n    var t = 0;\n    var dTIme = 0;\n\n    var animate = function animate() {\n      requestAnimationFrame(animate); //cube.rotation.x += 0.01;\n\n      var theta = rotateAboutPoint(directionalLight, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      rotateAboutPoint(sunmesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      rotateAboutPoint(moonMesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      rotateAboutPoint(directionalLight2, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true);\n      var angle = THREE.MathUtils.radToDeg(cube.rotation.x);\n      setTheat(THREE.MathUtils.radToDeg(cube.rotation.x));\n\n      if (angle < 40) {\n        t = 0;\n        directionalLight.color.setHex(0xddffee);\n        dTIme += 0.003;\n\n        if (dTIme >= 1) {\n          dTIme = 1;\n        }\n\n        Renders.setClearColor(new THREE.Color().lerpColors(new THREE.Color(0xFDB813), new THREE.Color(0x87ceeb), dTIme), 1);\n        light.intensity = 0.5;\n        directionalLight2.color.setHex(0x000000);\n        setDay(dTIme + ' ' + t);\n        directionalLight.intensity = 0.5;\n        directionalLight2.intensity = 0;\n        SceneToGet.remove(sky);\n      } else if (angle) {\n        dTIme = 0;\n        setDay(dTIme + ' ' + t);\n        t += 0.01;\n\n        if (t >= 1) {\n          t = 1;\n        }\n\n        directionalLight2.color.setHex(0xffffff); //console.log(new THREE.Color().lerpColors(new THREE.Color( 0x87ceeb ), new THREE.Color( 0x000000 ), t))\n\n        Renders.setClearColor(new THREE.Color().lerpColors(new THREE.Color(0x87ceeb), new THREE.Color(0x000000), t), 1);\n\n        if (t >= 1) {\n          SceneToGet.add(sky);\n        }\n\n        light.intensity = 0.2;\n        directionalLight.intensity = 0;\n        directionalLight2.intensity = 0.2;\n        sky.rotation.x += -0.0004;\n      }\n\n      cube.rotateOnAxis(new Vector3(1, 0, 0), theta);\n      var delta = clock.getDelta();\n      var elapsed = clock.getElapsedTime();\n      var updated = cameraControls.update(delta);\n      clouds.forEach(function (e, i) {\n        var result = e.update();\n      });\n      Renders.render(SceneToGet, Camera);\n    };\n\n    animate();\n  }, [child]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: function (_ref) {\n        function ref(_x) {\n          return _ref.apply(this, arguments);\n        }\n\n        ref.toString = function () {\n          return _ref.toString();\n        };\n\n        return ref;\n      }(function (ref) {\n        return setChild2(ref);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: function (_ref2) {\n        function ref(_x2) {\n          return _ref2.apply(this, arguments);\n        }\n\n        ref.toString = function () {\n          return _ref2.toString();\n        };\n\n        return ref;\n      }(function (ref) {\n        return setChild(ref);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), \"  \"]\n  }, void 0, true);\n}\n\n_s(render, \"vKdcy31UHavqJVmz4TqjZ6mceHQ=\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/pages/test.js"],"names":["useEffect","useState","THREE","CameraControls","BoxGeometry","Clock","DoubleSide","Material","Mesh","MeshBasicMaterial","MeshStandardMaterial","PerspectiveCamera","PointLight","Scene","Vector3","WebGLRenderer","MeshLambertMaterial","perlin","require","SimplexNoise","GenerateClouds","getRandomStarField","Stats","install","render","undefined","child","setChild","newTheta","setTheat","day","setDay","child2","setChild2","stats","showPanel","document","body","appendChild","ref","SceneToGet","Renders","antialias","alpha","setClearColor","shadowMap","enabled","type","PCFShadowMap","setSize","window","innerWidth","innerHeight","domElement","geometry","material","color","cube","castShadow","receiveShadow","add","simplex","Math","random","clock","noise","generatePerlinNoise","amplitude","directionalLight","DirectionalLight","shadow","mapSize","width","height","camera","far","position","set","directionalLight2","light","AmbientLight","planeGeometry","PlaneGeometry","rotateX","PI","planeMaterial","side","plane","y","helper","CameraHelper","skyBox","skyBoxMaterial","map","BackSide","sky","PlaneBufferGeometry","colours","i","l","attributes","count","x","array","noise2D","push","MeshPhongMaterial","vertexColors","VertexColors","reflectivity","roughness","flatShading","plane2","addAttribute","BufferAttribute","Float32Array","computeVertexNormals","clouds","Camera","cameraControls","azimuthRotateSpeed","polarRotateSpeed","truckSpeed","distance","saveState","z","requestPointerLock","gridHelper","GridHelper","rotateAboutPoint","obj","point","axis","theta","pointIsWorld","parent","localToWorld","sub","applyAxisAngle","worldToLocal","rotateOnAxis","time","sun","SphereBufferGeometry","sunMaterial","emissive","sunmesh","moon","moonMaterial","moonMesh","t","dTIme","animate","requestAnimationFrame","angle","MathUtils","radToDeg","rotation","setHex","Color","lerpColors","intensity","remove","delta","getDelta","elapsed","getElapsedTime","updated","update","forEach","e","result"],"mappings":"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","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport { useEffect, useState } from \"react\"\nimport * as THREE from 'three';\nimport CameraControls from 'camera-controls';\nimport { BoxGeometry, Clock, DoubleSide, Material, Mesh, MeshBasicMaterial, MeshStandardMaterial, PerspectiveCamera, PointLight, Scene, Vector3, WebGLRenderer, MeshLambertMaterial } from \"three\"\nvar perlin = require('perlin-noise');\nvar SimplexNoise = require('simplex-noise');\nimport { GenerateClouds } from '../components/clouds'\nimport { getRandomStarField } from '../components/stars'\nvar Stats = require('stats.js')\n\n\nCameraControls.install({ THREE: THREE });\n\n\nexport default function render() {\n    const [child, setChild] = useState(undefined)\n    const [newTheta, setTheat] = useState(0)\n    const [day, setDay] = useState(\"not day\")\n    const [child2, setChild2]= useState(undefined)\n    \n    useEffect(() => {\n        if (child === undefined) return;\n\n        let stats = new Stats();\n        stats.showPanel( 1 ); // 0: fps, 1: ms, 2: mb, 3+: custom\n        document.body.appendChild( ref );\n\n        let SceneToGet = new Scene()\n        let Renders = new WebGLRenderer({\n            antialias: true,\n            alpha: true\n        })\n\n        Renders.setClearColor(0x87ceeb, 1);\n        Renders.shadowMap.enabled = true;\n        Renders.shadowMap.type = THREE.PCFShadowMap;\n\n\n        Renders.setSize(window.innerWidth, window.innerHeight)\n        child.appendChild(Renders.domElement);\n\n        var geometry = new BoxGeometry(1, 1, 1);\n        var material = new MeshStandardMaterial({ color: 0xfffff });\n        var cube = new Mesh(geometry, material);\n        cube.castShadow = true\n        cube.receiveShadow = true\n        SceneToGet.add(cube);\n\n        const simplex = new SimplexNoise(Math.random())\n\n\n\n\n        const clock = new Clock();\n        const noise = perlin.generatePerlinNoise(300, 300, { amplitude: 600 });\n\n        const directionalLight = new THREE.DirectionalLight(0xddffee, 0.5, 100);\n        directionalLight.shadow.mapSize.width = 4096;\n        directionalLight.shadow.mapSize.height = 4096;\n        directionalLight.shadow.camera.far = 3000;\n\n        /*\n        \n        directionalLight.shadowCameraLeft = -200;\n        directionalLight.shadowCameraRight = 200;\n        directionalLight.shadowCameraTop = 250;\n        directionalLight.shadowCameraBottom = -200;*/\n        directionalLight.position.set(1, 100, 100)\n        directionalLight.castShadow = true\n        SceneToGet.add(directionalLight);\n\n        const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.2, 100);\n        directionalLight2.position.set(-1, -100, -100)\n        directionalLight2.castShadow = true\n        SceneToGet.add(directionalLight2);\n\n\n        const light = new THREE.AmbientLight(0xaaaaaa, 0.5); // soft white light\n        SceneToGet.add(light);\n\n        const planeGeometry = new THREE.PlaneGeometry(20, 20, 32, 32);\n        planeGeometry.rotateX(Math.PI / 2)\n        const planeMaterial = new THREE.MeshStandardMaterial({ color: 0x567d46, side: DoubleSide })\n        const plane = new THREE.Mesh(planeGeometry, planeMaterial);\n        plane.position.y = -0.5\n        plane.receiveShadow = true;\n        SceneToGet.add(plane);\n\n        const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n        //SceneToGet.add(helper);\n\n        var skyBox = new THREE.BoxGeometry(1200, 1200, 1200);\n        var skyBoxMaterial = new THREE.MeshBasicMaterial({\n            map: getRandomStarField(600, 2048, 2048),\n            side: THREE.BackSide,\n        });\n        var sky = new THREE.Mesh(skyBox, skyBoxMaterial);\n\n\n        var geometry = new THREE.PlaneBufferGeometry(500, 500, 100, 100)\n\n        let colours = []\n\n\n        for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n            //console.log(geometry.attributes.position.array[(i*3)+2])\n            let x = geometry.attributes.position.array[(i * 3)] / 128\n            let y = geometry.attributes.position.array[(i * 3) + 1] / 128\n            let height = simplex.noise2D(x, y) * 30\n            geometry.attributes.position.array[(i * 3) + 2] = height\n            if (height > 23) {\n                colours.push(1, 1, 1)\n            }\n            else if (height > 5) {\n                colours.push(0.56, 0.54, 0.48)\n            }\n            else if (height < -20) {\n                colours.push(0.501, 0.772, 0.87)\n            }\n            else {\n                colours.push(0.56, 0.68, 0.166)\n            }\n        }\n        var material = new THREE.MeshPhongMaterial({\n            vertexColors: THREE.VertexColors,\n            reflectivity: 0,\n            roughness: 2,\n        });\n        material.flatShading = true\n        var plane2 = new THREE.Mesh(geometry, material);\n        plane2.receiveShadow = true\n        plane2.castShadow = true\n        plane2.position.y = -3\n        geometry.addAttribute('color', new THREE.BufferAttribute(new Float32Array(colours), 3));\n        geometry.computeVertexNormals();\n\n        let clouds = []\n        for (let i = 0; i < 40; i++) {\n            clouds.push(new GenerateClouds(new Vector3((Math.random() * 300) - 300, 80 + Math.random() * 20, (Math.random() * 600) - 400), SceneToGet, Math.random() * 0.2, Math.random() * 6 + 1))\n        }\n\n        plane2.rotateX((Math.PI / 2) + Math.PI)\n        SceneToGet.add(plane2);\n\n        var Camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n        const cameraControls = new CameraControls(Camera, Renders.domElement);\n        cameraControls.azimuthRotateSpeed = -0.3; // negative value to invert rotation direction\n        cameraControls.polarRotateSpeed = -0.3; // negative value to invert rotation direction\n        cameraControls.truckSpeed = 1 / 1e-5 * 3;\n        cameraControls.distance = 5\n        //cameraControls.touches.two = CameraControls.ACTION.TOUCH_ZOOM_TRUCK;\n        cameraControls.saveState();\n        Camera.position.z = 5;\n\n\n        Renders.domElement.requestPointerLock()\n\n        const gridHelper = new THREE.GridHelper(50, 50);\n        gridHelper.position.y = -1;\n        SceneToGet.add(gridHelper);\n\n        function rotateAboutPoint(obj, point, axis, theta, pointIsWorld) {\n            pointIsWorld = (pointIsWorld === undefined) ? false : pointIsWorld;\n\n            if (pointIsWorld) {\n                obj.parent.localToWorld(obj.position); // compensate for world coordinate\n            }\n\n            obj.position.sub(point); // remove the offset\n            obj.position.applyAxisAngle(axis, theta); // rotate the POSITION\n            obj.position.add(point); // re-add the offset\n\n            if (pointIsWorld) {\n                obj.parent.worldToLocal(obj.position); // undo world coordinates compensation\n            }\n\n            obj.rotateOnAxis(axis, theta); // rotate the OBJECT\n            return theta\n        }\n        let time = 0\n\n        let sun = new THREE.SphereBufferGeometry(20, 20, 100, 100)\n        let sunMaterial = new MeshLambertMaterial({\n            emissive: 0xf9d71c,\n        })\n        let sunmesh = new THREE.Mesh(sun, sunMaterial)\n        sunmesh.position.set(1, 300, 300)\n        SceneToGet.add(sunmesh)\n\n        let moon = new THREE.SphereBufferGeometry(10, 10, 100, 100)\n        let moonMaterial = new MeshLambertMaterial({\n            emissive: 0xffffff,\n\n        })\n        let moonMesh = new THREE.Mesh(moon, moonMaterial)\n        moonMesh.position.set(-1, -200, -300)\n        SceneToGet.add(moonMesh)\n        let t = 0\n        let dTIme = 0\n\n\n        var animate = function() {\n            requestAnimationFrame(animate); //cube.rotation.x += 0.01;\n            let theta = rotateAboutPoint(directionalLight, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true)\n\n            rotateAboutPoint(sunmesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true)\n            rotateAboutPoint(moonMesh, new Vector3(100, 0, 0), new Vector3(1, 0, 0), 0.001, true)\n            rotateAboutPoint(directionalLight2, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.001, true)\n            let angle = THREE.MathUtils.radToDeg(cube.rotation.x)\n            setTheat(THREE.MathUtils.radToDeg(cube.rotation.x))\n            if (angle < 40) {\n                t = 0\n                directionalLight.color.setHex(0xddffee)\n                dTIme += 0.003\n                if (dTIme >= 1) {\n                    dTIme = 1\n                }\n                Renders.setClearColor(new THREE.Color().lerpColors(new THREE.Color(0xFDB813), new THREE.Color(0x87ceeb), dTIme), 1);\n                light.intensity = 0.5\n                directionalLight2.color.setHex(0x000000)\n                setDay(dTIme + ' ' + t)\n                directionalLight.intensity = 0.5\n                directionalLight2.intensity = 0\n                SceneToGet.remove(sky);\n            }\n            else if (angle) {\n                dTIme = 0\n                setDay(dTIme + ' ' + t)\n\n                t += 0.01;\n                if (t >= 1) {\n                    t = 1\n                }\n                directionalLight2.color.setHex(0xffffff)\n                //console.log(new THREE.Color().lerpColors(new THREE.Color( 0x87ceeb ), new THREE.Color( 0x000000 ), t))\n                Renders.setClearColor(new THREE.Color().lerpColors(new THREE.Color(0x87ceeb), new THREE.Color(0x000000), t), 1);\n                if (t >= 1) {\n                    SceneToGet.add(sky);\n                }\n                light.intensity = 0.2\n                directionalLight.intensity = 0\n                directionalLight2.intensity = 0.2\n\n                sky.rotation.x += -0.0004\n            }\n            cube.rotateOnAxis(new Vector3(1, 0, 0), theta)\n\n            const delta = clock.getDelta();\n            const elapsed = clock.getElapsedTime();\n            const updated = cameraControls.update(delta);\n\n            clouds.forEach((e, i) => {\n                let result = e.update()\n            })\n\n            Renders.render(SceneToGet, Camera);\n        };\n        animate();\n    }, [child])\n\n    return ( \n        <>\n        <div ref={ref => (setChild2(ref))}></div>\n\n        <\n        div ref = { ref => (setChild(ref)) }\n        />  < / >\n    )\n}\n"]},"metadata":{},"sourceType":"module"}