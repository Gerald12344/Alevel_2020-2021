{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// Written By Harvey Randall \\\\\n// This file aims to make communicatiom between client and server a lot easier, using promise\n//-------------[   Imports   ]-------------\\\\\nimport { PriorityQueue } from \"../Algorithms/PriorityQueue\";\nimport * as Joi from \"joi\"; //-------------[Core Variables]-------------\\\\\n\nvar client;\nvar Queue = new PriorityQueue(function (a, b) {\n  return a.prority > b.prority;\n});\n/**\n *  @param {string} socket - The socket io Client\n */\n\nexport function startSeverClientCommunication(socket) {\n  client = socket; //Data Handshake\n\n  client.emit(\"ConnectionEstablised\", Date.now());\n}\n/**\n *  @param {string} event - The Event name\n *  @param {array} data   - The data to send to the server\n */\n\nexport function sendDataWithPromise(event, data) {\n  var _arguments = arguments;\n  //-------------[   Create a basic promise to return data   ]-------------\\\\\n  var DataPromise = new Promise(function (resolve, reject) {\n    var resolved = false;\n\n    try {\n      var _client;\n\n      (_client = client).emit.apply(_client, [event].concat(_toConsumableArray(data)));\n\n      client.on(event + \"_Callback\", function () {\n        resolved = true;\n        resolve.apply(void 0, _toConsumableArray(_arguments));\n      });\n    } catch (err) {\n      resolved = true;\n      reject(err);\n    }\n\n    setTimeout(function () {\n      if (resolved === false) {\n        resolved = true;\n        reject(\"No data returned within 2 seconds, is there a data callback?\");\n      }\n    }, 2000);\n  });\n  return DataPromise;\n}\n/**\n *  @param {string} event        - The Event name\n *  @param {function} callback   - The function that will be called with the data back\n */\n\nexport function listenToEvent(event, callback) {\n  // Attach event handle to functions\n  client.on(event, callback);\n}\n/**\n *  @param {function} callback   - The function that will listen to all events sent to the client\n */\n\nexport function attachToMainEventStream(callback) {\n  client.onAny(function (eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    callback(eventName, args);\n  });\n}\n/**\n *  @param {string} event        - The name of the event to listen to\n *  @param {scema} scema         - The data scheme to folow\n *  @param {function} callback   - The function that will be called with the data\n */\n\nexport function listenForEventWithSchemaValidation(_x, _x2, _x3) {\n  return _listenForEventWithSchemaValidation.apply(this, arguments);\n}\n\nfunction _listenForEventWithSchemaValidation() {\n  _listenForEventWithSchemaValidation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, scema, callback) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            listenToEvent(event, function (args) {\n              var _scema$validate = scema.validate(args),\n                  error = _scema$validate.error,\n                  value = _scema$validate.value;\n\n              if (error) {\n                throw new Error(\"Scehma Check Failed\");\n              } else {\n                callback(value);\n                return value;\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _listenForEventWithSchemaValidation.apply(this, arguments);\n}\n\nexport function addDataToQueue(event, data, callback) {\n  var prority = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  Queue.push({\n    prority: prority,\n    input: [event, data, callback]\n  });\n} //-------------[   All Non essesntial communication   ]-------------\\\\\n\nsetInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var func, input, callBack, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (Queue.isEmpty()) {\n            _context.next = 14;\n            break;\n          }\n\n          func = Queue.pop();\n          input = func.input;\n          callBack = input[2];\n          _context.prev = 4;\n          _context.next = 7;\n          return sendDataWithPromise.apply(void 0, [input[0]].concat(_toConsumableArray(input[1])));\n\n        case 7:\n          data = _context.sent;\n          callBack(false, data);\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](4);\n          callBack(true, []);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, null, [[4, 11]]);\n})), 500);","map":null,"metadata":{},"sourceType":"module"}