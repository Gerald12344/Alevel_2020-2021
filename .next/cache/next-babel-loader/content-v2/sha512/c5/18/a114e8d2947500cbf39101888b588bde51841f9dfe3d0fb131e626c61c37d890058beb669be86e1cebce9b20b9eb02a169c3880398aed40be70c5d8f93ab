{"ast":null,"code":"// Written By Harvey Randall \\\\\nimport { BufferAttribute, Mesh, MeshPhongMaterial, PlaneBufferGeometry, Vector3 } from \"three\";\n\nvar SimplexNoise = require(\"simplex-noise\");\n\nlet currentTerrain;\nexport function ReturnTerrainPointer() {\n  return currentTerrain;\n}\n/*eslint complexity: [\"error\", 20]*/\n\nexport function generateTerrain(seed, SceneToGet) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  const simplex = new SimplexNoise(seed);\n  let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  let colours = [];\n  let xx;\n  let yy; //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    let x = geometry.attributes.position.array[i * 3] / 128;\n    let y = geometry.attributes.position.array[i * 3 + 1] / 128; // Check Height from Perlin Noise Generator\n\n    let height = simplex.noise2D(x, y) * 30; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n\n    xx = x;\n    yy = y;\n  }\n\n  console.log(xx, yy); //------------[Create Material]------------\\\\\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Create Mesh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true;\n  plane2.position.y = -3;\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3)); //geometry.computeVertexNormals();\n  //------------[Add to Base Scene]------------\\\\\n\n  currentTerrain = plane2;\n  plane2.name = \"MAIN_TERRAIN\";\n  SceneToGet.add(plane2);\n}\nexport function generateTerrainChunk(seed, Position, gain) {\n  //------------[MAIN FUNCTION VARIABLES]------------\\\\\n  const simplex = new SimplexNoise(seed);\n  let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n  let colours = [];\n  console.log(Position);\n\n  if (Position.x === -0) {\n    Position.x = 0;\n  }\n\n  if (Position.y === -0) {\n    Position.y = 0;\n  }\n\n  console.log(Position);\n  let conditionX = Position.x / 500 * (250 / 128);\n  let conditionY = Position.y / 500 * (250 / 128);\n  console.table({\n    conditionX,\n    conditionY\n  });\n  const positionAttribute = geometry.getAttribute(\"position\"); //------------[Edit the Geomtry Accordingly]------------\\\\\n\n  for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n    // Get Data position\n    let x = geometry.attributes.position.array[i * 3] / 128;\n    let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n    console.log(x); // Check Height from Perlin Noise Generator\n\n    let height = simplex.noise2D(x + 1.953125, y) * gain; // Set the height accordingly\n\n    geometry.attributes.position.array[i * 3 + 2] = height; // Update Vertice colours accordinly\n\n    if (height > 23) {\n      colours.push(1, 1, 1);\n    } else if (height > 5) {\n      colours.push(0.56, 0.54, 0.48);\n    } else if (height < -20) {\n      colours.push(0.501, 0.772, 0.87);\n    } else {\n      colours.push(0.56, 0.68, 0.166);\n    }\n  } //------------[Create Material]------------\\\\\n\n\n  var material = new MeshPhongMaterial({\n    vertexColors: colours,\n    reflectivity: 0,\n    roughness: 1,\n    flatShading: true\n  }); //------------[Create Mesh]------------\\\\\n\n  var plane2 = new Mesh(geometry, material);\n  plane2.receiveShadow = true;\n  plane2.castShadow = true;\n  plane2.position.set(Position.x, -3, Position.y);\n  plane2.rotateX(Math.PI / 2 + Math.PI); //------------[Edit colour attribute]------------\\\\\n\n  geometry.setAttribute(\"color\", new BufferAttribute(new Float32Array(colours), 3)); //------------[Add to Base Scene]------------\\\\\n\n  currentTerrain = plane2;\n  plane2.name = \"Terrain_Chunk\";\n  return plane2;\n}","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/ProceduleTerrain.js"],"names":["BufferAttribute","Mesh","MeshPhongMaterial","PlaneBufferGeometry","Vector3","SimplexNoise","require","currentTerrain","ReturnTerrainPointer","generateTerrain","seed","SceneToGet","simplex","geometry","colours","xx","yy","i","l","attributes","position","count","x","array","y","height","noise2D","push","console","log","material","vertexColors","reflectivity","roughness","flatShading","plane2","receiveShadow","castShadow","rotateX","Math","PI","setAttribute","Float32Array","name","add","generateTerrainChunk","Position","gain","conditionX","conditionY","table","positionAttribute","getAttribute","set"],"mappings":"AAAA;AAEA,SACIA,eADJ,EAEIC,IAFJ,EAGIC,iBAHJ,EAIIC,mBAJJ,EAKIC,OALJ,QAMO,OANP;;AAOA,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,cAAJ;AAEA,OAAO,SAASC,oBAAT,GAAgC;AACnC,SAAOD,cAAP;AACH;AAED;;AACA,OAAO,SAASE,eAAT,CAAyBC,IAAzB,EAA+BC,UAA/B,EAA2C;AAC9C;AACA,QAAMC,OAAO,GAAG,IAAIP,YAAJ,CAAiBK,IAAjB,CAAhB;AACA,MAAIG,QAAQ,GAAG,IAAIV,mBAAJ,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,GAAvC,CAAf;AACA,MAAIW,OAAO,GAAG,EAAd;AAEA,MAAIC,EAAJ;AACA,MAAIC,EAAJ,CAP8C,CAS9C;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BC,KAAjD,EAAwDJ,CAAC,GAAGC,CAA5D,EAA+DD,CAAC,EAAhE,EAAoE;AAChE;AACA,QAAIK,CAAC,GAAGT,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAmCN,CAAC,GAAG,CAAvC,IAA4C,GAApD;AACA,QAAIO,CAAC,GAAGX,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAmCN,CAAC,GAAG,CAAJ,GAAQ,CAA3C,IAAgD,GAAxD,CAHgE,CAKhE;;AACA,QAAIQ,MAAM,GAAGb,OAAO,CAACc,OAAR,CAAgBJ,CAAhB,EAAmBE,CAAnB,IAAwB,EAArC,CANgE,CAOhE;;AACAX,IAAAA,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAmCN,CAAC,GAAG,CAAJ,GAAQ,CAA3C,IAAgDQ,MAAhD,CARgE,CAUhE;;AACA,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACbX,MAAAA,OAAO,CAACa,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACH,KAFD,MAEO,IAAIF,MAAM,GAAG,CAAb,EAAgB;AACnBX,MAAAA,OAAO,CAACa,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AACH,KAFM,MAEA,IAAIF,MAAM,GAAG,CAAC,EAAd,EAAkB;AACrBX,MAAAA,OAAO,CAACa,IAAR,CAAa,KAAb,EAAoB,KAApB,EAA2B,IAA3B;AACH,KAFM,MAEA;AACHb,MAAAA,OAAO,CAACa,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB;AACH;;AAEDZ,IAAAA,EAAE,GAAGO,CAAL;AACAN,IAAAA,EAAE,GAAGQ,CAAL;AACH;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAYd,EAAZ,EAAgBC,EAAhB,EAlC8C,CAoC9C;;AACA,MAAIc,QAAQ,GAAG,IAAI5B,iBAAJ,CAAsB;AACjC6B,IAAAA,YAAY,EAAEjB,OADmB;AAEjCkB,IAAAA,YAAY,EAAE,CAFmB;AAGjCC,IAAAA,SAAS,EAAE,CAHsB;AAIjCC,IAAAA,WAAW,EAAE;AAJoB,GAAtB,CAAf,CArC8C,CA4C9C;;AACA,MAAIC,MAAM,GAAG,IAAIlC,IAAJ,CAASY,QAAT,EAAmBiB,QAAnB,CAAb;AACAK,EAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;AACAD,EAAAA,MAAM,CAACE,UAAP,GAAoB,IAApB;AACAF,EAAAA,MAAM,CAACf,QAAP,CAAgBI,CAAhB,GAAoB,CAAC,CAArB;AACAW,EAAAA,MAAM,CAACG,OAAP,CAAeC,IAAI,CAACC,EAAL,GAAU,CAAV,GAAcD,IAAI,CAACC,EAAlC,EAjD8C,CAmD9C;;AACA3B,EAAAA,QAAQ,CAAC4B,YAAT,CACI,OADJ,EAEI,IAAIzC,eAAJ,CAAoB,IAAI0C,YAAJ,CAAiB5B,OAAjB,CAApB,EAA+C,CAA/C,CAFJ,EApD8C,CAwD9C;AAEA;;AACAP,EAAAA,cAAc,GAAG4B,MAAjB;AACAA,EAAAA,MAAM,CAACQ,IAAP,GAAc,cAAd;AACAhC,EAAAA,UAAU,CAACiC,GAAX,CAAeT,MAAf;AACH;AAED,OAAO,SAASU,oBAAT,CAA8BnC,IAA9B,EAAoCoC,QAApC,EAA8CC,IAA9C,EAAoD;AACvD;AACA,QAAMnC,OAAO,GAAG,IAAIP,YAAJ,CAAiBK,IAAjB,CAAhB;AACA,MAAIG,QAAQ,GAAG,IAAIV,mBAAJ,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAAuC,GAAvC,CAAf;AACA,MAAIW,OAAO,GAAG,EAAd;AAEAc,EAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;;AAEA,MAAIA,QAAQ,CAACxB,CAAT,KAAe,CAAC,CAApB,EAAuB;AACnBwB,IAAAA,QAAQ,CAACxB,CAAT,GAAa,CAAb;AACH;;AACD,MAAIwB,QAAQ,CAACtB,CAAT,KAAe,CAAC,CAApB,EAAuB;AACnBsB,IAAAA,QAAQ,CAACtB,CAAT,GAAa,CAAb;AACH;;AAEDI,EAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;AAEA,MAAIE,UAAU,GAAIF,QAAQ,CAACxB,CAAT,GAAa,GAAd,IAAsB,MAAM,GAA5B,CAAjB;AACA,MAAI2B,UAAU,GAAIH,QAAQ,CAACtB,CAAT,GAAa,GAAd,IAAsB,MAAM,GAA5B,CAAjB;AAEAI,EAAAA,OAAO,CAACsB,KAAR,CAAc;AAAEF,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAd;AACA,QAAME,iBAAiB,GAAGtC,QAAQ,CAACuC,YAAT,CAAsB,UAAtB,CAA1B,CArBuD,CAuBvD;;AACA,OAAK,IAAInC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BC,KAAjD,EAAwDJ,CAAC,GAAGC,CAA5D,EAA+DD,CAAC,EAAhE,EAAoE;AAChE;AACA,QAAIK,CAAC,GAAGT,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAmCN,CAAC,GAAG,CAAvC,IAA4C,GAApD;AACA,QAAIO,CAAC,GAAGX,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAmCN,CAAC,GAAG,CAAJ,GAAQ,CAA3C,IAAgD,GAAxD;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ,EALgE,CAOhE;;AACA,QAAIG,MAAM,GAAGb,OAAO,CAACc,OAAR,CAAgBJ,CAAC,GAAG,QAApB,EAA8BE,CAA9B,IAAmCuB,IAAhD,CARgE,CAShE;;AACAlC,IAAAA,QAAQ,CAACM,UAAT,CAAoBC,QAApB,CAA6BG,KAA7B,CAAmCN,CAAC,GAAG,CAAJ,GAAQ,CAA3C,IAAgDQ,MAAhD,CAVgE,CAYhE;;AACA,QAAIA,MAAM,GAAG,EAAb,EAAiB;AACbX,MAAAA,OAAO,CAACa,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACH,KAFD,MAEO,IAAIF,MAAM,GAAG,CAAb,EAAgB;AACnBX,MAAAA,OAAO,CAACa,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AACH,KAFM,MAEA,IAAIF,MAAM,GAAG,CAAC,EAAd,EAAkB;AACrBX,MAAAA,OAAO,CAACa,IAAR,CAAa,KAAb,EAAoB,KAApB,EAA2B,IAA3B;AACH,KAFM,MAEA;AACHb,MAAAA,OAAO,CAACa,IAAR,CAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB;AACH;AACJ,GA9CsD,CAgDtD;;;AACA,MAAIG,QAAQ,GAAG,IAAI5B,iBAAJ,CAAsB;AAClC6B,IAAAA,YAAY,EAAEjB,OADoB;AAElCkB,IAAAA,YAAY,EAAE,CAFoB;AAGlCC,IAAAA,SAAS,EAAE,CAHuB;AAIlCC,IAAAA,WAAW,EAAE;AAJqB,GAAtB,CAAf,CAjDsD,CAwDvD;;AACA,MAAIC,MAAM,GAAG,IAAIlC,IAAJ,CAASY,QAAT,EAAmBiB,QAAnB,CAAb;AACAK,EAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;AACAD,EAAAA,MAAM,CAACE,UAAP,GAAoB,IAApB;AACAF,EAAAA,MAAM,CAACf,QAAP,CAAgBiC,GAAhB,CAAoBP,QAAQ,CAACxB,CAA7B,EAAgC,CAAC,CAAjC,EAAoCwB,QAAQ,CAACtB,CAA7C;AACAW,EAAAA,MAAM,CAACG,OAAP,CAAeC,IAAI,CAACC,EAAL,GAAU,CAAV,GAAcD,IAAI,CAACC,EAAlC,EA7DuD,CA+DvD;;AACA3B,EAAAA,QAAQ,CAAC4B,YAAT,CACI,OADJ,EAEI,IAAIzC,eAAJ,CAAoB,IAAI0C,YAAJ,CAAiB5B,OAAjB,CAApB,EAA+C,CAA/C,CAFJ,EAhEuD,CAsEvD;;AACAP,EAAAA,cAAc,GAAG4B,MAAjB;AACAA,EAAAA,MAAM,CAACQ,IAAP,GAAc,eAAd;AACA,SAAOR,MAAP;AACH","sourcesContent":["// Written By Harvey Randall \\\\\n\nimport {\n    BufferAttribute,\n    Mesh,\n    MeshPhongMaterial,\n    PlaneBufferGeometry,\n    Vector3,\n} from \"three\";\nvar SimplexNoise = require(\"simplex-noise\");\n\nlet currentTerrain;\n\nexport function ReturnTerrainPointer() {\n    return currentTerrain;\n}\n\n/*eslint complexity: [\"error\", 20]*/\nexport function generateTerrain(seed, SceneToGet) {\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed);\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    let xx;\n    let yy;\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        let x = geometry.attributes.position.array[i * 3] / 128;\n        let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(x, y) * 30;\n        // Set the height accordingly\n        geometry.attributes.position.array[i * 3 + 2] = height;\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1);\n        } else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48);\n        } else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87);\n        } else {\n            colours.push(0.56, 0.68, 0.166);\n        }\n\n        xx = x;\n        yy = y;\n    }\n    console.log(xx, yy);\n\n    //------------[Create Material]------------\\\\\n    var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Create Mesh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.y = -3;\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n    //geometry.computeVertexNormals();\n\n    //------------[Add to Base Scene]------------\\\\\n    currentTerrain = plane2;\n    plane2.name = \"MAIN_TERRAIN\";\n    SceneToGet.add(plane2);\n}\n\nexport function generateTerrainChunk(seed, Position, gain) {\n    //------------[MAIN FUNCTION VARIABLES]------------\\\\\n    const simplex = new SimplexNoise(seed);\n    let geometry = new PlaneBufferGeometry(500, 500, 100, 100);\n    let colours = [];\n\n    console.log(Position);\n\n    if (Position.x === -0) {\n        Position.x = 0;\n    }\n    if (Position.y === -0) {\n        Position.y = 0;\n    }\n\n    console.log(Position);\n\n    let conditionX = (Position.x / 500) * (250 / 128);\n    let conditionY = (Position.y / 500) * (250 / 128);\n\n    console.table({ conditionX, conditionY });\n    const positionAttribute = geometry.getAttribute(\"position\");\n\n    //------------[Edit the Geomtry Accordingly]------------\\\\\n    for (var i = 0, l = geometry.attributes.position.count; i < l; i++) {\n        // Get Data position\n        let x = geometry.attributes.position.array[i * 3] / 128;\n        let y = geometry.attributes.position.array[i * 3 + 1] / 128;\n\n        console.log(x)\n\n        // Check Height from Perlin Noise Generator\n        let height = simplex.noise2D(x + 1.953125, y) * gain;\n        // Set the height accordingly\n        geometry.attributes.position.array[i * 3 + 2] = height;\n\n        // Update Vertice colours accordinly\n        if (height > 23) {\n            colours.push(1, 1, 1);\n        } else if (height > 5) {\n            colours.push(0.56, 0.54, 0.48);\n        } else if (height < -20) {\n            colours.push(0.501, 0.772, 0.87);\n        } else {\n            colours.push(0.56, 0.68, 0.166);\n        }\n    }\n\n     //------------[Create Material]------------\\\\\n     var material = new MeshPhongMaterial({\n        vertexColors: colours,\n        reflectivity: 0,\n        roughness: 1,\n        flatShading: true,\n    });\n\n    //------------[Create Mesh]------------\\\\\n    var plane2 = new Mesh(geometry, material);\n    plane2.receiveShadow = true;\n    plane2.castShadow = true;\n    plane2.position.set(Position.x, -3, Position.y);\n    plane2.rotateX(Math.PI / 2 + Math.PI);\n\n    //------------[Edit colour attribute]------------\\\\\n    geometry.setAttribute(\n        \"color\",\n        new BufferAttribute(new Float32Array(colours), 3)\n    );\n\n\n    //------------[Add to Base Scene]------------\\\\\n    currentTerrain = plane2;\n    plane2.name = \"Terrain_Chunk\";\n    return plane2;\n}\n"]},"metadata":{},"sourceType":"module"}