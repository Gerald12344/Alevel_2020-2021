{"ast":null,"code":"import _regeneratorRuntime from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/year12/Desktop/Harvey/alevel_2020-2021/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { ReturnTerrainPointer } from \"../ProceduleTerrain\";\nexport function GenerateTrees(_x, _x2, _x3, _x4, _x5) {\n  return _GenerateTrees.apply(this, arguments);\n}\n_c2 = GenerateTrees;\n\nfunction _GenerateTrees() {\n  _GenerateTrees = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(num, scene, start, bounds, seed) {\n    var tree, group, simplex, i, randomVector, height, newTree, point;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return addGLBFile(\"/Assets/PineTree.glb\", scene);\n\n          case 2:\n            tree = _context.sent;\n            scene.add(tree.scene);\n            console.log(tree.scene.children);\n            tree.scene.children[0].material = new MeshStandardMaterial({\n              color: 0x694b37\n            });\n            tree.scene.children[1].material = new MeshStandardMaterial({\n              color: 0x216734\n            });\n            group = new Group();\n            simplex = new SimplexNoise(seed);\n\n            for (i = 0; i < num; i++) {\n              randomVector = randomVectorBetweenPoints2D(start, bounds);\n              height = simplex.noise2D(randomVector.x, randomVector.y) * 30;\n\n              if (height > -20) {\n                newTree = tree.scene.clone();\n                newTree.rotateY(radiants(Math.random() * 360));\n                point = randomVector;\n                point.y = height;\n                newTree.position.set(point.x, point.y, point.z);\n                group.add(newTree);\n              }\n            }\n\n            scene.add(group);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _GenerateTrees.apply(this, arguments);\n}\n\n_c = GenerateTrees;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GenerateTrees\");\n$RefreshReg$(_c2, \"GenerateTrees\");","map":{"version":3,"sources":["/Users/year12/Desktop/Harvey/alevel_2020-2021/components/gameFundalmentals/staticAssets/treeBuilder.js"],"names":["ArrowHelper","Group","MeshBasicMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","Raycaster","Vector3","radiants","randomVectorBetweenPoints2D","addGLBFile","ReturnTerrainPointer","GenerateTrees","num","scene","start","bounds","seed","tree","add","console","log","children","material","color","group","simplex","SimplexNoise","i","randomVector","height","noise2D","x","y","newTree","clone","rotateY","Math","random","point","position","set","z"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,KAAtB,EAA6BC,iBAA7B,EAAgDC,kBAAhD,EAAoEC,iBAApE,EAAuFC,oBAAvF,EAA6GC,SAA7G,EAAwHC,OAAxH,QAAuI,OAAvI;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,UAAT,QAA2B,0CAA3B;AACA,SAASC,oBAAT,QAAqC,qBAArC;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;MAAsBA,a;;;4EAAf,iBAA6BC,GAA7B,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,MAAhD,EAAwDC,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcP,UAAU,CACvB,sBADuB,EAEvBI,KAFuB,CADxB;;AAAA;AACCI,YAAAA,IADD;AAKHJ,YAAAA,KAAK,CAACK,GAAN,CAAUD,IAAI,CAACJ,KAAf;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACJ,KAAL,CAAWQ,QAAvB;AACAJ,YAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,GAAkC,IAAIlB,oBAAJ,CAAyB;AAACmB,cAAAA,KAAK,EAAE;AAAR,aAAzB,CAAlC;AACAN,YAAAA,IAAI,CAACJ,KAAL,CAAWQ,QAAX,CAAoB,CAApB,EAAuBC,QAAvB,GAAkC,IAAIlB,oBAAJ,CAAyB;AAACmB,cAAAA,KAAK,EAAE;AAAR,aAAzB,CAAlC;AAEIC,YAAAA,KAVD,GAUS,IAAIxB,KAAJ,EAVT;AAWGyB,YAAAA,OAXH,GAWa,IAAIC,YAAJ,CAAiBV,IAAjB,CAXb;;AAYH,iBAAQW,CAAR,GAAU,CAAV,EAAYA,CAAC,GAACf,GAAd,EAAkBe,CAAC,EAAnB,EAAsB;AACdC,cAAAA,YADc,GACCpB,2BAA2B,CAAEM,KAAF,EAASC,MAAT,CAD5B;AAGdc,cAAAA,MAHc,GAGLJ,OAAO,CAACK,OAAR,CAAgBF,YAAY,CAACG,CAA7B,EAAgCH,YAAY,CAACI,CAA7C,IAAkD,EAH7C;;AAKlB,kBAAGH,MAAM,GAAG,CAAC,EAAb,EAAgB;AACRI,gBAAAA,OADQ,GACEhB,IAAI,CAACJ,KAAL,CAAWqB,KAAX,EADF;AAEZD,gBAAAA,OAAO,CAACE,OAAR,CAAgB5B,QAAQ,CAAC6B,IAAI,CAACC,MAAL,KAAc,GAAf,CAAxB;AACIC,gBAAAA,KAHQ,GAGAV,YAHA;AAIZU,gBAAAA,KAAK,CAACN,CAAN,GAAUH,MAAV;AACAI,gBAAAA,OAAO,CAACM,QAAR,CAAiBC,GAAjB,CAAqBF,KAAK,CAACP,CAA3B,EAA8BO,KAAK,CAACN,CAApC,EAAuCM,KAAK,CAACG,CAA7C;AACAjB,gBAAAA,KAAK,CAACN,GAAN,CAAUe,OAAV;AACH;AACJ;;AACDpB,YAAAA,KAAK,CAACK,GAAN,CAAUM,KAAV;;AA1BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAeb,a","sourcesContent":["import { ArrowHelper, Group, MeshBasicMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshStandardMaterial, Raycaster, Vector3 } from \"three\";\nimport { radiants } from \"../../Algorithms/degToRad\";\nimport { randomVectorBetweenPoints2D } from \"../../Algorithms/VectorUtils\";\nimport { addGLBFile } from \"../../Core-API/3dModelHandlers/GLBLoader\";\nimport { ReturnTerrainPointer } from \"../ProceduleTerrain\";\n\nexport async function GenerateTrees(num, scene, start, bounds, seed){\n    let tree = await addGLBFile(\n        \"/Assets/PineTree.glb\",\n        scene\n    );\n    scene.add(tree.scene)\n    console.log(tree.scene.children)\n    tree.scene.children[0].material = new MeshStandardMaterial({color: 0x694b37 })\n    tree.scene.children[1].material = new MeshStandardMaterial({color: 0x216734 })\n    \n    let group = new Group()\n    const simplex = new SimplexNoise(seed);\n    for(let i=0;i<num;i++){\n        let randomVector = randomVectorBetweenPoints2D( start, bounds)\n\n        let height = simplex.noise2D(randomVector.x, randomVector.y) * 30;\n\n        if(height > -20){\n            let newTree = tree.scene.clone()\n            newTree.rotateY(radiants(Math.random()*360))\n            let point = randomVector\n            point.y = height\n            newTree.position.set(point.x, point.y, point.z)\n            group.add(newTree)\n        }\n    }\n    scene.add(group)\n}"]},"metadata":{},"sourceType":"module"}