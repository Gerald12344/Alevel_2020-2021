"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _setupMultiplayer = require("./server/setupMultiplayer");

var _express = _interopRequireDefault(require("express"));

var _socket = require("socket.io");

var _setupLogger = require("./server/setupLogger");

var next = require("next");

var dev = process.env.DevOn === "false" ? false : true;
var apps = next({
  dev: dev,
  dir: "."
});
var handle = apps.getRequestHandler();

var http = require("http");

var seed = Math.random();

var rug = require("random-username-generator");

var _PORT = process.env.PORT || 8080;

var games = [{
  id: 1,
  connectedClients: [],
  timeOfDay: 0
}];
var connectedClients = [];
(0, _setupMultiplayer.TestApp)();
var logger = (0, _setupLogger.SetupLogger)();
apps.prepare().then( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var app, server, io, r;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          app = (0, _express["default"])();
          server = http.createServer(app);
          io = new _socket.Server(server);

          r = function r() {
            return Math.random() * 256 >> 0;
          };

          io.on("connection", function (socket) {
            var data = {
              id: socket.id,
              color: "rgb(".concat(r(), ", ").concat(r(), ", ").concat(r(), ")"),
              name: rug.generate(),
              lastUpdate: Date.now(),
              pos: {
                x: 0,
                y: 0,
                z: 0
              },
              rot: {
                _x: 0,
                _y: 0,
                _z: 0
              }
            };
            connectedClients[Number(socket.id)] = data;
            io.emit("NewPlayer", socket.id, data);
            io.to(socket.id).emit("welcome", seed, connectedClients, data);
            socket.on("LocationUpdate", function (pos, rot) {
              if (typeof connectedClients[Number(socket.id)] !== "undefined") {
                connectedClients[Number(socket.id)].lastUpdate = Date.now();
                socket.broadcast.emit("PlayerLocationUpdate", socket.id, pos, rot, connectedClients[Number(socket.id)]);
              }
            });
            socket.on("sendChat", function (data) {
              io.emit("NewChat", connectedClients[Number(socket.id)], data);
            });
            socket.on("disconnect", function () {
              io.emit("LostPLayer", socket.id, false, connectedClients[Number(socket.id)]);
              delete connectedClients[Number(socket.id)];
            });
            var iid = setInterval(function () {
              if (typeof connectedClients[Number(socket.id)] === "undefined") {
                clearInterval(iid);
                return;
              }

              if (connectedClients[Number(socket.id)].lastUpdate < Date.now() - 5000) {
                io.emit("LostPLayer", socket.id, true, connectedClients[Number(socket.id)]);
                logger.info("Lost Player ".concat(socket.id));
                delete connectedClients[Number(socket.id)];
                io.to(socket.id).emit("Disconencted", true);
                clearInterval(iid);
              }
            }, 2000);
          });
          /*eslint complexity: ["error", 20]*/

          app.get("*", function (req, res) {
            if (!(req.url.includes("api") || req.url.includes("xml") || req.url.endsWith("login") || req.url.endsWith("logout"))) {
              return handle(req, res);
            }
          });
          server.listen(_PORT, function () {
            logger.info("listening on localhost:" + _PORT);
          });

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})))["catch"](function (ex) {
  logger.info(ex.stack);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJuZXh0IiwicmVxdWlyZSIsImRldiIsInByb2Nlc3MiLCJlbnYiLCJEZXZPbiIsImFwcHMiLCJkaXIiLCJoYW5kbGUiLCJnZXRSZXF1ZXN0SGFuZGxlciIsImh0dHAiLCJzZWVkIiwiTWF0aCIsInJhbmRvbSIsInJ1ZyIsIl9QT1JUIiwiUE9SVCIsImdhbWVzIiwiaWQiLCJjb25uZWN0ZWRDbGllbnRzIiwidGltZU9mRGF5IiwibG9nZ2VyIiwicHJlcGFyZSIsInRoZW4iLCJhcHAiLCJzZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJpbyIsIlNlcnZlciIsInIiLCJvbiIsInNvY2tldCIsImRhdGEiLCJjb2xvciIsIm5hbWUiLCJnZW5lcmF0ZSIsImxhc3RVcGRhdGUiLCJEYXRlIiwibm93IiwicG9zIiwieCIsInkiLCJ6Iiwicm90IiwiX3giLCJfeSIsIl96IiwiTnVtYmVyIiwiZW1pdCIsInRvIiwiYnJvYWRjYXN0IiwiaWlkIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW5mbyIsImdldCIsInJlcSIsInJlcyIsInVybCIsImluY2x1ZGVzIiwiZW5kc1dpdGgiLCJsaXN0ZW4iLCJleCIsInN0YWNrIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFGQSxJQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUlBLElBQU1DLEdBQUcsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQVosS0FBc0IsT0FBdEIsR0FBZ0MsS0FBaEMsR0FBd0MsSUFBcEQ7QUFDQSxJQUFNQyxJQUFJLEdBQUdOLElBQUksQ0FBQztBQUFFRSxFQUFBQSxHQUFHLEVBQUhBLEdBQUY7QUFBUUssRUFBQUEsR0FBRyxFQUFDO0FBQVosQ0FBRCxDQUFqQjtBQUNBLElBQU1DLE1BQU0sR0FBR0YsSUFBSSxDQUFDRyxpQkFBTCxFQUFmOztBQUVBLElBQU1D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O0FBQzFCekMsRUFBQUEsTUFBTSxDQUFDaUMsSUFBUCxDQUFZUSxFQUFFLENBQUNDLEtBQWY7QUFDQTVELEVBQUFBLE9BQU8sQ0FBQzZELElBQVIsQ0FBYSxDQUFiO0FBQ0gsQ0E3RkwiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFRlc3RBcHAgfSBmcm9tIFwiLi9zZXJ2ZXIvc2V0dXBNdWx0aXBsYXllclwiO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIlxuXG5jb25zdCBuZXh0ID0gcmVxdWlyZShcIm5leHRcIik7XG5pbXBvcnQgeyBTZXJ2ZXIgfSBmcm9tIFwic29ja2V0LmlvXCJcbmltcG9ydCB7IFNldHVwTG9nZ2VyIH0gZnJvbSBcIi4vc2VydmVyL3NldHVwTG9nZ2VyXCI7XG5cbmNvbnN0IGRldiA9IHByb2Nlc3MuZW52LkRldk9uID09PSBcImZhbHNlXCIgPyBmYWxzZSA6IHRydWU7XG5jb25zdCBhcHBzID0gbmV4dCh7IGRldiAsIGRpcjpcIi5cIn0pO1xuY29uc3QgaGFuZGxlID0gYXBwcy5nZXRSZXF1ZXN0SGFuZGxlcigpO1xuXG5jb25zdCBodHRwID0gcmVxdWlyZShcImh0dHBcIik7XG5jb25zdCBzZWVkID0gTWF0aC5yYW5kb20oKTtcbnZhciBydWcgPSByZXF1aXJlKFwicmFuZG9tLXVzZXJuYW1lLWdlbmVyYXRvclwiKTtcblxubGV0IF9QT1JUID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuXG5sZXQgZ2FtZXMgPSBbXG4gICAge1xuICAgICAgICBpZDogMSxcbiAgICAgICAgY29ubmVjdGVkQ2xpZW50czogW10sXG4gICAgICAgIHRpbWVPZkRheTogMCxcbiAgICB9LFxuXTtcbmxldCBjb25uZWN0ZWRDbGllbnRzOntcbiAgICBpZDogU3RyaW5nLFxuICAgIGNvbG9yOiAgU3RyaW5nLFxuICAgIG5hbWU6IFN0cmluZyxcbiAgICBsYXN0VXBkYXRlOiBOdW1iZXIsXG4gICAgcG9zOiB7IHg6IE51bWJlciwgeTogTnVtYmVyLCB6OiBOdW1iZXJ9LFxuICAgIHJvdDogeyBfeDogTnVtYmVyLCBfeTogTnVtYmVyLCBfejogTnVtYmVyIH0sXG59W10gPSBbXTtcblxuVGVzdEFwcCgpXG5sZXQgbG9nZ2VyID0gU2V0dXBMb2dnZXIoKVxuXG5hcHBzLnByZXBhcmUoKVxuICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGFwcCA9IGV4cHJlc3MoKTtcbiAgICAgICAgY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcblxuICAgICAgICBjb25zdCBpbyA9IG5ldyBTZXJ2ZXIoc2VydmVyKTtcbiAgICAgICAgdmFyIHIgPSAoKSA9PiAoTWF0aC5yYW5kb20oKSAqIDI1NikgPj4gMDtcblxuICAgICAgICBpby5vbihcImNvbm5lY3Rpb25cIiwgKHNvY2tldCkgPT4ge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IHNvY2tldC5pZCxcbiAgICAgICAgICAgICAgICBjb2xvcjogYHJnYigke3IoKX0sICR7cigpfSwgJHtyKCl9KWAsXG4gICAgICAgICAgICAgICAgbmFtZTogcnVnLmdlbmVyYXRlKCksXG4gICAgICAgICAgICAgICAgbGFzdFVwZGF0ZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICBwb3M6IHsgeDogMCwgeTogMCwgejogMCB9LFxuICAgICAgICAgICAgICAgIHJvdDogeyBfeDogMCwgX3k6IDAsIF96OiAwIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29ubmVjdGVkQ2xpZW50c1tOdW1iZXIoc29ja2V0LmlkKV0gPSBkYXRhO1xuICAgICAgICAgICAgaW8uZW1pdChcIk5ld1BsYXllclwiLCBzb2NrZXQuaWQsIGRhdGEpO1xuICAgICAgICAgICAgaW8udG8oc29ja2V0LmlkKS5lbWl0KFwid2VsY29tZVwiLCBzZWVkLCBjb25uZWN0ZWRDbGllbnRzLCBkYXRhKTtcblxuICAgICAgICAgICAgc29ja2V0Lm9uKFwiTG9jYXRpb25VcGRhdGVcIiwgKHBvczp7fSwgcm90Ont9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0ZWRDbGllbnRzW051bWJlcihzb2NrZXQuaWQpXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWRDbGllbnRzW051bWJlcihzb2NrZXQuaWQpXS5sYXN0VXBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmJyb2FkY2FzdC5lbWl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJQbGF5ZXJMb2NhdGlvblVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm90LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGVkQ2xpZW50c1tOdW1iZXIoc29ja2V0LmlkKV1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc29ja2V0Lm9uKFwic2VuZENoYXRcIiwgKGRhdGE6U3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaW8uZW1pdChcIk5ld0NoYXRcIiwgY29ubmVjdGVkQ2xpZW50c1tOdW1iZXIoc29ja2V0LmlkKV0sIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNvY2tldC5vbihcImRpc2Nvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlvLmVtaXQoXG4gICAgICAgICAgICAgICAgICAgIFwiTG9zdFBMYXllclwiLFxuICAgICAgICAgICAgICAgICAgICBzb2NrZXQuaWQsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWRDbGllbnRzW051bWJlcihzb2NrZXQuaWQpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3RlZENsaWVudHNbTnVtYmVyKHNvY2tldC5pZCldO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxldCBpaWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0ZWRDbGllbnRzW051bWJlcihzb2NrZXQuaWQpXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGlpZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWRDbGllbnRzW051bWJlcihzb2NrZXQuaWQpXS5sYXN0VXBkYXRlIDxcbiAgICAgICAgICAgICAgICAgICAgRGF0ZS5ub3coKSAtIDUwMDBcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgaW8uZW1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTG9zdFBMYXllclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ja2V0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RlZENsaWVudHNbTnVtYmVyKHNvY2tldC5pZCldXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBMb3N0IFBsYXllciAke3NvY2tldC5pZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3RlZENsaWVudHNbTnVtYmVyKHNvY2tldC5pZCldO1xuICAgICAgICAgICAgICAgICAgICBpby50byhzb2NrZXQuaWQpLmVtaXQoXCJEaXNjb25lbmN0ZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAyMDAwKTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAvKmVzbGludCBjb21wbGV4aXR5OiBbXCJlcnJvclwiLCAyMF0qL1xuICAgICAgICBhcHAuZ2V0KFwiKlwiLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgICAgICByZXEudXJsLmluY2x1ZGVzKFwiYXBpXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlcS51cmwuaW5jbHVkZXMoXCJ4bWxcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgcmVxLnVybC5lbmRzV2l0aChcImxvZ2luXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlcS51cmwuZW5kc1dpdGgoXCJsb2dvdXRcIilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKHJlcSwgcmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2VydmVyLmxpc3RlbihfUE9SVCwgKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJsaXN0ZW5pbmcgb24gbG9jYWxob3N0OlwiICsgX1BPUlQpO1xuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXg6e3N0YWNrOlN0cmluZ30pID0+IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oZXguc3RhY2spO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfSk7XG5cblxuIl19