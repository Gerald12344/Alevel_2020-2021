"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _setupMultiplayer = require("./server/setupMultiplayer");

var _express = _interopRequireDefault(require("express"));

var _socket = require("socket.io");

var _setupLogger = require("./server/setupLogger");

var next = require("next");

var dev = process.env.DevOn == "false" ? false : true;
var apps = next({
  dev: false,
  dir: "."
});
var handle = apps.getRequestHandler();

var http = require("http");

var seed = Math.random();

var rug = require("random-username-generator");

var _PORT = process.env.PORT || 8080;

var games = [{
  id: 1,
  connectedClients: [],
  timeOfDay: 0
}];
var connectedClients = [];
(0, _setupMultiplayer.TestApp)();
var logger = (0, _setupLogger.SetupLogger)();
apps.prepare().then( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var app, server, io, r;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          app = (0, _express["default"])();
          server = http.createServer(app);
          io = new _socket.Server(server);

          r = function r() {
            return Math.random() * 256 >> 0;
          };

          io.on("connection", function (socket) {
            var data = {
              id: socket.id,
              color: "rgb(".concat(r(), ", ").concat(r(), ", ").concat(r(), ")"),
              name: rug.generate(),
              lastUpdate: Date.now(),
              pos: {
                x: 0,
                y: 0,
                z: 0
              },
              rot: {
                _x: 0,
                _y: 0,
                _z: 0
              }
            };
            connectedClients[Number(socket.id)] = data;
            io.emit("NewPlayer", socket.id, data);
            io.to(socket.id).emit("welcome", seed, connectedClients, data);
            socket.on("LocationUpdate", function (pos, rot) {
              if (typeof connectedClients[Number(socket.id)] !== "undefined") {
                connectedClients[Number(socket.id)].lastUpdate = Date.now();
                socket.broadcast.emit("PlayerLocationUpdate", socket.id, pos, rot, connectedClients[Number(socket.id)]);
              }
            });
            socket.on("sendChat", function (data) {
              io.emit("NewChat", connectedClients[Number(socket.id)], data);
            });
            socket.on("disconnect", function () {
              io.emit("LostPLayer", socket.id, false, connectedClients[Number(socket.id)]);
              delete connectedClients[Number(socket.id)];
            });
            var iid = setInterval(function () {
              if (typeof connectedClients[Number(socket.id)] === "undefined") {
                clearInterval(iid);
                return;
              }

              if (connectedClients[Number(socket.id)].lastUpdate < Date.now() - 5000) {
                io.emit("LostPLayer", socket.id, true, connectedClients[Number(socket.id)]);
                logger.info("Lost Player ".concat(socket.id));
                delete connectedClients[Number(socket.id)];
                io.to(socket.id).emit("Disconencted", true);
                clearInterval(iid);
              }
            }, 2000);
          });
          /*eslint complexity: ["error", 20]*/

          app.get("*", function (req, res) {
            if (!(req.url.includes("api") || req.url.includes("xml") || req.url.endsWith("login") || req.url.endsWith("logout"))) {
              return handle(req, res);
            }
          });
          server.listen(_PORT, function () {
            logger.info("listening on localhost:" + _PORT);
          });

        case 7:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})))["catch"](function (ex) {
  logger.info(ex.stack);
  process.exit(1);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,